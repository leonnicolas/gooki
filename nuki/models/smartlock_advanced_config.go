// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockAdvancedConfig smartlock advanced config
//
// swagger:model Smartlock.AdvancedConfig
type SmartlockAdvancedConfig struct {

	// New separate flag with FW >= 2.7.8/1.9.1: The Auto Lock feature automatically locks your door when it has been unlocked for a certain period of time
	AutoLock bool `json:"autoLock,omitempty"`

	// Seconds until the smart lock relocks itself after it has been unlocked. FW < 2.7.8/1.9.1: No auto relock if value is 0, FW >= 2.7.8/1.9.1: has to be >=2 (defaults to 2 for values <2 if autoLock is set to true)
	AutoLockTimeout int32 `json:"autoLockTimeout,omitempty"`

	// Flag that indicates if available firmware updates for the deviceshould be installed automatically
	AutoUpdateEnabled bool `json:"autoUpdateEnabled,omitempty"`

	// Flag that indicates if the automatic detection of the battery type is enabled
	AutomaticBatteryTypeDetection bool `json:"automaticBatteryTypeDetection,omitempty"`

	// The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium
	// Required: true
	BatteryType *int32 `json:"batteryType"`

	// Flag that indicates that the inner side of the used cylinder is detached from the outer side
	DetachedCylinder bool `json:"detachedCylinder,omitempty"`

	// The desired action, if the button is pressed twice: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status
	DoubleButtonPressAction int32 `json:"doubleButtonPressAction,omitempty"`

	// Timeout in seconds for lock ‘n’ go
	// Enum: [5 10 15 20 30 45 60]
	LngTimeout int32 `json:"lngTimeout,omitempty"`

	// Offset that alters the locked position
	// Required: true
	LockedPositionOffsetDegrees *int32 `json:"lockedPositionOffsetDegrees"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// The desired action, if the button is pressed once: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status
	SingleButtonPressAction int32 `json:"singleButtonPressAction,omitempty"`

	// Offset that alters the single locked position
	// Required: true
	SingleLockedPositionOffsetDegrees *int32 `json:"singleLockedPositionOffsetDegrees"`

	// The absolute total position in degrees that has been reached during calibration
	// Required: true
	// Read Only: true
	TotalDegrees int32 `json:"totalDegrees"`

	// Duration in seconds for holding the latch in unlatched position
	// Enum: [1 3 5 7 10 15 20 30]
	UnlatchDuration int32 `json:"unlatchDuration,omitempty"`

	// Offset that alters the unlocked position
	// Required: true
	UnlockedPositionOffsetDegrees *int32 `json:"unlockedPositionOffsetDegrees"`

	// Offset that alters the position where transition from unlocked to locked happens
	UnlockedToLockedTransitionOffsetDegrees int32 `json:"unlockedToLockedTransitionOffsetDegrees,omitempty"`
}

// Validate validates this smartlock advanced config
func (m *SmartlockAdvancedConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatteryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLngTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedPositionOffsetDegrees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleLockedPositionOffsetDegrees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDegrees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnlatchDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnlockedPositionOffsetDegrees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockAdvancedConfig) validateBatteryType(formats strfmt.Registry) error {

	if err := validate.Required("batteryType", "body", m.BatteryType); err != nil {
		return err
	}

	return nil
}

var smartlockAdvancedConfigTypeLngTimeoutPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[5,10,15,20,30,45,60]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockAdvancedConfigTypeLngTimeoutPropEnum = append(smartlockAdvancedConfigTypeLngTimeoutPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockAdvancedConfig) validateLngTimeoutEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockAdvancedConfigTypeLngTimeoutPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockAdvancedConfig) validateLngTimeout(formats strfmt.Registry) error {
	if swag.IsZero(m.LngTimeout) { // not required
		return nil
	}

	// value enum
	if err := m.validateLngTimeoutEnum("lngTimeout", "body", m.LngTimeout); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAdvancedConfig) validateLockedPositionOffsetDegrees(formats strfmt.Registry) error {

	if err := validate.Required("lockedPositionOffsetDegrees", "body", m.LockedPositionOffsetDegrees); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAdvancedConfig) validateSingleLockedPositionOffsetDegrees(formats strfmt.Registry) error {

	if err := validate.Required("singleLockedPositionOffsetDegrees", "body", m.SingleLockedPositionOffsetDegrees); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAdvancedConfig) validateTotalDegrees(formats strfmt.Registry) error {

	if err := validate.Required("totalDegrees", "body", int32(m.TotalDegrees)); err != nil {
		return err
	}

	return nil
}

var smartlockAdvancedConfigTypeUnlatchDurationPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,3,5,7,10,15,20,30]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockAdvancedConfigTypeUnlatchDurationPropEnum = append(smartlockAdvancedConfigTypeUnlatchDurationPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockAdvancedConfig) validateUnlatchDurationEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockAdvancedConfigTypeUnlatchDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockAdvancedConfig) validateUnlatchDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.UnlatchDuration) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnlatchDurationEnum("unlatchDuration", "body", m.UnlatchDuration); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAdvancedConfig) validateUnlockedPositionOffsetDegrees(formats strfmt.Registry) error {

	if err := validate.Required("unlockedPositionOffsetDegrees", "body", m.UnlockedPositionOffsetDegrees); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this smartlock advanced config based on the context it is used
func (m *SmartlockAdvancedConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalDegrees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockAdvancedConfig) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAdvancedConfig) contextValidateTotalDegrees(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "totalDegrees", "body", int32(m.TotalDegrees)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockAdvancedConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockAdvancedConfig) UnmarshalBinary(b []byte) error {
	var res SmartlockAdvancedConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
