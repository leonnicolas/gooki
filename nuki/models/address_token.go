// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressToken address token
//
// swagger:model AddressToken
type AddressToken struct {

	// The address id
	// Required: true
	AddressID *int32 `json:"addressId"`

	// The creation date
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// The id
	// Required: true
	ID *string `json:"id"`

	// The list of invite keys
	InviteKeys []string `json:"inviteKeys"`

	// The redeem account id
	// Required: true
	RedeemAccountID *int32 `json:"redeemAccountId"`

	// The redeem date
	// Required: true
	// Format: date-time
	RedeemDate *strfmt.DateTime `json:"redeemDate"`

	// The redeem result
	// Enum: [ok failed]
	RedeemResult string `json:"redeemResult,omitempty"`
}

// Validate validates this address token
func (m *AddressToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressToken) validateAddressID(formats strfmt.Registry) error {

	if err := validate.Required("addressId", "body", m.AddressID); err != nil {
		return err
	}

	return nil
}

func (m *AddressToken) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressToken) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AddressToken) validateRedeemAccountID(formats strfmt.Registry) error {

	if err := validate.Required("redeemAccountId", "body", m.RedeemAccountID); err != nil {
		return err
	}

	return nil
}

func (m *AddressToken) validateRedeemDate(formats strfmt.Registry) error {

	if err := validate.Required("redeemDate", "body", m.RedeemDate); err != nil {
		return err
	}

	if err := validate.FormatOf("redeemDate", "body", "date-time", m.RedeemDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var addressTokenTypeRedeemResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressTokenTypeRedeemResultPropEnum = append(addressTokenTypeRedeemResultPropEnum, v)
	}
}

const (

	// AddressTokenRedeemResultOk captures enum value "ok"
	AddressTokenRedeemResultOk string = "ok"

	// AddressTokenRedeemResultFailed captures enum value "failed"
	AddressTokenRedeemResultFailed string = "failed"
)

// prop value enum
func (m *AddressToken) validateRedeemResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressTokenTypeRedeemResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddressToken) validateRedeemResult(formats strfmt.Registry) error {
	if swag.IsZero(m.RedeemResult) { // not required
		return nil
	}

	// value enum
	if err := m.validateRedeemResultEnum("redeemResult", "body", m.RedeemResult); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address token based on context it is used
func (m *AddressToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddressToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressToken) UnmarshalBinary(b []byte) error {
	var res AddressToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
