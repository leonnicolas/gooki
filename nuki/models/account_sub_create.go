// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountSubCreate account sub create
//
// swagger:model AccountSubCreate
type AccountSubCreate struct {

	// The email address
	// Example: test@test.at
	// Required: true
	Email *string `json:"email"`

	// The language code
	// Example: de
	// Required: true
	Language *string `json:"language"`

	// The name of the sub account
	// Required: true
	Name *string `json:"name"`

	// The password (must be at least 7 chars long)
	// Required: true
	Password *string `json:"password"`

	// The optional profile
	Profile *AccountProfile `json:"profile,omitempty"`

	// The right bitmask of the sub account: 1 .. operate smartlock, 2 .. change smartlock config, 4 .. manage smartlock users, 8 .. view smartlock logs, 16 .. manage sub accounts
	// Required: true
	// Maximum: 31
	// Minimum: 0
	Rights *int32 `json:"rights"`
}

// Validate validates this account sub create
func (m *AccountSubCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRights(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountSubCreate) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *AccountSubCreate) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *AccountSubCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AccountSubCreate) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *AccountSubCreate) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *AccountSubCreate) validateRights(formats strfmt.Registry) error {

	if err := validate.Required("rights", "body", m.Rights); err != nil {
		return err
	}

	if err := validate.MinimumInt("rights", "body", int64(*m.Rights), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rights", "body", int64(*m.Rights), 31, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this account sub create based on the context it is used
func (m *AccountSubCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountSubCreate) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.Profile != nil {

		if swag.IsZero(m.Profile) { // not required
			return nil
		}

		if err := m.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountSubCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountSubCreate) UnmarshalBinary(b []byte) error {
	var res AccountSubCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
