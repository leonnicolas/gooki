// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountUserUpdate account user update
//
// swagger:model AccountUserUpdate
type AccountUserUpdate struct {

	// The new email address
	// Example: test@test.at
	Email string `json:"email,omitempty"`

	// The new language code
	// Enum: [en de es fr it nl cs sk]
	Language string `json:"language,omitempty"`

	// The new name of the sub account
	Name string `json:"name,omitempty"`
}

// Validate validates this account user update
func (m *AccountUserUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accountUserUpdateTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en","de","es","fr","it","nl","cs","sk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountUserUpdateTypeLanguagePropEnum = append(accountUserUpdateTypeLanguagePropEnum, v)
	}
}

const (

	// AccountUserUpdateLanguageEn captures enum value "en"
	AccountUserUpdateLanguageEn string = "en"

	// AccountUserUpdateLanguageDe captures enum value "de"
	AccountUserUpdateLanguageDe string = "de"

	// AccountUserUpdateLanguageEs captures enum value "es"
	AccountUserUpdateLanguageEs string = "es"

	// AccountUserUpdateLanguageFr captures enum value "fr"
	AccountUserUpdateLanguageFr string = "fr"

	// AccountUserUpdateLanguageIt captures enum value "it"
	AccountUserUpdateLanguageIt string = "it"

	// AccountUserUpdateLanguageNl captures enum value "nl"
	AccountUserUpdateLanguageNl string = "nl"

	// AccountUserUpdateLanguageCs captures enum value "cs"
	AccountUserUpdateLanguageCs string = "cs"

	// AccountUserUpdateLanguageSk captures enum value "sk"
	AccountUserUpdateLanguageSk string = "sk"
)

// prop value enum
func (m *AccountUserUpdate) validateLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountUserUpdateTypeLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountUserUpdate) validateLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this account user update based on context it is used
func (m *AccountUserUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountUserUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountUserUpdate) UnmarshalBinary(b []byte) error {
	var res AccountUserUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
