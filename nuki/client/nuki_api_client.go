// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/leonnicolas/gooki/nuki/client/account"
	"github.com/leonnicolas/gooki/nuki/client/account_subscription"
	"github.com/leonnicolas/gooki/nuki/client/account_user"
	"github.com/leonnicolas/gooki/nuki/client/address"
	"github.com/leonnicolas/gooki/nuki/client/address_reservation"
	"github.com/leonnicolas/gooki/nuki/client/address_token"
	"github.com/leonnicolas/gooki/nuki/client/advanced_api"
	"github.com/leonnicolas/gooki/nuki/client/api_key"
	"github.com/leonnicolas/gooki/nuki/client/company"
	"github.com/leonnicolas/gooki/nuki/client/notification"
	"github.com/leonnicolas/gooki/nuki/client/opener"
	"github.com/leonnicolas/gooki/nuki/client/operations"
	"github.com/leonnicolas/gooki/nuki/client/service"
	"github.com/leonnicolas/gooki/nuki/client/smartlock"
	"github.com/leonnicolas/gooki/nuki/client/smartlock_auth"
	"github.com/leonnicolas/gooki/nuki/client/smartlock_log"
	"github.com/leonnicolas/gooki/nuki/client/subscription"
)

// Default nuki API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new nuki API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *NukiAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new nuki API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *NukiAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new nuki API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *NukiAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(NukiAPI)
	cli.Transport = transport
	cli.Account = account.New(transport, formats)
	cli.AccountSubscription = account_subscription.New(transport, formats)
	cli.AccountUser = account_user.New(transport, formats)
	cli.Address = address.New(transport, formats)
	cli.AddressReservation = address_reservation.New(transport, formats)
	cli.AddressToken = address_token.New(transport, formats)
	cli.AdvancedAPI = advanced_api.New(transport, formats)
	cli.APIKey = api_key.New(transport, formats)
	cli.Company = company.New(transport, formats)
	cli.Notification = notification.New(transport, formats)
	cli.Opener = opener.New(transport, formats)
	cli.Operations = operations.New(transport, formats)
	cli.Service = service.New(transport, formats)
	cli.Smartlock = smartlock.New(transport, formats)
	cli.SmartlockAuth = smartlock_auth.New(transport, formats)
	cli.SmartlockLog = smartlock_log.New(transport, formats)
	cli.Subscription = subscription.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// NukiAPI is a client for nuki API
type NukiAPI struct {
	Account account.ClientService

	AccountSubscription account_subscription.ClientService

	AccountUser account_user.ClientService

	Address address.ClientService

	AddressReservation address_reservation.ClientService

	AddressToken address_token.ClientService

	AdvancedAPI advanced_api.ClientService

	APIKey api_key.ClientService

	Company company.ClientService

	Notification notification.ClientService

	Opener opener.ClientService

	Operations operations.ClientService

	Service service.ClientService

	Smartlock smartlock.ClientService

	SmartlockAuth smartlock_auth.ClientService

	SmartlockLog smartlock_log.ClientService

	Subscription subscription.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *NukiAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Account.SetTransport(transport)
	c.AccountSubscription.SetTransport(transport)
	c.AccountUser.SetTransport(transport)
	c.Address.SetTransport(transport)
	c.AddressReservation.SetTransport(transport)
	c.AddressToken.SetTransport(transport)
	c.AdvancedAPI.SetTransport(transport)
	c.APIKey.SetTransport(transport)
	c.Company.SetTransport(transport)
	c.Notification.SetTransport(transport)
	c.Opener.SetTransport(transport)
	c.Operations.SetTransport(transport)
	c.Service.SetTransport(transport)
	c.Smartlock.SetTransport(transport)
	c.SmartlockAuth.SetTransport(transport)
	c.SmartlockLog.SetTransport(transport)
	c.Subscription.SetTransport(transport)
}
