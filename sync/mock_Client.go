// Code generated by mockery v2.40.3. DO NOT EDIT.

package sync

import (
	context "context"

	models "github.com/leonnicolas/gooki/nuki/models"
	mock "github.com/stretchr/testify/mock"

	nuki "github.com/leonnicolas/gooki/nuki"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateSmartlockAuth provides a mock function with given fields: _a0, _a1
func (_m *MockClient) CreateSmartlockAuth(_a0 context.Context, _a1 *models.SmartlocksAuthCreate) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSmartlockAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SmartlocksAuthCreate) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateSmartlockAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSmartlockAuth'
type MockClient_CreateSmartlockAuth_Call struct {
	*mock.Call
}

// CreateSmartlockAuth is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.SmartlocksAuthCreate
func (_e *MockClient_Expecter) CreateSmartlockAuth(_a0 interface{}, _a1 interface{}) *MockClient_CreateSmartlockAuth_Call {
	return &MockClient_CreateSmartlockAuth_Call{Call: _e.mock.On("CreateSmartlockAuth", _a0, _a1)}
}

func (_c *MockClient_CreateSmartlockAuth_Call) Run(run func(_a0 context.Context, _a1 *models.SmartlocksAuthCreate)) *MockClient_CreateSmartlockAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.SmartlocksAuthCreate))
	})
	return _c
}

func (_c *MockClient_CreateSmartlockAuth_Call) Return(_a0 error) *MockClient_CreateSmartlockAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateSmartlockAuth_Call) RunAndReturn(run func(context.Context, *models.SmartlocksAuthCreate) error) *MockClient_CreateSmartlockAuth_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *MockClient) CreateUser(_a0 context.Context, _a1 *nuki.User) (*nuki.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *nuki.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nuki.User) (*nuki.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nuki.User) *nuki.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nuki.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nuki.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *nuki.User
func (_e *MockClient_Expecter) CreateUser(_a0 interface{}, _a1 interface{}) *MockClient_CreateUser_Call {
	return &MockClient_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1)}
}

func (_c *MockClient_CreateUser_Call) Run(run func(_a0 context.Context, _a1 *nuki.User)) *MockClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*nuki.User))
	})
	return _c
}

func (_c *MockClient_CreateUser_Call) Return(_a0 *nuki.User, _a1 error) *MockClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateUser_Call) RunAndReturn(run func(context.Context, *nuki.User) (*nuki.User, error)) *MockClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *MockClient) DeleteUser(_a0 context.Context, _a1 *nuki.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *nuki.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *nuki.User
func (_e *MockClient_Expecter) DeleteUser(_a0 interface{}, _a1 interface{}) *MockClient_DeleteUser_Call {
	return &MockClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser", _a0, _a1)}
}

func (_c *MockClient_DeleteUser_Call) Run(run func(_a0 context.Context, _a1 *nuki.User)) *MockClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*nuki.User))
	})
	return _c
}

func (_c *MockClient_DeleteUser_Call) Return(_a0 error) *MockClient_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteUser_Call) RunAndReturn(run func(context.Context, *nuki.User) error) *MockClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindSmartlockAuth provides a mock function with given fields: ctx, smartlockID, accountUserID
func (_m *MockClient) FindSmartlockAuth(ctx context.Context, smartlockID int64, accountUserID int32) (*models.SmartlockAuth, error) {
	ret := _m.Called(ctx, smartlockID, accountUserID)

	if len(ret) == 0 {
		panic("no return value specified for FindSmartlockAuth")
	}

	var r0 *models.SmartlockAuth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) (*models.SmartlockAuth, error)); ok {
		return rf(ctx, smartlockID, accountUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) *models.SmartlockAuth); ok {
		r0 = rf(ctx, smartlockID, accountUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SmartlockAuth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32) error); ok {
		r1 = rf(ctx, smartlockID, accountUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FindSmartlockAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSmartlockAuth'
type MockClient_FindSmartlockAuth_Call struct {
	*mock.Call
}

// FindSmartlockAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - smartlockID int64
//   - accountUserID int32
func (_e *MockClient_Expecter) FindSmartlockAuth(ctx interface{}, smartlockID interface{}, accountUserID interface{}) *MockClient_FindSmartlockAuth_Call {
	return &MockClient_FindSmartlockAuth_Call{Call: _e.mock.On("FindSmartlockAuth", ctx, smartlockID, accountUserID)}
}

func (_c *MockClient_FindSmartlockAuth_Call) Run(run func(ctx context.Context, smartlockID int64, accountUserID int32)) *MockClient_FindSmartlockAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32))
	})
	return _c
}

func (_c *MockClient_FindSmartlockAuth_Call) Return(_a0 *models.SmartlockAuth, _a1 error) *MockClient_FindSmartlockAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FindSmartlockAuth_Call) RunAndReturn(run func(context.Context, int64, int32) (*models.SmartlockAuth, error)) *MockClient_FindSmartlockAuth_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: _a0, _a1
func (_m *MockClient) FindUserByEmail(_a0 context.Context, _a1 string) (*nuki.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *nuki.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*nuki.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *nuki.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nuki.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockClient_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockClient_Expecter) FindUserByEmail(_a0 interface{}, _a1 interface{}) *MockClient_FindUserByEmail_Call {
	return &MockClient_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", _a0, _a1)}
}

func (_c *MockClient_FindUserByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *MockClient_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_FindUserByEmail_Call) Return(_a0 *nuki.User, _a1 error) *MockClient_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FindUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*nuki.User, error)) *MockClient_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
