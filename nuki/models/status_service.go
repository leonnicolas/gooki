// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StatusService status service
//
// swagger:model StatusService
type StatusService struct {

	// conneg service
	ConnegService *ConnegService `json:"connegService,omitempty"`

	// contact email
	ContactEmail string `json:"contactEmail,omitempty"`

	// context
	Context *Context `json:"context,omitempty"`

	// converter service
	ConverterService *ConverterService `json:"converterService,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// home ref
	HomeRef *Reference `json:"homeRef,omitempty"`

	// metadata service
	MetadataService *MetadataService `json:"metadataService,omitempty"`

	// overwriting
	Overwriting bool `json:"overwriting,omitempty"`

	// started
	Started bool `json:"started,omitempty"`

	// stopped
	Stopped bool `json:"stopped,omitempty"`
}

// Validate validates this status service
func (m *StatusService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnegService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConverterService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusService) validateConnegService(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnegService) { // not required
		return nil
	}

	if m.ConnegService != nil {
		if err := m.ConnegService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connegService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connegService")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) validateConverterService(formats strfmt.Registry) error {
	if swag.IsZero(m.ConverterService) { // not required
		return nil
	}

	if m.ConverterService != nil {
		if err := m.ConverterService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("converterService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("converterService")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) validateHomeRef(formats strfmt.Registry) error {
	if swag.IsZero(m.HomeRef) { // not required
		return nil
	}

	if m.HomeRef != nil {
		if err := m.HomeRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("homeRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("homeRef")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) validateMetadataService(formats strfmt.Registry) error {
	if swag.IsZero(m.MetadataService) { // not required
		return nil
	}

	if m.MetadataService != nil {
		if err := m.MetadataService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadataService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadataService")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this status service based on the context it is used
func (m *StatusService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnegService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConverterService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHomeRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadataService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusService) contextValidateConnegService(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnegService != nil {

		if swag.IsZero(m.ConnegService) { // not required
			return nil
		}

		if err := m.ConnegService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connegService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connegService")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) contextValidateConverterService(ctx context.Context, formats strfmt.Registry) error {

	if m.ConverterService != nil {

		if swag.IsZero(m.ConverterService) { // not required
			return nil
		}

		if err := m.ConverterService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("converterService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("converterService")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) contextValidateHomeRef(ctx context.Context, formats strfmt.Registry) error {

	if m.HomeRef != nil {

		if swag.IsZero(m.HomeRef) { // not required
			return nil
		}

		if err := m.HomeRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("homeRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("homeRef")
			}
			return err
		}
	}

	return nil
}

func (m *StatusService) contextValidateMetadataService(ctx context.Context, formats strfmt.Registry) error {

	if m.MetadataService != nil {

		if swag.IsZero(m.MetadataService) { // not required
			return nil
		}

		if err := m.MetadataService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadataService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadataService")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusService) UnmarshalBinary(b []byte) error {
	var res StatusService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
