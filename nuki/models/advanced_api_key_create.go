// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdvancedAPIKeyCreate advanced Api key create
//
// swagger:model AdvancedApiKeyCreate
type AdvancedAPIKeyCreate struct {

	// The country of the headquarter or the country where you are mainly doing business in
	// Required: true
	Country *string `json:"country"`

	// Describe the services and/or products you offer to your customers and how your customers would use Nuki devices in their processes
	// Required: true
	Description *string `json:"description"`

	// An email address where we can contact you for checks on your application
	// Required: true
	Email *string `json:"email"`

	// The name of the company for which you apply for access
	// Required: true
	Name *string `json:"name"`

	// Whether the advanced API key is restricted
	// Required: true
	Restricted *bool `json:"restricted"`

	// The application type
	// Required: true
	// Enum: [ONLY_SECRET SHORT_RENTAL HEALTHCARE SMART_HOME OTHER]
	Type *string `json:"type"`

	// A website where we can find more information on the company and its business model
	// Required: true
	URL *string `json:"url"`

	// The features to trigger webhooks, for all types except 'ONLY_SECRET'
	// Required: true
	// Unique: true
	WebhookFeatures []string `json:"webhookFeatures"`

	// The status of the webhook posting automation
	// Read Only: true
	// Enum: [ACTIVE DEACTIVATED]
	WebhookStatus string `json:"webhookStatus,omitempty"`

	// The URL where our webhooks should point to
	// Required: true
	WebhookURL *string `json:"webhookUrl"`
}

// Validate validates this advanced Api key create
func (m *AdvancedAPIKeyCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestricted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedAPIKeyCreate) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedAPIKeyCreate) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedAPIKeyCreate) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedAPIKeyCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedAPIKeyCreate) validateRestricted(formats strfmt.Registry) error {

	if err := validate.Required("restricted", "body", m.Restricted); err != nil {
		return err
	}

	return nil
}

var advancedApiKeyCreateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONLY_SECRET","SHORT_RENTAL","HEALTHCARE","SMART_HOME","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedApiKeyCreateTypeTypePropEnum = append(advancedApiKeyCreateTypeTypePropEnum, v)
	}
}

const (

	// AdvancedAPIKeyCreateTypeONLYSECRET captures enum value "ONLY_SECRET"
	AdvancedAPIKeyCreateTypeONLYSECRET string = "ONLY_SECRET"

	// AdvancedAPIKeyCreateTypeSHORTRENTAL captures enum value "SHORT_RENTAL"
	AdvancedAPIKeyCreateTypeSHORTRENTAL string = "SHORT_RENTAL"

	// AdvancedAPIKeyCreateTypeHEALTHCARE captures enum value "HEALTHCARE"
	AdvancedAPIKeyCreateTypeHEALTHCARE string = "HEALTHCARE"

	// AdvancedAPIKeyCreateTypeSMARTHOME captures enum value "SMART_HOME"
	AdvancedAPIKeyCreateTypeSMARTHOME string = "SMART_HOME"

	// AdvancedAPIKeyCreateTypeOTHER captures enum value "OTHER"
	AdvancedAPIKeyCreateTypeOTHER string = "OTHER"
)

// prop value enum
func (m *AdvancedAPIKeyCreate) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedApiKeyCreateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedAPIKeyCreate) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedAPIKeyCreate) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

var advancedApiKeyCreateWebhookFeaturesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEVICE_STATUS","DEVICE_MASTERDATA","DEVICE_CONFIG","DEVICE_LOGS","DEVICE_AUTHS","ACCOUNT_USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedApiKeyCreateWebhookFeaturesItemsEnum = append(advancedApiKeyCreateWebhookFeaturesItemsEnum, v)
	}
}

func (m *AdvancedAPIKeyCreate) validateWebhookFeaturesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedApiKeyCreateWebhookFeaturesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedAPIKeyCreate) validateWebhookFeatures(formats strfmt.Registry) error {

	if err := validate.Required("webhookFeatures", "body", m.WebhookFeatures); err != nil {
		return err
	}

	if err := validate.UniqueItems("webhookFeatures", "body", m.WebhookFeatures); err != nil {
		return err
	}

	for i := 0; i < len(m.WebhookFeatures); i++ {

		// value enum
		if err := m.validateWebhookFeaturesItemsEnum("webhookFeatures"+"."+strconv.Itoa(i), "body", m.WebhookFeatures[i]); err != nil {
			return err
		}

	}

	return nil
}

var advancedApiKeyCreateTypeWebhookStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","DEACTIVATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedApiKeyCreateTypeWebhookStatusPropEnum = append(advancedApiKeyCreateTypeWebhookStatusPropEnum, v)
	}
}

const (

	// AdvancedAPIKeyCreateWebhookStatusACTIVE captures enum value "ACTIVE"
	AdvancedAPIKeyCreateWebhookStatusACTIVE string = "ACTIVE"

	// AdvancedAPIKeyCreateWebhookStatusDEACTIVATED captures enum value "DEACTIVATED"
	AdvancedAPIKeyCreateWebhookStatusDEACTIVATED string = "DEACTIVATED"
)

// prop value enum
func (m *AdvancedAPIKeyCreate) validateWebhookStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedApiKeyCreateTypeWebhookStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedAPIKeyCreate) validateWebhookStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.WebhookStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateWebhookStatusEnum("webhookStatus", "body", m.WebhookStatus); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedAPIKeyCreate) validateWebhookURL(formats strfmt.Registry) error {

	if err := validate.Required("webhookUrl", "body", m.WebhookURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this advanced Api key create based on the context it is used
func (m *AdvancedAPIKeyCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWebhookStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedAPIKeyCreate) contextValidateWebhookStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "webhookStatus", "body", string(m.WebhookStatus)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedAPIKeyCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedAPIKeyCreate) UnmarshalBinary(b []byte) error {
	var res AdvancedAPIKeyCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
