// Code generated by go-swagger; DO NOT EDIT.

package smartlock_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSmartlockLogsResourceGetGetParams creates a new SmartlockLogsResourceGetGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSmartlockLogsResourceGetGetParams() *SmartlockLogsResourceGetGetParams {
	return &SmartlockLogsResourceGetGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSmartlockLogsResourceGetGetParamsWithTimeout creates a new SmartlockLogsResourceGetGetParams object
// with the ability to set a timeout on a request.
func NewSmartlockLogsResourceGetGetParamsWithTimeout(timeout time.Duration) *SmartlockLogsResourceGetGetParams {
	return &SmartlockLogsResourceGetGetParams{
		timeout: timeout,
	}
}

// NewSmartlockLogsResourceGetGetParamsWithContext creates a new SmartlockLogsResourceGetGetParams object
// with the ability to set a context for a request.
func NewSmartlockLogsResourceGetGetParamsWithContext(ctx context.Context) *SmartlockLogsResourceGetGetParams {
	return &SmartlockLogsResourceGetGetParams{
		Context: ctx,
	}
}

// NewSmartlockLogsResourceGetGetParamsWithHTTPClient creates a new SmartlockLogsResourceGetGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSmartlockLogsResourceGetGetParamsWithHTTPClient(client *http.Client) *SmartlockLogsResourceGetGetParams {
	return &SmartlockLogsResourceGetGetParams{
		HTTPClient: client,
	}
}

/*
SmartlockLogsResourceGetGetParams contains all the parameters to send to the API endpoint

	for the smartlock logs resource get get operation.

	Typically these are written to a http.Request.
*/
type SmartlockLogsResourceGetGetParams struct {

	/* AccountUserID.

	   Filter for account users
	*/
	AccountUserID *int64

	/* Action.

	   Filter for action
	*/
	Action *int64

	/* AuthID.

	   Filter for auths
	*/
	AuthID *string

	/* FromDate.

	   Filter for date (RFC3339)
	*/
	FromDate *string

	/* ID.

	   Filter for older logs
	*/
	ID *string

	/* Limit.

	   Amount of logs (max: 50)

	   Default: 20
	*/
	Limit *int64

	/* SmartlockID.

	   The smartlock id
	*/
	SmartlockID int64

	/* ToDate.

	   Filter for date (RFC3339)
	*/
	ToDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the smartlock logs resource get get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SmartlockLogsResourceGetGetParams) WithDefaults() *SmartlockLogsResourceGetGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the smartlock logs resource get get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SmartlockLogsResourceGetGetParams) SetDefaults() {
	var (
		limitDefault = int64(20)
	)

	val := SmartlockLogsResourceGetGetParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithTimeout(timeout time.Duration) *SmartlockLogsResourceGetGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithContext(ctx context.Context) *SmartlockLogsResourceGetGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithHTTPClient(client *http.Client) *SmartlockLogsResourceGetGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountUserID adds the accountUserID to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithAccountUserID(accountUserID *int64) *SmartlockLogsResourceGetGetParams {
	o.SetAccountUserID(accountUserID)
	return o
}

// SetAccountUserID adds the accountUserId to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetAccountUserID(accountUserID *int64) {
	o.AccountUserID = accountUserID
}

// WithAction adds the action to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithAction(action *int64) *SmartlockLogsResourceGetGetParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetAction(action *int64) {
	o.Action = action
}

// WithAuthID adds the authID to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithAuthID(authID *string) *SmartlockLogsResourceGetGetParams {
	o.SetAuthID(authID)
	return o
}

// SetAuthID adds the authId to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetAuthID(authID *string) {
	o.AuthID = authID
}

// WithFromDate adds the fromDate to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithFromDate(fromDate *string) *SmartlockLogsResourceGetGetParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithID adds the id to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithID(id *string) *SmartlockLogsResourceGetGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetID(id *string) {
	o.ID = id
}

// WithLimit adds the limit to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithLimit(limit *int64) *SmartlockLogsResourceGetGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSmartlockID adds the smartlockID to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithSmartlockID(smartlockID int64) *SmartlockLogsResourceGetGetParams {
	o.SetSmartlockID(smartlockID)
	return o
}

// SetSmartlockID adds the smartlockId to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetSmartlockID(smartlockID int64) {
	o.SmartlockID = smartlockID
}

// WithToDate adds the toDate to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) WithToDate(toDate *string) *SmartlockLogsResourceGetGetParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the smartlock logs resource get get params
func (o *SmartlockLogsResourceGetGetParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *SmartlockLogsResourceGetGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountUserID != nil {

		// query param accountUserId
		var qrAccountUserID int64

		if o.AccountUserID != nil {
			qrAccountUserID = *o.AccountUserID
		}
		qAccountUserID := swag.FormatInt64(qrAccountUserID)
		if qAccountUserID != "" {

			if err := r.SetQueryParam("accountUserId", qAccountUserID); err != nil {
				return err
			}
		}
	}

	if o.Action != nil {

		// query param action
		var qrAction int64

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := swag.FormatInt64(qrAction)
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.AuthID != nil {

		// query param authId
		var qrAuthID string

		if o.AuthID != nil {
			qrAuthID = *o.AuthID
		}
		qAuthID := qrAuthID
		if qAuthID != "" {

			if err := r.SetQueryParam("authId", qAuthID); err != nil {
				return err
			}
		}
	}

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate string

		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {

			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param smartlockId
	if err := r.SetPathParam("smartlockId", swag.FormatInt64(o.SmartlockID)); err != nil {
		return err
	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate string

		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {

			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
