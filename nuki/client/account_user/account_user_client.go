// Code generated by go-swagger; DO NOT EDIT.

package account_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountUserResourceDeleteDelete(params *AccountUserResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUserResourceDeleteDeleteNoContent, error)

	AccountUserResourceGetGet(params *AccountUserResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUserResourceGetGetOK, error)

	AccountUserResourcePostPost(params *AccountUserResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUserResourcePostPostOK, *AccountUserResourcePostPostNoContent, error)

	AccountUsersResourceGetGet(params *AccountUsersResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUsersResourceGetGetOK, error)

	AccountUsersResourcePutPut(params *AccountUsersResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUsersResourcePutPutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountUserResourceDeleteDelete deletes asynchronous an account user
*/
func (a *Client) AccountUserResourceDeleteDelete(params *AccountUserResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUserResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUserResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountUserResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/account/user/{accountUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUserResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountUserResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountUserResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUserResourceGetGet gets an account user
*/
func (a *Client) AccountUserResourceGetGet(params *AccountUserResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUserResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUserResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountUserResource_get_get",
		Method:             "GET",
		PathPattern:        "/account/user/{accountUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUserResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountUserResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountUserResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUserResourcePostPost updates an account user
*/
func (a *Client) AccountUserResourcePostPost(params *AccountUserResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUserResourcePostPostOK, *AccountUserResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUserResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountUserResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/user/{accountUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUserResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccountUserResourcePostPostOK:
		return value, nil, nil
	case *AccountUserResourcePostPostNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for account_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUsersResourceGetGet gets an list of account users
*/
func (a *Client) AccountUsersResourceGetGet(params *AccountUsersResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUsersResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUsersResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountUsersResource_get_get",
		Method:             "GET",
		PathPattern:        "/account/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUsersResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountUsersResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountUsersResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUsersResourcePutPut creates an account user
*/
func (a *Client) AccountUsersResourcePutPut(params *AccountUsersResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountUsersResourcePutPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUsersResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountUsersResource_put_put",
		Method:             "PUT",
		PathPattern:        "/account/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountUsersResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountUsersResourcePutPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountUsersResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
