// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressReservation address reservation
//
// swagger:model AddressReservation
type AddressReservation struct {

	// The account id
	// Required: true
	AccountID *int32 `json:"accountId"`

	// The address id
	// Required: true
	AddressID *int32 `json:"addressId"`

	// The automation state
	// Required: true
	Automation *int32 `json:"automation"`

	// True if the user has checked in, false if the check in is pending, null if it isn't monitored
	CheckedIn bool `json:"checkedIn,omitempty"`

	// currently issuing auth
	CurrentlyIssuingAuth bool `json:"currentlyIssuingAuth,omitempty"`

	// currently revoking auth
	CurrentlyRevokingAuth bool `json:"currentlyRevokingAuth,omitempty"`

	// The email of the guest
	// Required: true
	Email *string `json:"email"`

	// The end date
	// Required: true
	// Format: date-time
	EndDate *strfmt.DateTime `json:"endDate"`

	// The number of guests
	// Required: true
	Guests *int32 `json:"guests"`

	// The number of guests issued
	// Required: true
	GuestsIssued *int32 `json:"guestsIssued"`

	// has custom access times
	// Required: true
	HasCustomAccessTimes *bool `json:"hasCustomAccessTimes"`

	// The id
	// Required: true
	ID *string `json:"id"`

	// is currently issuing auth
	// Required: true
	IsCurrentlyIssuingAuth *bool `json:"isCurrentlyIssuingAuth"`

	// is currently revoking auth
	// Required: true
	IsCurrentlyRevokingAuth *bool `json:"isCurrentlyRevokingAuth"`

	// True if a keypad authorization was issued
	// Required: true
	KeypadIssued *bool `json:"keypadIssued"`

	// The name of the guest
	// Required: true
	Name *string `json:"name"`

	// The reference (booking code)
	Reference string `json:"reference,omitempty"`

	// The optional service id if the address is from an partner service
	// Enum: [airbnb bookingsync]
	ServiceID string `json:"serviceId,omitempty"`

	// The start date
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// The state
	// Required: true
	// Enum: [canceled accepted]
	State *string `json:"state"`

	// The update date
	// Required: true
	// Format: date-time
	UpdateDate *strfmt.DateTime `json:"updateDate"`
}

// Validate validates this address reservation
func (m *AddressReservation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutomation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestsIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasCustomAccessTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCurrentlyIssuingAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCurrentlyRevokingAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeypadIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressReservation) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateAddressID(formats strfmt.Registry) error {

	if err := validate.Required("addressId", "body", m.AddressID); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateAutomation(formats strfmt.Registry) error {

	if err := validate.Required("automation", "body", m.Automation); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateGuests(formats strfmt.Registry) error {

	if err := validate.Required("guests", "body", m.Guests); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateGuestsIssued(formats strfmt.Registry) error {

	if err := validate.Required("guestsIssued", "body", m.GuestsIssued); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateHasCustomAccessTimes(formats strfmt.Registry) error {

	if err := validate.Required("hasCustomAccessTimes", "body", m.HasCustomAccessTimes); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateIsCurrentlyIssuingAuth(formats strfmt.Registry) error {

	if err := validate.Required("isCurrentlyIssuingAuth", "body", m.IsCurrentlyIssuingAuth); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateIsCurrentlyRevokingAuth(formats strfmt.Registry) error {

	if err := validate.Required("isCurrentlyRevokingAuth", "body", m.IsCurrentlyRevokingAuth); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateKeypadIssued(formats strfmt.Registry) error {

	if err := validate.Required("keypadIssued", "body", m.KeypadIssued); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var addressReservationTypeServiceIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["airbnb","bookingsync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressReservationTypeServiceIDPropEnum = append(addressReservationTypeServiceIDPropEnum, v)
	}
}

const (

	// AddressReservationServiceIDAirbnb captures enum value "airbnb"
	AddressReservationServiceIDAirbnb string = "airbnb"

	// AddressReservationServiceIDBookingsync captures enum value "bookingsync"
	AddressReservationServiceIDBookingsync string = "bookingsync"
)

// prop value enum
func (m *AddressReservation) validateServiceIDEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressReservationTypeServiceIDPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddressReservation) validateServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceID) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceIDEnum("serviceId", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var addressReservationTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["canceled","accepted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressReservationTypeStatePropEnum = append(addressReservationTypeStatePropEnum, v)
	}
}

const (

	// AddressReservationStateCanceled captures enum value "canceled"
	AddressReservationStateCanceled string = "canceled"

	// AddressReservationStateAccepted captures enum value "accepted"
	AddressReservationStateAccepted string = "accepted"
)

// prop value enum
func (m *AddressReservation) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressReservationTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddressReservation) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *AddressReservation) validateUpdateDate(formats strfmt.Registry) error {

	if err := validate.Required("updateDate", "body", m.UpdateDate); err != nil {
		return err
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address reservation based on context it is used
func (m *AddressReservation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddressReservation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressReservation) UnmarshalBinary(b []byte) error {
	var res AddressReservation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
