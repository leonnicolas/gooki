// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountUserCreate account user create
//
// swagger:model AccountUserCreate
type AccountUserCreate struct {

	// The email address
	// Required: true
	Email *string `json:"email"`

	// The language code
	// Enum: [en de es fr it nl cs sk]
	Language string `json:"language,omitempty"`

	// The name
	// Required: true
	Name *string `json:"name"`

	// The optional type - only allowed for caretakers: 0 .. user, 1 .. company
	// Maximum: 1
	// Minimum: 0
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this account user create
func (m *AccountUserCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountUserCreate) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

var accountUserCreateTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en","de","es","fr","it","nl","cs","sk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountUserCreateTypeLanguagePropEnum = append(accountUserCreateTypeLanguagePropEnum, v)
	}
}

const (

	// AccountUserCreateLanguageEn captures enum value "en"
	AccountUserCreateLanguageEn string = "en"

	// AccountUserCreateLanguageDe captures enum value "de"
	AccountUserCreateLanguageDe string = "de"

	// AccountUserCreateLanguageEs captures enum value "es"
	AccountUserCreateLanguageEs string = "es"

	// AccountUserCreateLanguageFr captures enum value "fr"
	AccountUserCreateLanguageFr string = "fr"

	// AccountUserCreateLanguageIt captures enum value "it"
	AccountUserCreateLanguageIt string = "it"

	// AccountUserCreateLanguageNl captures enum value "nl"
	AccountUserCreateLanguageNl string = "nl"

	// AccountUserCreateLanguageCs captures enum value "cs"
	AccountUserCreateLanguageCs string = "cs"

	// AccountUserCreateLanguageSk captures enum value "sk"
	AccountUserCreateLanguageSk string = "sk"
)

// prop value enum
func (m *AccountUserCreate) validateLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountUserCreateTypeLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountUserCreate) validateLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserCreate) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MinimumInt("type", "body", int64(*m.Type), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("type", "body", int64(*m.Type), 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this account user create based on context it is used
func (m *AccountUserCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountUserCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountUserCreate) UnmarshalBinary(b []byte) error {
	var res AccountUserCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
