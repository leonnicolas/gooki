// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountEmailChangeResourcePostPost(params *AccountEmailChangeResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountEmailChangeResourcePostPostNoContent, error)

	AccountEmailVerifyResourcePostPost(params *AccountEmailVerifyResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountEmailVerifyResourcePostPostNoContent, error)

	AccountIntegrationsResourceDeleteDelete(params *AccountIntegrationsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountIntegrationsResourceDeleteDeleteNoContent, error)

	AccountIntegrationsResourceGetGet(params *AccountIntegrationsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountIntegrationsResourceGetGetOK, error)

	AccountOtpResourceDeleteDelete(params *AccountOtpResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountOtpResourceDeleteDeleteNoContent, error)

	AccountOtpResourcePostPost(params *AccountOtpResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountOtpResourcePostPostNoContent, error)

	AccountOtpResourcePutPut(params *AccountOtpResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountOtpResourcePutPutOK, error)

	AccountPasswordResetResourcePostPost(params *AccountPasswordResetResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountPasswordResetResourcePostPostNoContent, error)

	AccountSettingResourceDeleteDelete(params *AccountSettingResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSettingResourceDeleteDeleteNoContent, error)

	AccountSettingResourceGetGet(params *AccountSettingResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSettingResourceGetGetOK, error)

	AccountSettingResourcePutPut(params *AccountSettingResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSettingResourcePutPutOK, error)

	AccountSubResourceDeleteDelete(params *AccountSubResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubResourceDeleteDeleteNoContent, error)

	AccountSubResourceGetGet(params *AccountSubResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubResourceGetGetOK, error)

	AccountSubResourcePostPost(params *AccountSubResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubResourcePostPostNoContent, error)

	AccountSubsResourceGetGet(params *AccountSubsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubsResourceGetGetOK, error)

	AccountSubsResourcePutPut(params *AccountSubsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubsResourcePutPutOK, error)

	AccountsResourceDeleteDelete(params *AccountsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountsResourceDeleteDeleteNoContent, error)

	AccountsResourceGetGet(params *AccountsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountsResourceGetGetOK, error)

	AccountsResourcePostPost(params *AccountsResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountsResourcePostPostNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountEmailChangeResourcePostPost triggers the email change verification email
*/
func (a *Client) AccountEmailChangeResourcePostPost(params *AccountEmailChangeResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountEmailChangeResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountEmailChangeResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountEmailChangeResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/email/change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountEmailChangeResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountEmailChangeResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountEmailChangeResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountEmailVerifyResourcePostPost triggers the email change verification email
*/
func (a *Client) AccountEmailVerifyResourcePostPost(params *AccountEmailVerifyResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountEmailVerifyResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountEmailVerifyResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountEmailVerifyResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/email/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountEmailVerifyResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountEmailVerifyResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountEmailVerifyResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountIntegrationsResourceDeleteDelete deletes an integration
*/
func (a *Client) AccountIntegrationsResourceDeleteDelete(params *AccountIntegrationsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountIntegrationsResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountIntegrationsResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountIntegrationsResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/account/integration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountIntegrationsResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountIntegrationsResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountIntegrationsResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountIntegrationsResourceGetGet gets all integrations for this account
*/
func (a *Client) AccountIntegrationsResourceGetGet(params *AccountIntegrationsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountIntegrationsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountIntegrationsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountIntegrationsResource_get_get",
		Method:             "GET",
		PathPattern:        "/account/integration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountIntegrationsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountIntegrationsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountIntegrationsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountOtpResourceDeleteDelete disables one time password for an account
*/
func (a *Client) AccountOtpResourceDeleteDelete(params *AccountOtpResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountOtpResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountOtpResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountOtpResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/account/otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountOtpResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountOtpResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountOtpResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountOtpResourcePostPost enables one time password for an account
*/
func (a *Client) AccountOtpResourcePostPost(params *AccountOtpResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountOtpResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountOtpResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountOtpResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountOtpResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountOtpResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountOtpResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountOtpResourcePutPut creates an one time password secret
*/
func (a *Client) AccountOtpResourcePutPut(params *AccountOtpResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountOtpResourcePutPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountOtpResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountOtpResource_put_put",
		Method:             "PUT",
		PathPattern:        "/account/otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountOtpResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountOtpResourcePutPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountOtpResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountPasswordResetResourcePostPost resets account password
*/
func (a *Client) AccountPasswordResetResourcePostPost(params *AccountPasswordResetResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountPasswordResetResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountPasswordResetResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountPasswordResetResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountPasswordResetResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountPasswordResetResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountPasswordResetResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSettingResourceDeleteDelete deletes an account setting
*/
func (a *Client) AccountSettingResourceDeleteDelete(params *AccountSettingResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSettingResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSettingResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSettingResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/account/setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSettingResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSettingResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSettingResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSettingResourceGetGet gets account setting
*/
func (a *Client) AccountSettingResourceGetGet(params *AccountSettingResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSettingResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSettingResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSettingResource_get_get",
		Method:             "GET",
		PathPattern:        "/account/setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSettingResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSettingResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSettingResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSettingResourcePutPut creates or update account setting
*/
func (a *Client) AccountSettingResourcePutPut(params *AccountSettingResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSettingResourcePutPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSettingResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSettingResource_put_put",
		Method:             "PUT",
		PathPattern:        "/account/setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSettingResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSettingResourcePutPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSettingResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubResourceDeleteDelete deletes an sub account
*/
func (a *Client) AccountSubResourceDeleteDelete(params *AccountSubResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/account/sub/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubResourceGetGet gets an sub account
*/
func (a *Client) AccountSubResourceGetGet(params *AccountSubResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubResource_get_get",
		Method:             "GET",
		PathPattern:        "/account/sub/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubResourcePostPost updates an sub account
*/
func (a *Client) AccountSubResourcePostPost(params *AccountSubResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/sub/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubsResourceGetGet gets an list of sub accounts
*/
func (a *Client) AccountSubsResourceGetGet(params *AccountSubsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubsResource_get_get",
		Method:             "GET",
		PathPattern:        "/account/sub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubsResourcePutPut creates an sub account
*/
func (a *Client) AccountSubsResourcePutPut(params *AccountSubsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubsResourcePutPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubsResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubsResource_put_put",
		Method:             "PUT",
		PathPattern:        "/account/sub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubsResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubsResourcePutPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubsResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountsResourceDeleteDelete deletes an account
*/
func (a *Client) AccountsResourceDeleteDelete(params *AccountsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountsResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountsResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountsResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountsResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountsResourceGetGet gets an account
*/
func (a *Client) AccountsResourceGetGet(params *AccountsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountsResource_get_get",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountsResourcePostPost updates an account
*/
func (a *Client) AccountsResourcePostPost(params *AccountsResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountsResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountsResource_post_post",
		Method:             "POST",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountsResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountsResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
