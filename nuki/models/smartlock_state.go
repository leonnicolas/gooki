// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockState smartlock state
//
// swagger:model Smartlock.State
type SmartlockState struct {

	// Remaining capacity of a Nuki battery pack in %
	// Maximum: 100
	// Minimum: 0
	BatteryCharge *int32 `json:"batteryCharge,omitempty"`

	// True if a Nuki battery pack in a Smart Lock is currently charging
	BatteryCharging bool `json:"batteryCharging,omitempty"`

	// True if the battery state of the device is critical
	// Required: true
	BatteryCritical *bool `json:"batteryCritical"`

	// The door state: 0 .. unavailable/not paired, 1 .. deactivated, 2 .. door closed, 3 .. door opened, 4 .. door state unknown, 5 .. calibrating, 16 .. uncalibrated, 240 .. removed, 255 .. unknown
	// Required: true
	// Maximum: 255
	// Minimum: 0
	DoorState *int32 `json:"doorState"`

	// True if the battery of a paired doorsensor is critical (only available for supported devices)
	DoorsensorBatteryCritical bool `json:"doorsensorBatteryCritical,omitempty"`

	// True if the battery of a paired Keypad is critical (only available for supported devices)
	KeypadBatteryCritical bool `json:"keypadBatteryCritical,omitempty"`

	// The action: type=0/3/4: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock 'n' go, 5 .. lock 'n' go with unlatch; type=1: 1 .. unlock; type=2: 1 .. activate ring to open, 2 .. deactivate ring to open, 3 .. open (electric strike actuation)
	// Required: true
	// Maximum: 5
	// Minimum: 0
	LastAction *int32 `json:"lastAction"`

	// The smartlock mode: 0 .. uninitialized, 1 .. pairing, 2 .. door (default), 3 .. continuous (type=2 only), 4 .. maintenance
	// Required: true
	// Maximum: 4
	// Minimum: 0
	Mode *int32 `json:"mode"`

	// True if night mode currently active
	// Required: true
	NightMode *bool `json:"nightMode"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// End date of ring to open timeout; null if ring to open is not active (type=2 only)
	// Format: date-time
	RingToOpenEnd strfmt.DateTime `json:"ringToOpenEnd,omitempty"`

	// [deprecated] Remaining ring to open time; 0 if ring to open is not active (type=2 only)
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	RingToOpenTimer *int32 `json:"ringToOpenTimer"`

	// The smartlock state: type=0/3/4: 0 .. uncalibrated, 1 .. locked, 2 .. unlocking, 3 .. unlocked, 4 .. locking, 5 .. unlatched, 6 .. unlocked (lock 'n' go), 7 .. unlatching, 224 .. Error wrong entry code, 225 .. Error wrong Fingerprint, 254 .. motor blocked, 255 .. undefined; type=2: 0 .. untrained, 1 .. online, 3 .. ring to open active, 5 .. open, 7 .. opening, 253 .. boot run, 255 .. undefined
	// Required: true
	// Maximum: 255
	// Minimum: 0
	State *int32 `json:"state"`

	//  The state trigger: 0 .. system, 1 .. manual, 2 .. button, 3 .. automatic, 4 .. web (type=1 only), 5 .. app (type=1 only), 6 .. continuous mode (type=2 only), 7 .. accessory (type=3 only)
	// Required: true
	// Maximum: 6
	// Minimum: 0
	Trigger *int32 `json:"trigger"`
}

// Validate validates this smartlock state
func (m *SmartlockState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatteryCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatteryCritical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoorState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRingToOpenEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRingToOpenTimer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockState) validateBatteryCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.BatteryCharge) { // not required
		return nil
	}

	if err := validate.MinimumInt("batteryCharge", "body", int64(*m.BatteryCharge), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("batteryCharge", "body", int64(*m.BatteryCharge), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateBatteryCritical(formats strfmt.Registry) error {

	if err := validate.Required("batteryCritical", "body", m.BatteryCritical); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateDoorState(formats strfmt.Registry) error {

	if err := validate.Required("doorState", "body", m.DoorState); err != nil {
		return err
	}

	if err := validate.MinimumInt("doorState", "body", int64(*m.DoorState), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("doorState", "body", int64(*m.DoorState), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateLastAction(formats strfmt.Registry) error {

	if err := validate.Required("lastAction", "body", m.LastAction); err != nil {
		return err
	}

	if err := validate.MinimumInt("lastAction", "body", int64(*m.LastAction), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("lastAction", "body", int64(*m.LastAction), 5, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	if err := validate.MinimumInt("mode", "body", int64(*m.Mode), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("mode", "body", int64(*m.Mode), 4, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateNightMode(formats strfmt.Registry) error {

	if err := validate.Required("nightMode", "body", m.NightMode); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateRingToOpenEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.RingToOpenEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("ringToOpenEnd", "body", "date-time", m.RingToOpenEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateRingToOpenTimer(formats strfmt.Registry) error {

	if err := validate.Required("ringToOpenTimer", "body", m.RingToOpenTimer); err != nil {
		return err
	}

	if err := validate.MinimumInt("ringToOpenTimer", "body", int64(*m.RingToOpenTimer), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ringToOpenTimer", "body", int64(*m.RingToOpenTimer), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.MinimumInt("state", "body", int64(*m.State), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("state", "body", int64(*m.State), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockState) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("trigger", "body", m.Trigger); err != nil {
		return err
	}

	if err := validate.MinimumInt("trigger", "body", int64(*m.Trigger), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("trigger", "body", int64(*m.Trigger), 6, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this smartlock state based on the context it is used
func (m *SmartlockState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockState) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockState) UnmarshalBinary(b []byte) error {
	var res SmartlockState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
