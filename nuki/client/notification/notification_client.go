// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NotificationResourceDeleteDelete(params *NotificationResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationResourceDeleteDeleteNoContent, error)

	NotificationResourceGetGet(params *NotificationResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationResourceGetGetOK, error)

	NotificationResourcePostPost(params *NotificationResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationResourcePostPostOK, error)

	NotificationsResourceGetGet(params *NotificationsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsResourceGetGetOK, error)

	NotificationsResourcePutPut(params *NotificationsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsResourcePutPutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
NotificationResourceDeleteDelete deletes a notification configuration
*/
func (a *Client) NotificationResourceDeleteDelete(params *NotificationResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NotificationResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/notification/{notificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotificationResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NotificationResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotificationResourceGetGet gets a notification configuration
*/
func (a *Client) NotificationResourceGetGet(params *NotificationResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NotificationResource_get_get",
		Method:             "GET",
		PathPattern:        "/notification/{notificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotificationResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NotificationResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotificationResourcePostPost updates a notification configuration
*/
func (a *Client) NotificationResourcePostPost(params *NotificationResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationResourcePostPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NotificationResource_post_post",
		Method:             "POST",
		PathPattern:        "/notification/{notificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotificationResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationResourcePostPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NotificationResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotificationsResourceGetGet gets all notifications attached to your account
*/
func (a *Client) NotificationsResourceGetGet(params *NotificationsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NotificationsResource_get_get",
		Method:             "GET",
		PathPattern:        "/notification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotificationsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NotificationsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotificationsResourcePutPut creates a notification configuration
*/
func (a *Client) NotificationsResourcePutPut(params *NotificationsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsResourcePutPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NotificationsResource_put_put",
		Method:             "PUT",
		PathPattern:        "/notification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotificationsResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsResourcePutPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NotificationsResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
