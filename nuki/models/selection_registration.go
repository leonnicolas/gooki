// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SelectionRegistration selection registration
//
// swagger:model SelectionRegistration
type SelectionRegistration struct {

	// canceling
	Canceling bool `json:"canceling,omitempty"`

	// connectable
	Connectable bool `json:"connectable,omitempty"`

	// interest operations
	InterestOperations int32 `json:"interestOperations,omitempty"`

	// interest ready
	InterestReady bool `json:"interestReady,omitempty"`

	// readable
	Readable bool `json:"readable,omitempty"`

	// ready operations
	ReadyOperations int32 `json:"readyOperations,omitempty"`

	// selectable channel
	SelectableChannel *SelectableChannel `json:"selectableChannel,omitempty"`

	// selection listener
	SelectionListener SelectionListener `json:"selectionListener,omitempty"`

	// wakeup listener
	WakeupListener WakeupListener `json:"wakeupListener,omitempty"`

	// writable
	Writable bool `json:"writable,omitempty"`
}

// Validate validates this selection registration
func (m *SelectionRegistration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelectableChannel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectionRegistration) validateSelectableChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectableChannel) { // not required
		return nil
	}

	if m.SelectableChannel != nil {
		if err := m.SelectableChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectableChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectableChannel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this selection registration based on the context it is used
func (m *SelectionRegistration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelectableChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectionRegistration) contextValidateSelectableChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.SelectableChannel != nil {

		if swag.IsZero(m.SelectableChannel) { // not required
			return nil
		}

		if err := m.SelectableChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectableChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectableChannel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SelectionRegistration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelectionRegistration) UnmarshalBinary(b []byte) error {
	var res SelectionRegistration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
