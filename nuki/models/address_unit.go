// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressUnit address unit
//
// swagger:model AddressUnit
type AddressUnit struct {

	// The address id
	// Read Only: true
	AddressID int32 `json:"addressId,omitempty"`

	// The address token id
	// Read Only: true
	AddressTokenID string `json:"addressTokenId,omitempty"`

	// The id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the address unit
	// Required: true
	Name *string `json:"name"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`
}

// Validate validates this address unit
func (m *AddressUnit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressUnit) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this address unit based on the context it is used
func (m *AddressUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddressTokenID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressUnit) contextValidateAddressID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "addressId", "body", int32(m.AddressID)); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnit) contextValidateAddressTokenID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "addressTokenId", "body", string(m.AddressTokenID)); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnit) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnit) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressUnit) UnmarshalBinary(b []byte) error {
	var res AddressUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
