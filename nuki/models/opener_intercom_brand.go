// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenerIntercomBrand opener intercom brand
//
// swagger:model OpenerIntercomBrand
type OpenerIntercomBrand struct {

	// The brand name
	// Required: true
	Brand *string `json:"brand"`

	// The brand ID
	// Required: true
	BrandID *int32 `json:"brandId"`
}

// Validate validates this opener intercom brand
func (m *OpenerIntercomBrand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrandID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenerIntercomBrand) validateBrand(formats strfmt.Registry) error {

	if err := validate.Required("brand", "body", m.Brand); err != nil {
		return err
	}

	return nil
}

func (m *OpenerIntercomBrand) validateBrandID(formats strfmt.Registry) error {

	if err := validate.Required("brandId", "body", m.BrandID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this opener intercom brand based on context it is used
func (m *OpenerIntercomBrand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenerIntercomBrand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenerIntercomBrand) UnmarshalBinary(b []byte) error {
	var res OpenerIntercomBrand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
