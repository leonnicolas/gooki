{
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "accountId",
        "creationDate",
        "email",
        "name",
        "type",
        "updateDate"
      ],
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type: 0 .. user, 1 .. company, 2 .. caretaker",
          "minimum": 0,
          "maximum": 2
        },
        "email": {
          "type": "string",
          "description": "The email address"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "true, if the email is verified"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "masterAccountId": {
          "type": "integer",
          "format": "int32",
          "description": "The master account id if it's a sub account"
        },
        "rights": {
          "type": "integer",
          "format": "int32",
          "description": "The rights bitmask if it's a sub account: 1 .. manage smartlock, 2 .. operate smartlock, 4 .. manage smartlock config, 8 .. manage smartlock authorizations, 16 .. view smartlock logs, 32 .. manage sub accounts, 64 .. create smartlocks",
          "minimum": 0,
          "maximum": 127
        },
        "language": {
          "type": "string",
          "example": "de",
          "description": "The language code"
        },
        "config": {
          "description": "The optional config",
          "$ref": "#/definitions/Account.Config"
        },
        "profile": {
          "description": "The optional profile",
          "$ref": "#/definitions/Account.Profile"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        },
        "descent": {
          "description": "Set, if your account is not a standard Nuki Web account",
          "readOnly": true,
          "$ref": "#/definitions/Account.Descent"
        },
        "shsSubscriptionType": {
          "type": "string",
          "description": "subscription type of the account (b2b)",
          "enum": [
            "BUSINESS",
            "STANDARD",
            "BUSINESS_PLUS",
            "API_ONLY"
          ]
        },
        "b2bActive": {
          "type": "boolean"
        },
        "apiTermsOfUse": {
          "$ref": "#/definitions/TermsOfUse"
        }
      }
    },
    "Account.Config": {
      "type": "object",
      "required": [
        "alexaPin",
        "gactionsHomePin"
      ],
      "properties": {
        "alexaPin": {
          "type": "string",
          "description": "The alexa pin - used by alexa for unlock actions"
        },
        "gactionsHomePin": {
          "type": "string",
          "description": "The google smart home pin - used for unlock actions"
        },
        "otpEnabledDate": {
          "type": "string",
          "format": "date-time",
          "description": "The opt enabled date"
        }
      }
    },
    "Account.Descent": {
      "type": "object",
      "required": [
        "origin"
      ],
      "properties": {
        "origin": {
          "type": "string",
          "description": "The account origin source",
          "readOnly": true,
          "enum": [
            "GOOGLE",
            "APPLE"
          ]
        }
      }
    },
    "Account.Profile": {
      "type": "object",
      "required": [
        "address",
        "city",
        "country",
        "firstName",
        "lastName",
        "zip"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "description": "The first name"
        },
        "lastName": {
          "type": "string",
          "description": "The last name"
        },
        "address": {
          "type": "string",
          "description": "The address"
        },
        "zip": {
          "type": "string",
          "description": "The postal code"
        },
        "city": {
          "type": "string",
          "description": "The city"
        },
        "country": {
          "type": "string",
          "description": "The 2-letter country code"
        }
      }
    },
    "AccountEmailChange": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "The new email for the account"
        }
      }
    },
    "AccountIntegration": {
      "type": "object",
      "required": [
        "clientId",
        "name",
        "vendorKey",
        "version"
      ],
      "properties": {
        "version": {
          "type": "string",
          "description": "If the integration/device is an legacy or from the new oauth implementation",
          "enum": [
            "LEGACY",
            "HYDRA"
          ]
        },
        "vendorKey": {
          "type": "string",
          "description": "Enum key identifying the integration/device, values are e.g. ALEXA, IOS, NUKI_WEB, API_TOKEN etc"
        },
        "subAccountName": {
          "type": "string",
          "description": "Name of the sub-account or null if there is none, which is associated with this token"
        },
        "subAccountId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the sub-account or null if there is none, which is associated with this token"
        },
        "subAccount": {
          "type": "boolean",
          "description": "True if the integration is done via a sub-account"
        },
        "name": {
          "type": "string",
          "description": "Name of the token"
        },
        "description": {
          "type": "string",
          "description": "Description given by the user, usually only set for api tokens"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "First creation date of the token"
        },
        "lastActiveAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last refresh date of the token"
        },
        "scopes": {
          "type": "array",
          "description": "The scopes which have been granted to the token",
          "items": {
            "type": "string"
          }
        },
        "warning": {
          "type": "boolean",
          "description": "If this is from a legacy integration this is set to true"
        },
        "tokenId": {
          "type": "string",
          "description": "The tokenId if this a manual generated api token"
        },
        "advancedType": {
          "type": "string",
          "description": "The enum advanced type (HEALTHCARE e.g.) if this integration is a advanced one"
        },
        "advancedState": {
          "type": "string",
          "description": "The enum advanced state (TESTING e.g.) if this integration is a advanced one"
        },
        "clientId": {
          "type": "string",
          "description": "The clientId of this integration/device used for deleting the integration"
        },
        "sortOrder": {
          "type": "integer",
          "format": "int32",
          "description": "Sort order by which the entry should be sorted, is being set by the vendor key enum"
        },
        "device": {
          "type": "boolean",
          "description": "True this is a device and false this is an integration"
        }
      }
    },
    "AccountOtpEnable": {
      "type": "object",
      "required": [
        "otp"
      ],
      "properties": {
        "otp": {
          "type": "string",
          "description": "The one time password (otp)"
        }
      }
    },
    "AccountPasswordReset": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "deleteApiTokens": {
          "type": "boolean"
        }
      }
    },
    "AccountSetting": {
      "type": "object",
      "properties": {
        "web": {
          "description": "The account settings for Nuki Web",
          "$ref": "#/definitions/AccountSetting.Web"
        }
      }
    },
    "AccountSetting.Web": {
      "type": "object",
      "properties": {
        "deviceViewType": {
          "type": "string",
          "description": "The initial view type of the device page",
          "enum": [
            "LIST",
            "TILE"
          ]
        },
        "deviceSortType": {
          "type": "string",
          "description": "The initial sort type of the device page",
          "enum": [
            "FAVOURITES_FIRST",
            "NAME_ASC",
            "NAME_DESC",
            "LAST_ADDED_DESC"
          ]
        },
        "nukiClubDismissed": {
          "type": "boolean",
          "description": "If true, Nuki Club info is dismissed and no banner is shown"
        },
        "removedStaledDevices": {
          "type": "array",
          "description": "List of removed staled devices",
          "items": {
            "$ref": "#/definitions/StaleDevice"
          }
        },
        "markedStaledDevices": {
          "type": "array",
          "description": "List of marked staled devices",
          "items": {
            "$ref": "#/definitions/StaleDevice"
          }
        }
      }
    },
    "AccountSubCreate": {
      "type": "object",
      "required": [
        "email",
        "language",
        "name",
        "password",
        "rights"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "test@test.at",
          "description": "The email address"
        },
        "password": {
          "type": "string",
          "description": "The password (must be at least 7 chars long)"
        },
        "name": {
          "type": "string",
          "description": "The name of the sub account"
        },
        "rights": {
          "type": "integer",
          "format": "int32",
          "description": "The right bitmask of the sub account: 1 .. operate smartlock, 2 .. change smartlock config, 4 .. manage smartlock users, 8 .. view smartlock logs, 16 .. manage sub accounts",
          "minimum": 0,
          "maximum": 31
        },
        "language": {
          "type": "string",
          "example": "de",
          "description": "The language code"
        },
        "profile": {
          "description": "The optional profile",
          "$ref": "#/definitions/Account.Profile"
        }
      }
    },
    "AccountSubUpdate": {
      "type": "object",
      "required": [
        "language"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "test@test.at",
          "description": "The new email address"
        },
        "password": {
          "type": "string",
          "description": "The new password (must be at least 7 chars long)"
        },
        "name": {
          "type": "string",
          "description": "The new name of the sub account"
        },
        "rights": {
          "type": "integer",
          "format": "int32",
          "description": "The new right bitmask of the sub account: 1 .. operate smartlock, 2 .. change smartlock config, 4 .. manage smartlock users, 8 .. view smartlock logs, 16 .. manage sub accounts, 32 .. manage sub accounts, 64 .. create smartlocks",
          "minimum": 0,
          "maximum": 127
        },
        "language": {
          "type": "string",
          "example": "de",
          "description": "The language code"
        },
        "config": {
          "description": "The optional config",
          "$ref": "#/definitions/Account.Config"
        },
        "profile": {
          "description": "The optional profile",
          "$ref": "#/definitions/Account.Profile"
        }
      }
    },
    "AccountSubscription": {
      "type": "object",
      "required": [
        "accountId",
        "id",
        "paymentType",
        "period",
        "quantity",
        "status",
        "subscriptionId"
      ],
      "properties": {
        "id": {
          "description": "The id",
          "$ref": "#/definitions/ObjectId"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "subscriptionId": {
          "type": "integer",
          "format": "int32",
          "description": "The subscription id"
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "The actual period"
        },
        "paymentType": {
          "type": "string",
          "description": "The payment type",
          "enum": [
            "free",
            "paypal",
            "card",
            "account"
          ]
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The quantity of authorizations"
        },
        "giftArticle": {
          "type": "string",
          "description": "The optional gift article after first purchase"
        },
        "status": {
          "type": "string",
          "description": "The status",
          "enum": [
            "active",
            "deactivated",
            "finished"
          ]
        },
        "startDate": {
          "type": "integer",
          "format": "int64",
          "description": "The start date"
        },
        "periodEndDate": {
          "type": "integer",
          "format": "int64",
          "description": "The period end date"
        },
        "nextPaymentDate": {
          "type": "integer",
          "format": "int64",
          "description": "The next payment date"
        }
      }
    },
    "AccountUpdate": {
      "type": "object",
      "required": [
        "language"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "test@test.at",
          "description": "The new email address"
        },
        "password": {
          "type": "string",
          "description": "The password (must be at least 7 chars long)"
        },
        "name": {
          "type": "string",
          "description": "The name of the account"
        },
        "language": {
          "type": "string",
          "example": "de",
          "description": "The language code"
        },
        "config": {
          "description": "The optional config",
          "$ref": "#/definitions/Account.Config"
        },
        "profile": {
          "description": "The optional profile",
          "$ref": "#/definitions/Account.Profile"
        }
      }
    },
    "AccountUser": {
      "type": "object",
      "required": [
        "accountId",
        "accountUserId",
        "creationDate",
        "email",
        "name",
        "updateDate"
      ],
      "properties": {
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The account user id"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The optional type: 0 .. user, 1 .. company",
          "minimum": 0,
          "maximum": 1
        },
        "email": {
          "type": "string",
          "description": "The email address"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "language": {
          "type": "string",
          "example": "de",
          "description": "The language code"
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        }
      }
    },
    "AccountUserCreate": {
      "type": "object",
      "required": [
        "email",
        "name"
      ],
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The optional type - only allowed for caretakers: 0 .. user, 1 .. company",
          "minimum": 0,
          "maximum": 1
        },
        "email": {
          "type": "string",
          "description": "The email address"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "language": {
          "type": "string",
          "description": "The language code",
          "enum": [
            "en",
            "de",
            "es",
            "fr",
            "it",
            "nl",
            "cs",
            "sk"
          ]
        }
      }
    },
    "AccountUserUpdate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "test@test.at",
          "description": "The new email address"
        },
        "name": {
          "type": "string",
          "description": "The new name of the sub account"
        },
        "language": {
          "type": "string",
          "description": "The new language code",
          "enum": [
            "en",
            "de",
            "es",
            "fr",
            "it",
            "nl",
            "cs",
            "sk"
          ]
        }
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "accountId",
        "addressId",
        "creationDate",
        "name",
        "smartlockIds",
        "updateDate"
      ],
      "properties": {
        "addressId": {
          "type": "integer",
          "format": "int32",
          "description": "The address id"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "name": {
          "type": "string",
          "description": "The name of the address"
        },
        "smartlockIds": {
          "type": "array",
          "description": "The smartlocks for this address",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "serviceId": {
          "type": "string",
          "description": "The optional service id if the address is from an partner service",
          "enum": [
            "airbnb",
            "bookingsync"
          ]
        },
        "timeZone": {
          "type": "string",
          "description": "The timezone"
        },
        "checkInTime": {
          "type": "integer",
          "format": "int32",
          "description": "The optional check in time (minutes of the day)"
        },
        "checkOutTime": {
          "type": "integer",
          "format": "int32",
          "description": "The optional check out time (minutes of the day)"
        },
        "settings": {
          "type": "object",
          "description": "The optional settings object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        }
      }
    },
    "AddressCreate": {
      "type": "object",
      "required": [
        "name",
        "smartlockIds"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the address"
        },
        "smartlockIds": {
          "type": "array",
          "description": "The smartlocks for this address",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "AddressReservation": {
      "type": "object",
      "required": [
        "accountId",
        "addressId",
        "automation",
        "email",
        "endDate",
        "guests",
        "guestsIssued",
        "hasCustomAccessTimes",
        "id",
        "isCurrentlyIssuingAuth",
        "isCurrentlyRevokingAuth",
        "keypadIssued",
        "name",
        "startDate",
        "state",
        "updateDate"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id"
        },
        "addressId": {
          "type": "integer",
          "format": "int32",
          "description": "The address id"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "email": {
          "type": "string",
          "description": "The email of the guest"
        },
        "name": {
          "type": "string",
          "description": "The name of the guest"
        },
        "guests": {
          "type": "integer",
          "format": "int32",
          "description": "The number of guests"
        },
        "guestsIssued": {
          "type": "integer",
          "format": "int32",
          "description": "The number of guests issued"
        },
        "keypadIssued": {
          "type": "boolean",
          "description": "True if a keypad authorization was issued"
        },
        "state": {
          "type": "string",
          "description": "The state",
          "enum": [
            "canceled",
            "accepted"
          ]
        },
        "serviceId": {
          "type": "string",
          "description": "The optional service id if the address is from an partner service",
          "enum": [
            "airbnb",
            "bookingsync"
          ]
        },
        "reference": {
          "type": "string",
          "description": "The reference (booking code)"
        },
        "automation": {
          "type": "integer",
          "format": "int32",
          "description": "The automation state"
        },
        "checkedIn": {
          "type": "boolean",
          "description": "True if the user has checked in, false if the check in is pending, null if it isn't monitored"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        },
        "isCurrentlyIssuingAuth": {
          "type": "boolean"
        },
        "isCurrentlyRevokingAuth": {
          "type": "boolean"
        },
        "hasCustomAccessTimes": {
          "type": "boolean"
        },
        "currentlyIssuingAuth": {
          "type": "boolean"
        },
        "currentlyRevokingAuth": {
          "type": "boolean"
        }
      }
    },
    "AddressToken": {
      "type": "object",
      "required": [
        "addressId",
        "creationDate",
        "id",
        "redeemAccountId",
        "redeemDate"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id"
        },
        "addressId": {
          "type": "integer",
          "format": "int32",
          "description": "The address id"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "redeemDate": {
          "type": "string",
          "format": "date-time",
          "description": "The redeem date"
        },
        "redeemAccountId": {
          "type": "integer",
          "format": "int32",
          "description": "The redeem account id"
        },
        "inviteKeys": {
          "type": "array",
          "description": "The list of invite keys",
          "items": {
            "type": "string"
          }
        },
        "redeemResult": {
          "type": "string",
          "description": "The redeem result",
          "enum": [
            "ok",
            "failed"
          ]
        }
      }
    },
    "AddressTokenInfo": {
      "type": "object",
      "required": [
        "addressName",
        "id",
        "smartlockNames"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id"
        },
        "addressName": {
          "type": "string",
          "description": "The address name"
        },
        "smartlockNames": {
          "type": "array",
          "description": "The associated smartlock names",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddressUnit": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the address unit"
        },
        "addressId": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "readOnly": true
        },
        "addressTokenId": {
          "type": "string",
          "description": "The address token id",
          "readOnly": true
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        }
      }
    },
    "AddressUnitResponse": {
      "type": "object",
      "required": [
        "creationDate",
        "name",
        "redeemDate"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the address unit"
        },
        "addressId": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "readOnly": true
        },
        "addressTokenId": {
          "type": "string",
          "description": "The address token id",
          "readOnly": true
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "redeemDate": {
          "type": "string",
          "format": "date-time",
          "description": "The redeem date"
        },
        "redeemResult": {
          "type": "string",
          "description": "The redeem result",
          "enum": [
            "ok",
            "failed"
          ]
        }
      }
    },
    "AddressUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the address"
        },
        "smartlockIds": {
          "type": "array",
          "description": "The smartlocks for this address",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "settings": {
          "type": "object",
          "description": "The optional settings",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AdvancedApiKey": {
      "type": "object",
      "required": [
        "country",
        "creationDate",
        "description",
        "email",
        "name",
        "restricted",
        "secret",
        "status",
        "type",
        "updateDate",
        "url",
        "webhookFeatures",
        "webhookUrl"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the company for which you apply for access"
        },
        "country": {
          "type": "string",
          "description": "The country of the headquarter or the country where you are mainly doing business in"
        },
        "description": {
          "type": "string",
          "description": "Describe the services and/or products you offer to your customers and how your customers would use Nuki devices in their processes"
        },
        "type": {
          "type": "string",
          "description": "The application type",
          "enum": [
            "ONLY_SECRET",
            "SHORT_RENTAL",
            "HEALTHCARE",
            "SMART_HOME",
            "OTHER"
          ]
        },
        "webhookStatus": {
          "type": "string",
          "description": "The status of the webhook posting automation",
          "readOnly": true,
          "enum": [
            "ACTIVE",
            "DEACTIVATED"
          ]
        },
        "url": {
          "type": "string",
          "description": "A website where we can find more information on the company and its business model"
        },
        "email": {
          "type": "string",
          "description": "An email address where we can contact you for checks on your application"
        },
        "webhookUrl": {
          "type": "string",
          "description": "The URL where our webhooks should point to"
        },
        "webhookFeatures": {
          "type": "array",
          "description": "The features to trigger webhooks, for all types except 'ONLY_SECRET'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DEVICE_STATUS",
              "DEVICE_MASTERDATA",
              "DEVICE_CONFIG",
              "DEVICE_LOGS",
              "DEVICE_AUTHS",
              "ACCOUNT_USER"
            ]
          }
        },
        "restricted": {
          "type": "boolean",
          "description": "Whether the advanced API key is restricted"
        },
        "secret": {
          "type": "string",
          "description": "The client secret, visible if application is approved (status >= 'TESTING')"
        },
        "status": {
          "type": "string",
          "description": "The application status",
          "enum": [
            "INACTIVE",
            "APPLIED",
            "TESTING",
            "ACTIVE"
          ]
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        }
      }
    },
    "AdvancedApiKeyCreate": {
      "type": "object",
      "required": [
        "country",
        "description",
        "email",
        "name",
        "restricted",
        "type",
        "url",
        "webhookFeatures",
        "webhookUrl"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the company for which you apply for access"
        },
        "country": {
          "type": "string",
          "description": "The country of the headquarter or the country where you are mainly doing business in"
        },
        "description": {
          "type": "string",
          "description": "Describe the services and/or products you offer to your customers and how your customers would use Nuki devices in their processes"
        },
        "type": {
          "type": "string",
          "description": "The application type",
          "enum": [
            "ONLY_SECRET",
            "SHORT_RENTAL",
            "HEALTHCARE",
            "SMART_HOME",
            "OTHER"
          ]
        },
        "webhookStatus": {
          "type": "string",
          "description": "The status of the webhook posting automation",
          "readOnly": true,
          "enum": [
            "ACTIVE",
            "DEACTIVATED"
          ]
        },
        "url": {
          "type": "string",
          "description": "A website where we can find more information on the company and its business model"
        },
        "email": {
          "type": "string",
          "description": "An email address where we can contact you for checks on your application"
        },
        "webhookUrl": {
          "type": "string",
          "description": "The URL where our webhooks should point to"
        },
        "webhookFeatures": {
          "type": "array",
          "description": "The features to trigger webhooks, for all types except 'ONLY_SECRET'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DEVICE_STATUS",
              "DEVICE_MASTERDATA",
              "DEVICE_CONFIG",
              "DEVICE_LOGS",
              "DEVICE_AUTHS",
              "ACCOUNT_USER"
            ]
          }
        },
        "restricted": {
          "type": "boolean",
          "description": "Whether the advanced API key is restricted"
        }
      }
    },
    "AdvancedApiKeyUpdate": {
      "type": "object",
      "required": [
        "webhookFeatures",
        "webhookUrl"
      ],
      "properties": {
        "webhookUrl": {
          "type": "string",
          "description": "The URL where our webhooks should point to"
        },
        "webhookFeatures": {
          "type": "array",
          "description": "The features to trigger webhooks, for all types except 'ONLY_SECRET'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DEVICE_STATUS",
              "DEVICE_MASTERDATA",
              "DEVICE_CONFIG",
              "DEVICE_LOGS",
              "DEVICE_AUTHS",
              "ACCOUNT_USER"
            ]
          }
        }
      }
    },
    "AdvancedConfirmationResponse": {
      "type": "object",
      "required": [
        "requestId"
      ],
      "properties": {
        "requestId": {
          "type": "string",
          "description": "A UUID to identify the upcoming asynchronously web hook response"
        },
        "error": {
          "type": "string",
          "description": "Contains error message and smartlock IDs, if auths can not be created because they need subscription."
        }
      }
    },
    "ApiKey": {
      "type": "object",
      "required": [
        "accountId",
        "apiKeyId",
        "creationDate"
      ],
      "properties": {
        "apiKeyId": {
          "type": "integer",
          "format": "int32",
          "description": "The id"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "description": {
          "type": "string",
          "description": "The description"
        },
        "redirectUris": {
          "type": "array",
          "description": "The redirect uris",
          "items": {
            "type": "string"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "apiKey": {
          "type": "string",
          "description": "The api key"
        }
      }
    },
    "ApiKey.Advanced": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ONLY_SECRET",
            "SHORT_RENTAL",
            "HEALTHCARE",
            "SMART_HOME",
            "OTHER"
          ]
        },
        "url": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "webhookFeatures": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DEVICE_STATUS",
              "DEVICE_MASTERDATA",
              "DEVICE_CONFIG",
              "DEVICE_LOGS",
              "DEVICE_AUTHS",
              "ACCOUNT_USER"
            ]
          }
        },
        "webhookUrl": {
          "type": "string"
        },
        "webhookSentSuccessfully": {
          "type": "integer",
          "format": "int32"
        },
        "webhookSentErroneous": {
          "type": "integer",
          "format": "int32"
        },
        "lastSuccessfulPost": {
          "type": "string",
          "format": "date-time"
        },
        "lastPostDuration": {
          "type": "integer",
          "format": "int64"
        },
        "lastPostSuccesful": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "INACTIVE",
            "APPLIED",
            "TESTING",
            "ACTIVE"
          ]
        },
        "webhookStatus": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "DEACTIVATED"
          ]
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time"
        },
        "restricted": {
          "type": "boolean"
        }
      }
    },
    "ApiKeyCreate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description"
        },
        "redirectUris": {
          "type": "array",
          "description": "The list of redirect uris",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiKeyService": {
      "type": "object",
      "properties": {
        "byActiveWebhook": {
          "$ref": "#/definitions/CompletableFutureListApiKey"
        }
      }
    },
    "ApiKeyToken": {
      "type": "object",
      "required": [
        "accountId",
        "creationDate",
        "id",
        "scopes"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "description": {
          "type": "string",
          "description": "The description"
        },
        "accessToken": {
          "type": "string",
          "description": "The access token"
        },
        "scopes": {
          "type": "array",
          "description": "The list of scopes",
          "items": {
            "type": "string"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        }
      }
    },
    "ApiKeyTokenCreate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description"
        },
        "scopes": {
          "type": "array",
          "description": "The list of scopes",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiKeyTokenUpdate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description"
        },
        "scopes": {
          "type": "array",
          "description": "The list of scopes",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiKeyUpdate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description"
        },
        "redirectUris": {
          "type": "array",
          "description": "The list of redirect uris",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Application": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/Context"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "started": {
          "type": "boolean"
        },
        "debugging": {
          "type": "boolean"
        },
        "inboundRoot": {
          "$ref": "#/definitions/Restlet"
        },
        "outboundRoot": {
          "$ref": "#/definitions/Restlet"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        },
        "statusService": {
          "$ref": "#/definitions/StatusService"
        },
        "connegService": {
          "$ref": "#/definitions/ConnegService"
        },
        "metadataService": {
          "$ref": "#/definitions/MetadataService"
        },
        "converterService": {
          "$ref": "#/definitions/ConverterService"
        },
        "rangeService": {
          "$ref": "#/definitions/RangeService"
        },
        "taskService": {
          "$ref": "#/definitions/TaskService"
        },
        "connectorService": {
          "$ref": "#/definitions/ConnectorService"
        },
        "decoderService": {
          "$ref": "#/definitions/DecoderService"
        },
        "encoderService": {
          "$ref": "#/definitions/EncoderService"
        },
        "tunnelService": {
          "$ref": "#/definitions/TunnelService"
        },
        "logger": {
          "$ref": "#/definitions/Logger"
        },
        "application": {
          "$ref": "#/definitions/Application"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "AuthenticationInfo": {
      "type": "object",
      "properties": {
        "nextServerNonce": {
          "type": "string"
        },
        "nonceCount": {
          "type": "integer",
          "format": "int32"
        },
        "clientNonce": {
          "type": "string"
        },
        "quality": {
          "type": "string"
        },
        "responseDigest": {
          "type": "string"
        }
      }
    },
    "BulkWebConfigRequest": {
      "type": "object",
      "properties": {
        "webConfigRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebConfigRequest"
          }
        }
      }
    },
    "CacheDirective": {
      "type": "object",
      "properties": {
        "digit": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "encoded": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "publicKey": {
          "$ref": "#/definitions/PublicKey"
        }
      }
    },
    "ChallengeRequest": {
      "type": "object",
      "properties": {
        "rawValue": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "scheme": {
          "$ref": "#/definitions/ChallengeScheme"
        },
        "serverNonce": {
          "type": "string"
        },
        "realm": {
          "type": "string"
        },
        "opaque": {
          "type": "string"
        },
        "digestAlgorithm": {
          "type": "string"
        },
        "qualityOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domainRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "stale": {
          "type": "boolean"
        }
      }
    },
    "ChallengeResponse": {
      "type": "object",
      "properties": {
        "rawValue": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "scheme": {
          "$ref": "#/definitions/ChallengeScheme"
        },
        "serverNonce": {
          "type": "string"
        },
        "realm": {
          "type": "string"
        },
        "opaque": {
          "type": "string"
        },
        "digestAlgorithm": {
          "type": "string"
        },
        "clientNonce": {
          "type": "string"
        },
        "digestRef": {
          "$ref": "#/definitions/Reference"
        },
        "identifier": {
          "type": "string"
        },
        "quality": {
          "type": "string"
        },
        "secret": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretAlgorithm": {
          "type": "string"
        },
        "serverNounceCount": {
          "type": "integer",
          "format": "int32"
        },
        "timeIssued": {
          "type": "integer",
          "format": "int64"
        },
        "principal": {
          "$ref": "#/definitions/Principal"
        },
        "serverNounceCountAsHex": {
          "type": "string"
        }
      }
    },
    "ChallengeScheme": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "technicalName": {
          "type": "string"
        }
      }
    },
    "CharacterSet": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "ClientInfo": {
      "type": "object",
      "properties": {
        "acceptedCharacterSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreferenceCharacterSet"
          }
        },
        "acceptedEncodings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreferenceEncoding"
          }
        },
        "acceptedLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreferenceLanguage"
          }
        },
        "acceptedMediaTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreferenceMediaType"
          }
        },
        "acceptedPatches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreferenceMediaType"
          }
        },
        "address": {
          "type": "string"
        },
        "agent": {
          "type": "string"
        },
        "agentAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agentProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "authenticated": {
          "type": "boolean"
        },
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Certificate"
          }
        },
        "cipherSuite": {
          "type": "string"
        },
        "expectations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expectation"
          }
        },
        "forwardedAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "principals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Principal"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "upstreamAddress": {
          "type": "string"
        },
        "agentName": {
          "type": "string"
        },
        "agentVersion": {
          "type": "string"
        },
        "mainAgentProduct": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "CompletableFuture": {
      "type": "object",
      "properties": {
        "cancelled": {
          "type": "boolean"
        },
        "done": {
          "type": "boolean"
        },
        "completedExceptionally": {
          "type": "boolean"
        },
        "numberOfDependents": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CompletableFutureListApiKey": {
      "type": "object",
      "properties": {
        "cancelled": {
          "type": "boolean"
        },
        "done": {
          "type": "boolean"
        },
        "completedExceptionally": {
          "type": "boolean"
        },
        "numberOfDependents": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Conditions": {
      "type": "object",
      "properties": {
        "match": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "modifiedSince": {
          "type": "string",
          "format": "date-time"
        },
        "noneMatch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "rangeDate": {
          "type": "string",
          "format": "date-time"
        },
        "rangeTag": {
          "$ref": "#/definitions/Tag"
        },
        "unmodifiedSince": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ConnectorService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "clientProtocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Protocol"
          }
        },
        "serverProtocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Protocol"
          }
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "ConnegService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "strict": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Context": {
      "type": "object",
      "properties": {
        "clientDispatcher": {
          "$ref": "#/definitions/Restlet"
        },
        "serverDispatcher": {
          "$ref": "#/definitions/Restlet"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "logger": {
          "$ref": "#/definitions/Logger"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "defaultEnroler": {
          "$ref": "#/definitions/Enroler"
        },
        "defaultVerifier": {
          "$ref": "#/definitions/Verifier"
        },
        "executorService": {
          "$ref": "#/definitions/ScheduledExecutorService"
        }
      }
    },
    "ConverterService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Cookie": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CookieSetting": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "accessRestricted": {
          "type": "boolean"
        },
        "comment": {
          "type": "string"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32"
        },
        "secure": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "DecentralWebhook": {
      "type": "object",
      "required": [
        "webhookFeatures",
        "webhookUrl"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The identifier",
          "readOnly": true
        },
        "secret": {
          "type": "string",
          "description": "The secret to sign the webhook's payload",
          "readOnly": true
        },
        "webhookUrl": {
          "type": "string",
          "description": "The URL where our webhooks (POST requests) should point to (needs to be https)"
        },
        "webhookFeatures": {
          "type": "array",
          "description": "The features to trigger webhooks, set values: DEVICE_STATUS, DEVICE_MASTERDATA, DEVICE_CONFIG, DEVICE_LOGS, DEVICE_AUTHS, ACCOUNT_USER",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DEVICE_STATUS",
              "DEVICE_MASTERDATA",
              "DEVICE_CONFIG",
              "DEVICE_LOGS",
              "DEVICE_AUTHS",
              "ACCOUNT_USER"
            ]
          }
        }
      }
    },
    "DecoderService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Digest": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "Disposition": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "type": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        }
      }
    },
    "EncoderService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "acceptedMediaTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaType"
          }
        },
        "ignoredMediaTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaType"
          }
        },
        "minimumSize": {
          "type": "integer",
          "format": "int64"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Encoding": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "Enroler": {
      "type": "object"
    },
    "Enumeration": {
      "type": "object"
    },
    "EnumerationString": {
      "type": "object"
    },
    "ErrorManager": {
      "type": "object"
    },
    "Expectation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "type": "object"
    },
    "Formatter": {
      "type": "object"
    },
    "Handler": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/Filter"
        },
        "formatter": {
          "$ref": "#/definitions/Formatter"
        },
        "errorManager": {
          "$ref": "#/definitions/ErrorManager"
        },
        "encoding": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Header": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "Language": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primaryTag": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/Language"
        }
      }
    },
    "Level": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "resourceBundleName": {
          "type": "string"
        },
        "localizedName": {
          "type": "string"
        }
      }
    },
    "Locale": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "variant": {
          "type": "string"
        },
        "extensionKeys": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unicodeLocaleAttributes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unicodeLocaleKeys": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "iso3Language": {
          "type": "string"
        },
        "iso3Country": {
          "type": "string"
        },
        "displayLanguage": {
          "type": "string"
        },
        "displayScript": {
          "type": "string"
        },
        "displayCountry": {
          "type": "string"
        },
        "displayVariant": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "Logger": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "handlers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Handler"
          }
        },
        "useParentHandlers": {
          "type": "boolean"
        },
        "filter": {
          "$ref": "#/definitions/Filter"
        },
        "parent": {
          "$ref": "#/definitions/Logger"
        },
        "resourceBundle": {
          "$ref": "#/definitions/ResourceBundle"
        },
        "resourceBundleName": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/Level"
        }
      }
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "concrete": {
          "type": "boolean"
        },
        "mainType": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/MediaType"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "MetadataService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "defaultCharacterSet": {
          "$ref": "#/definitions/CharacterSet"
        },
        "defaultEncoding": {
          "$ref": "#/definitions/Encoding"
        },
        "defaultLanguage": {
          "$ref": "#/definitions/Language"
        },
        "defaultMediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "allCharacterSetExtensionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allEncodingExtensionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allExtensionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allLanguageExtensionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allMediaTypeExtensionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Method": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "idempotent": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "replying": {
          "type": "boolean"
        },
        "safe": {
          "type": "boolean"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "MyAccount": {
      "type": "object",
      "required": [
        "accountId",
        "creationDate",
        "email",
        "name",
        "type",
        "updateDate"
      ],
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type: 0 .. user, 1 .. company, 2 .. caretaker",
          "minimum": 0,
          "maximum": 2
        },
        "email": {
          "type": "string",
          "description": "The email address"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "true, if the email is verified"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "masterAccountId": {
          "type": "integer",
          "format": "int32",
          "description": "The master account id if it's a sub account"
        },
        "rights": {
          "type": "integer",
          "format": "int32",
          "description": "The rights bitmask if it's a sub account: 1 .. manage smartlock, 2 .. operate smartlock, 4 .. manage smartlock config, 8 .. manage smartlock authorizations, 16 .. view smartlock logs, 32 .. manage sub accounts, 64 .. create smartlocks",
          "minimum": 0,
          "maximum": 127
        },
        "language": {
          "type": "string",
          "example": "de",
          "description": "The language code"
        },
        "config": {
          "description": "The optional config",
          "$ref": "#/definitions/Account.Config"
        },
        "profile": {
          "description": "The optional profile",
          "$ref": "#/definitions/Account.Profile"
        },
        "secret": {
          "type": "array",
          "description": "The secret base64 encoded",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        },
        "descent": {
          "description": "Set, if your account is not a standard Nuki Web account",
          "readOnly": true,
          "$ref": "#/definitions/Account.Descent"
        },
        "shsSubscriptionType": {
          "type": "string",
          "description": "subscription type of the account (b2b)",
          "enum": [
            "BUSINESS",
            "STANDARD",
            "BUSINESS_PLUS",
            "API_ONLY"
          ]
        },
        "b2bActive": {
          "type": "boolean"
        },
        "apiTermsOfUse": {
          "$ref": "#/definitions/TermsOfUse"
        }
      }
    },
    "NamedValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "NamedValueString": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "os",
        "pushId",
        "settings"
      ],
      "properties": {
        "notificationId": {
          "type": "string",
          "description": "The unique notificationId for the notification"
        },
        "referenceId": {
          "type": "string",
          "description": "The reference ID, an ID to identify a foreign system"
        },
        "pushId": {
          "type": "string",
          "description": "The push ID or the POST URL for a webhook"
        },
        "secret": {
          "type": "string",
          "example": "8d41a187c3954f886f9de3a88c2ef22df0eac190",
          "description": "The 40 byte hex string to sign the checksumof the POST payload if the notification is webhook (os=2)"
        },
        "os": {
          "type": "integer",
          "format": "int32",
          "description": "The operating system: 0 .. Android, 1 .. iOS, 2 .. web hook"
        },
        "language": {
          "type": "string",
          "description": "The language of push messages: cs, de, en (default), es, fr, it, nl, sk"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Current state: 0 .. init, 1 .. active, 2 .. failed"
        },
        "lastActiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last active date"
        },
        "settings": {
          "type": "array",
          "description": "Settings per Smart Lock",
          "items": {
            "$ref": "#/definitions/Notification.Setting"
          }
        }
      }
    },
    "Notification.Setting": {
      "type": "object",
      "required": [
        "triggerEvents"
      ],
      "properties": {
        "smartlockId": {
          "type": "integer",
          "format": "int64",
          "description": "The smartlock ID, if not set all Smart Locks of the account  are enabled for push notifications"
        },
        "triggerEvents": {
          "type": "array",
          "description": "A set on which push notifications should be triggered: lock, unlock, unlatch, lockngo, open, ring, doorsensor, warnings, smartlock",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "authIds": {
          "type": "array",
          "description": "A set of auth IDs to filter push notifications to certain  users or keypads. If no entry push notifications are triggered for all users and keypads",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ObjectId": {
      "type": "string"
    },
    "OpenerIntercomBrand": {
      "type": "object",
      "required": [
        "brand",
        "brandId"
      ],
      "properties": {
        "brandId": {
          "type": "integer",
          "format": "int32",
          "description": "The brand ID"
        },
        "brand": {
          "type": "string",
          "description": "The brand name"
        }
      }
    },
    "OpenerIntercomModel": {
      "type": "object",
      "required": [
        "brandId",
        "busModeSwitch",
        "busModeSwitchShortCircuitDuration",
        "conAudioout",
        "conBusAudio",
        "conDoorbellMinus",
        "conDoorbellPlus",
        "conGndAnalogue",
        "conGndBus",
        "conOpendoor",
        "intercomId",
        "model",
        "type",
        "verified"
      ],
      "properties": {
        "intercomId": {
          "type": "integer",
          "format": "int32",
          "description": "The intercom ID"
        },
        "brandId": {
          "type": "integer",
          "format": "int32",
          "description": "The related brand ID"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the model"
        },
        "model": {
          "type": "string",
          "description": "The model name"
        },
        "verified": {
          "type": "integer",
          "format": "int32",
          "description": "Verified Nuki intercom: 1 .. verified to work, 2 .. may be compatible, but not verified, 3 .. not compatible"
        },
        "conGndBus": {
          "type": "string",
          "description": "Connection for ground BUS"
        },
        "conBusAudio": {
          "type": "string",
          "description": "Connection for audio BUS"
        },
        "conAudioout": {
          "type": "string",
          "description": "Connection for audio out"
        },
        "conDoorbellPlus": {
          "type": "string",
          "description": "Connection for doorbell plus"
        },
        "conDoorbellMinus": {
          "type": "string",
          "description": "Connection for doorbell minus"
        },
        "conOpendoor": {
          "type": "string",
          "description": "Connection for open the door"
        },
        "conGndAnalogue": {
          "type": "string",
          "description": "Connection for ground analogue"
        },
        "busModeSwitch": {
          "type": "integer",
          "format": "int32",
          "description": "Settings value for BUS mode switch"
        },
        "busModeSwitchShortCircuitDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Settings value for BUS mode switch short cicuit duration"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        }
      }
    },
    "Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Preference": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "quality": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "PreferenceCharacterSet": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/CharacterSet"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "quality": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "PreferenceEncoding": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Encoding"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "quality": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "PreferenceLanguage": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Language"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "quality": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "PreferenceMediaType": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/MediaType"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "quality": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "Principal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Protocol": {
      "type": "object",
      "properties": {
        "confidential": {
          "type": "boolean"
        },
        "defaultPort": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "schemeName": {
          "type": "string"
        },
        "technicalName": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "PublicKey": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "encoded": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "Range": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "instanceSize": {
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "unitName": {
          "type": "string"
        }
      }
    },
    "RangeService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "ReadableByteChannel": {
      "type": "object",
      "properties": {
        "open": {
          "type": "boolean"
        }
      }
    },
    "Reader": {
      "type": "object"
    },
    "RecipientInfo": {
      "type": "object",
      "properties": {
        "protocol": {
          "$ref": "#/definitions/Protocol"
        },
        "comment": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "baseRef": {
          "$ref": "#/definitions/Reference"
        },
        "identifier": {
          "type": "string"
        },
        "relative": {
          "type": "boolean"
        },
        "schemeSpecificPart": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "fragment": {
          "type": "string"
        },
        "userInfo": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "matrix": {
          "type": "string"
        },
        "matrixAsForm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "queryAsForm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "extensionsAsArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hierarchicalPart": {
          "type": "string"
        },
        "hostDomain": {
          "type": "string"
        },
        "hostIdentifier": {
          "type": "string"
        },
        "hostPort": {
          "type": "integer",
          "format": "int32"
        },
        "lastSegment": {
          "type": "string"
        },
        "parentRef": {
          "$ref": "#/definitions/Reference"
        },
        "relativePart": {
          "type": "string"
        },
        "relativeRef": {
          "$ref": "#/definitions/Reference"
        },
        "remainingPart": {
          "type": "string"
        },
        "schemeProtocol": {
          "$ref": "#/definitions/Protocol"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "targetRef": {
          "$ref": "#/definitions/Reference"
        },
        "hierarchical": {
          "type": "boolean"
        },
        "authority": {
          "type": "string"
        },
        "absolute": {
          "type": "boolean"
        },
        "opaque": {
          "type": "boolean"
        },
        "extensions": {
          "type": "string"
        }
      }
    },
    "Representation": {
      "type": "object",
      "properties": {
        "characterSet": {
          "$ref": "#/definitions/CharacterSet"
        },
        "encodings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Encoding"
          }
        },
        "locationRef": {
          "$ref": "#/definitions/Reference"
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Language"
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        },
        "available": {
          "type": "boolean"
        },
        "digest": {
          "$ref": "#/definitions/Digest"
        },
        "disposition": {
          "$ref": "#/definitions/Disposition"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "stream": {
          "$ref": "#/definitions/InputStream"
        },
        "transient": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "reader": {
          "$ref": "#/definitions/Reader"
        },
        "availableSize": {
          "type": "integer",
          "format": "int64"
        },
        "registration": {
          "$ref": "#/definitions/SelectionRegistration"
        },
        "selectable": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        },
        "channel": {
          "$ref": "#/definitions/ReadableByteChannel"
        }
      }
    },
    "Request": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "cacheDirectives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CacheDirective"
          }
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "entity": {
          "$ref": "#/definitions/Representation"
        },
        "onError": {
          "$ref": "#/definitions/Uniform"
        },
        "onSent": {
          "$ref": "#/definitions/Uniform"
        },
        "recipientsInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipientInfo"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Warning"
          }
        },
        "accessControlRequestHeaders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "accessControlRequestMethod": {
          "$ref": "#/definitions/Method"
        },
        "challengeResponse": {
          "$ref": "#/definitions/ChallengeResponse"
        },
        "clientInfo": {
          "$ref": "#/definitions/ClientInfo"
        },
        "conditions": {
          "$ref": "#/definitions/Conditions"
        },
        "cookies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cookie"
          }
        },
        "hostRef": {
          "$ref": "#/definitions/Reference"
        },
        "loggable": {
          "type": "boolean"
        },
        "maxForwards": {
          "type": "integer",
          "format": "int32"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "onResponse": {
          "$ref": "#/definitions/Uniform"
        },
        "originalRef": {
          "$ref": "#/definitions/Reference"
        },
        "protocol": {
          "$ref": "#/definitions/Protocol"
        },
        "proxyChallengeResponse": {
          "$ref": "#/definitions/ChallengeResponse"
        },
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Range"
          }
        },
        "referrerRef": {
          "$ref": "#/definitions/Reference"
        },
        "resourceRef": {
          "$ref": "#/definitions/Reference"
        },
        "rootRef": {
          "$ref": "#/definitions/Reference"
        },
        "confidential": {
          "type": "boolean"
        },
        "asynchronous": {
          "type": "boolean"
        },
        "entityAvailable": {
          "type": "boolean"
        },
        "expectingResponse": {
          "type": "boolean"
        },
        "synchronous": {
          "type": "boolean"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Header"
          }
        },
        "entityAsText": {
          "type": "string"
        }
      }
    },
    "ReservationAccessTimesUpdate": {
      "type": "object",
      "properties": {
        "checkInTime": {
          "type": "integer",
          "format": "int32",
          "description": "Custom check in time in minutes from midnight"
        },
        "checkOutTime": {
          "type": "integer",
          "format": "int32",
          "description": "Custom check out time in minutes from midnight"
        }
      }
    },
    "ResourceBundle": {
      "type": "object",
      "properties": {
        "locale": {
          "$ref": "#/definitions/Locale"
        },
        "baseBundleName": {
          "type": "string"
        },
        "keys": {
          "$ref": "#/definitions/EnumerationString"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "cacheDirectives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CacheDirective"
          }
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "entity": {
          "$ref": "#/definitions/Representation"
        },
        "onError": {
          "$ref": "#/definitions/Uniform"
        },
        "onSent": {
          "$ref": "#/definitions/Uniform"
        },
        "recipientsInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipientInfo"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Warning"
          }
        },
        "accessControlAllowCredentials": {
          "type": "boolean"
        },
        "accessControlAllowHeaders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "accessControlAllowMethods": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Method"
          }
        },
        "accessControlAllowOrigin": {
          "type": "string"
        },
        "accessControlExposeHeaders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "accessControlMaxAge": {
          "type": "integer",
          "format": "int32"
        },
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "allowedMethods": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Method"
          }
        },
        "authenticationInfo": {
          "$ref": "#/definitions/AuthenticationInfo"
        },
        "autoCommitting": {
          "type": "boolean"
        },
        "challengeRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChallengeRequest"
          }
        },
        "committed": {
          "type": "boolean"
        },
        "cookieSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CookieSetting"
          }
        },
        "dimensions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AUTHORIZATION",
              "CHARACTER_SET",
              "CLIENT_ADDRESS",
              "CLIENT_AGENT",
              "UNSPECIFIED",
              "ENCODING",
              "LANGUAGE",
              "MEDIA_TYPE",
              "TIME",
              "ORIGIN"
            ]
          }
        },
        "locationRef": {
          "$ref": "#/definitions/Reference"
        },
        "proxyChallengeRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChallengeRequest"
          }
        },
        "request": {
          "$ref": "#/definitions/Request"
        },
        "retryAfter": {
          "type": "string",
          "format": "date-time"
        },
        "serverInfo": {
          "$ref": "#/definitions/ServerInfo"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "confidential": {
          "type": "boolean"
        },
        "provisional": {
          "type": "boolean"
        },
        "final": {
          "type": "boolean"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Header"
          }
        },
        "entityAvailable": {
          "type": "boolean"
        },
        "entityAsText": {
          "type": "string"
        }
      }
    },
    "Restlet": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/Context"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "started": {
          "type": "boolean"
        },
        "logger": {
          "$ref": "#/definitions/Logger"
        },
        "application": {
          "$ref": "#/definitions/Application"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/Application"
        },
        "childRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ScheduledExecutorService": {
      "type": "object",
      "properties": {
        "terminated": {
          "type": "boolean"
        },
        "shutdown": {
          "type": "boolean"
        }
      }
    },
    "SelectableChannel": {
      "type": "object",
      "properties": {
        "open": {
          "type": "boolean"
        },
        "blocking": {
          "type": "boolean"
        },
        "registered": {
          "type": "boolean"
        }
      }
    },
    "SelectionListener": {
      "type": "object"
    },
    "SelectionRegistration": {
      "type": "object",
      "properties": {
        "canceling": {
          "type": "boolean"
        },
        "interestOperations": {
          "type": "integer",
          "format": "int32"
        },
        "selectionListener": {
          "$ref": "#/definitions/SelectionListener"
        },
        "readyOperations": {
          "type": "integer",
          "format": "int32"
        },
        "selectableChannel": {
          "$ref": "#/definitions/SelectableChannel"
        },
        "wakeupListener": {
          "$ref": "#/definitions/WakeupListener"
        },
        "writable": {
          "type": "boolean"
        },
        "readable": {
          "type": "boolean"
        },
        "connectable": {
          "type": "boolean"
        },
        "interestReady": {
          "type": "boolean"
        }
      }
    },
    "ServerInfo": {
      "type": "object",
      "properties": {
        "acceptingRanges": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "agent": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "ShsSubscription": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "B2C",
            "B2B"
          ]
        },
        "state": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "CANCELLED",
            "EXPIRED",
            "ON_HOLD",
            "PENDING",
            "PENDING_CANCEL"
          ]
        },
        "shsSubscriptionType": {
          "type": "string",
          "enum": [
            "BUSINESS",
            "STANDARD",
            "BUSINESS_PLUS",
            "API_ONLY"
          ]
        },
        "updateDate": {
          "type": "string",
          "format": "date-time"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "isInGracePeriod": {
          "type": "boolean"
        },
        "isGracePeriodWarningDismissed": {
          "type": "boolean"
        },
        "gracePeriodWarningEmailSent": {
          "type": "boolean"
        }
      }
    },
    "Smartlock": {
      "type": "object",
      "required": [
        "accountId",
        "adminPinState",
        "authId",
        "favorite",
        "name",
        "serverState",
        "smartlockId",
        "type"
      ],
      "properties": {
        "smartlockId": {
          "type": "integer",
          "format": "int64",
          "description": "The smartlock id"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type: 0 .. keyturner, 1 .. box, 2 .. opener, 3 .. smartdoor, 4 .. smartlock3"
        },
        "lmType": {
          "type": "integer",
          "format": "int32",
          "description": "The lock mechanism used in the smart door lock: 1 .. MyEVO, 2 .. KFV Genius (only for type = 3)"
        },
        "authId": {
          "type": "integer",
          "format": "int32",
          "description": "The authorization id"
        },
        "name": {
          "type": "string",
          "description": "The name of the smartlock"
        },
        "favorite": {
          "type": "boolean",
          "description": "The favorite flag"
        },
        "config": {
          "description": "The config",
          "$ref": "#/definitions/Smartlock.Config"
        },
        "advancedConfig": {
          "description": "The advanced config",
          "$ref": "#/definitions/Smartlock.AdvancedConfig"
        },
        "openerAdvancedConfig": {
          "description": "The opener advanced config",
          "$ref": "#/definitions/Smartlock.OpenerAdvancedConfig"
        },
        "smartdoorAdvancedConfig": {
          "description": "The smartdoor advanced config",
          "$ref": "#/definitions/Smartlock.SmartdoorAdvancedConfig"
        },
        "webConfig": {
          "description": "The web config",
          "$ref": "#/definitions/Smartlock.WebConfig"
        },
        "state": {
          "description": "The state",
          "$ref": "#/definitions/Smartlock.State"
        },
        "firmwareVersion": {
          "type": "integer",
          "format": "int32",
          "description": "The firmware version",
          "readOnly": true
        },
        "hardwareVersion": {
          "type": "integer",
          "format": "int32",
          "description": "The hardware version",
          "readOnly": true
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        },
        "serverState": {
          "type": "integer",
          "format": "int32",
          "description": "The server state: 0 .. ok, 1 .. unregistered, 2 .. auth uuid invalid, 3 .. auth invalid, 4 .. offline",
          "minimum": 0,
          "maximum": 4
        },
        "adminPinState": {
          "type": "integer",
          "format": "int32",
          "description": "The admin pin state: 0 .. ok, 1 .. missing, 2 .. invalid",
          "minimum": 0,
          "maximum": 2
        },
        "virtualDevice": {
          "type": "boolean",
          "description": "The flag indicating a virtual Smart Lock",
          "readOnly": true
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        },
        "error": {
          "type": "string",
          "description": "In case of any error, it contains the error message"
        },
        "previousSubscriptions": {
          "type": "array",
          "description": "Previous Subscriptions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ShsSubscription"
          }
        },
        "currentSubscription": {
          "description": "Current Subscription",
          "readOnly": true,
          "$ref": "#/definitions/ShsSubscription"
        },
        "opener": {
          "type": "boolean"
        },
        "box": {
          "type": "boolean"
        },
        "smartDoor": {
          "type": "boolean"
        },
        "keyturner": {
          "type": "boolean"
        },
        "smartlock3": {
          "type": "boolean"
        }
      }
    },
    "Smartlock.AdvancedConfig": {
      "type": "object",
      "required": [
        "batteryType",
        "lockedPositionOffsetDegrees",
        "singleLockedPositionOffsetDegrees",
        "totalDegrees",
        "unlockedPositionOffsetDegrees"
      ],
      "properties": {
        "lngTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "Timeout in seconds for lock ‘n’ go",
          "enum": [
            5,
            10,
            15,
            20,
            30,
            45,
            60
          ]
        },
        "singleButtonPressAction": {
          "type": "integer",
          "format": "int32",
          "description": "The desired action, if the button is pressed once: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status"
        },
        "doubleButtonPressAction": {
          "type": "integer",
          "format": "int32",
          "description": "The desired action, if the button is pressed twice: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status"
        },
        "automaticBatteryTypeDetection": {
          "type": "boolean",
          "description": "Flag that indicates if the automatic detection of the battery type is enabled"
        },
        "unlatchDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration in seconds for holding the latch in unlatched position",
          "enum": [
            1,
            3,
            5,
            7,
            10,
            15,
            20,
            30
          ]
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        },
        "totalDegrees": {
          "type": "integer",
          "format": "int32",
          "description": "The absolute total position in degrees that has been reached during calibration",
          "readOnly": true
        },
        "singleLockedPositionOffsetDegrees": {
          "type": "integer",
          "format": "int32",
          "description": "Offset that alters the single locked position"
        },
        "unlockedToLockedTransitionOffsetDegrees": {
          "type": "integer",
          "format": "int32",
          "description": "Offset that alters the position where transition from unlocked to locked happens"
        },
        "unlockedPositionOffsetDegrees": {
          "type": "integer",
          "format": "int32",
          "description": "Offset that alters the unlocked position"
        },
        "lockedPositionOffsetDegrees": {
          "type": "integer",
          "format": "int32",
          "description": "Offset that alters the locked position"
        },
        "detachedCylinder": {
          "type": "boolean",
          "description": "Flag that indicates that the inner side of the used cylinder is detached from the outer side"
        },
        "batteryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium"
        },
        "autoLock": {
          "type": "boolean",
          "description": "New separate flag with FW >= 2.7.8/1.9.1: The Auto Lock feature automatically locks your door when it has been unlocked for a certain period of time"
        },
        "autoLockTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds until the smart lock relocks itself after it has been unlocked. FW < 2.7.8/1.9.1: No auto relock if value is 0, FW >= 2.7.8/1.9.1: has to be >=2 (defaults to 2 for values <2 if autoLock is set to true)"
        },
        "autoUpdateEnabled": {
          "type": "boolean",
          "description": "Flag that indicates if available firmware updates for the deviceshould be installed automatically"
        }
      }
    },
    "Smartlock.Config": {
      "type": "object",
      "required": [
        "advertisingMode",
        "latitude",
        "longitude",
        "name",
        "singleLock",
        "timezoneId",
        "timezoneOffset"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the smartlock for new users"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "The latitude of the smartlock position"
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "The longitude of the smartlock position"
        },
        "capabilities": {
          "type": "integer",
          "format": "int32",
          "description": "The capabilities indicate whether door opening via app is possible, RTO is possible or both: 0 .. only door opening possible, 1 .. both possible, 2 .. only RTO possible (only for type=2)",
          "readOnly": true,
          "minimum": 0,
          "maximum": 2
        },
        "autoUnlatch": {
          "type": "boolean",
          "description": "True if the door should be unlatched on unlocking (knob) (only for type=1 and type=3)"
        },
        "liftUpHandle": {
          "type": "boolean",
          "description": "True if the door has a lift up handle, which is required to be lifted up to lock the door"
        },
        "pairingEnabled": {
          "type": "boolean",
          "description": "True if the pairing is allowed via the smartlock button"
        },
        "buttonEnabled": {
          "type": "boolean",
          "description": "True if the button on the smartlock is enabled"
        },
        "ledEnabled": {
          "type": "boolean",
          "description": "True if the LED on the smartlock is enabled"
        },
        "ledBrightness": {
          "type": "integer",
          "format": "int32",
          "description": "The brightness of the LED: 0 .. off, 5 .. max (only for type=1 and type=3)"
        },
        "timezoneOffset": {
          "type": "integer",
          "format": "int32",
          "description": "[deprecated] The timezone offset (in minutes)"
        },
        "daylightSavingMode": {
          "type": "integer",
          "format": "int32",
          "description": "[deprecated] The daylight saving mode: 0 .. off, 1 .. european"
        },
        "fobPaired": {
          "type": "boolean",
          "description": "True if a fob is paired with the smartlock",
          "readOnly": true
        },
        "fobAction1": {
          "type": "integer",
          "format": "int32",
          "description": "The fob action if button is pressed once: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring",
          "readOnly": true,
          "minimum": 0,
          "maximum": 8
        },
        "fobAction2": {
          "type": "integer",
          "format": "int32",
          "description": "The fob action if button is pressed twice: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring",
          "readOnly": true,
          "minimum": 0,
          "maximum": 8
        },
        "fobAction3": {
          "type": "integer",
          "format": "int32",
          "description": "The fob action if button is pressed 3 times: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring",
          "readOnly": true,
          "minimum": 0,
          "maximum": 8
        },
        "singleLock": {
          "type": "boolean",
          "description": "True if the smartlock should only lock once (instead of twice) (only for type=1)"
        },
        "operatingMode": {
          "type": "integer",
          "format": "int32",
          "description": "The operating mode of the opener (only for type=2): 0x00 .. generic door opener, 0x01 .. analogue intercom, 0x02 .. digital intercom, 0x03 .. digital intercom Siedle, 0x04 .. digital intercom TCS, 0x05 .. digital intercom Bticino, 0x06 .. analog intercom Siedle HTS, 0x07 .. digital intercom STR, 0x08 .. digital intercom Ritto, 0x09 .. digital intercom Fermax, 0x0A .. digital intercom Comelit, 0x0B .. digital intercom Urmet BiBus, 0x0C .. digital intercom Urmet 2Voice, 0x0D .. digital intercom Golmar, 0x0E .. digital intercom SKS, 0x0F .. digital intercom Spare",
          "readOnly": true
        },
        "advertisingMode": {
          "type": "integer",
          "format": "int32",
          "description": "The advertising mode (battery saving): 0 .. automatic, 1 .. normal, 2 .. slow, 3 .. slowest",
          "minimum": 0,
          "maximum": 3
        },
        "keypadPaired": {
          "type": "boolean",
          "description": "True if a keypad is paired with the smartlock",
          "readOnly": true
        },
        "keypad2Paired": {
          "type": "boolean",
          "description": "True if a keypad 2 is paired with the smartlock",
          "readOnly": true
        },
        "homekitState": {
          "type": "integer",
          "format": "int32",
          "description": "The homekit state: 0 .. unavailable, 1 .. disabled, 2 .. enabled, 3 .. enabled & paired",
          "readOnly": true,
          "minimum": 0,
          "maximum": 3
        },
        "matterState": {
          "type": "integer",
          "format": "int32",
          "description": "The matter state: 0 .. not available, 1 .. disabled and no certificate available, 2 .. disabled, 3 .. enabled, 4 .. enabled & paired",
          "readOnly": true,
          "minimum": 0,
          "maximum": 4
        },
        "timezoneId": {
          "type": "integer",
          "format": "int32",
          "description": "The timezone id (check https://developer.nuki.io for ids)",
          "minimum": 0,
          "maximum": 45
        },
        "deviceType": {
          "type": "integer",
          "format": "int32",
          "description": "The device type of a Nuki device",
          "readOnly": true
        },
        "wifiEnabled": {
          "type": "boolean",
          "description": "Flag that indicates if the devices internal WIFI module can be used",
          "readOnly": true
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        }
      }
    },
    "Smartlock.OpenerAdvancedConfig": {
      "type": "object",
      "required": [
        "batteryType",
        "busModeSwitch",
        "disableRtoAfterRing",
        "doorbellSuppression",
        "doorbellSuppressionDuration",
        "doubleButtonPressAction",
        "electricStrikeDelay",
        "electricStrikeDuration",
        "intercomId",
        "randomElectricStrikeDelay",
        "rtoTimeout",
        "shortCircuitDuration",
        "singleButtonPressAction",
        "soundCm",
        "soundConfirmation",
        "soundLevel",
        "soundOpen",
        "soundRing",
        "soundRto"
      ],
      "properties": {
        "intercomId": {
          "type": "integer",
          "format": "int32",
          "description": "The database ID of the connected intercom",
          "readOnly": true
        },
        "busModeSwitch": {
          "type": "integer",
          "format": "int32",
          "description": "Method to switch between data and analogue mode",
          "readOnly": true,
          "enum": [
            0,
            1
          ]
        },
        "shortCircuitDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration of the short circuit for BUS mode switching in ms"
        },
        "electricStrikeDelay": {
          "type": "integer",
          "format": "int32",
          "description": "Delay of electric strike activation in ms after lock action 3 'electric strike actuation'"
        },
        "randomElectricStrikeDelay": {
          "type": "boolean",
          "description": "Random electricStrikeDelay (range 3000 - 7000 ms) in order to simulate a person inside actuating the electric strike"
        },
        "electricStrikeDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration in ms of electric strike actuation lock action 3 'electric strike actuation'"
        },
        "disableRtoAfterRing": {
          "type": "boolean",
          "description": "Flag to disable RTO after ring"
        },
        "rtoTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "After this period of time in minutes, RTO gets deactivated automatically"
        },
        "doorbellSuppression": {
          "type": "integer",
          "format": "int32",
          "description": "The doorbell supression bitmask: first bit (least significant) .. whenever the doorbell rings and CM and RTO are inactive, second bit .. RTO is active, third bit .. CM is active"
        },
        "doorbellSuppressionDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration in ms of doorbell suppression (only in Operating mode 2 'digital Intercom')"
        },
        "soundRing": {
          "type": "integer",
          "format": "int32",
          "description": "The sound for ring: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "soundOpen": {
          "type": "integer",
          "format": "int32",
          "description": "The sound for open: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "soundRto": {
          "type": "integer",
          "format": "int32",
          "description": "The sound for RTO: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "soundCm": {
          "type": "integer",
          "format": "int32",
          "description": "The sound for CM: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3",
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "soundConfirmation": {
          "type": "integer",
          "format": "int32",
          "description": "The sound confirmation: 0 .. no sound, 1 .. sound",
          "enum": [
            0,
            1
          ]
        },
        "soundLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The sound level"
        },
        "singleButtonPressAction": {
          "type": "integer",
          "format": "int32",
          "description": "The desired action, if the button is pressed once: 0 .. no action, 1 .. toggle RTO, 2 .. activate RTO, 3 .. deactivate RTO, 4 .. toggle CM, 5 .. activate CM, 6 .. deactivate CM, 7 .. open"
        },
        "doubleButtonPressAction": {
          "type": "integer",
          "format": "int32",
          "description": "The desired action, if the button is pressed twice: 0 .. no action, 1 .. toggle RTO, 2 .. activate RTO, 3 .. deactivate RTO, 4 .. toggle CM, 5 .. activate CM, 6 .. deactivate CM, 7 .. open"
        },
        "batteryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed"
        },
        "automaticBatteryTypeDetection": {
          "type": "boolean",
          "description": "Flag that indicates if the automatic detection of the battery type is enabled"
        },
        "autoUpdateEnabled": {
          "type": "boolean",
          "description": "Flag that indicates if available firmware updates for the deviceshould be installed automatically"
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        }
      }
    },
    "Smartlock.SmartdoorAdvancedConfig": {
      "type": "object",
      "required": [
        "autoLock",
        "batteryType"
      ],
      "properties": {
        "lngTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "Timeout in seconds for lock ‘n’ go",
          "enum": [
            5,
            10,
            15,
            20,
            30,
            45,
            60
          ]
        },
        "singleButtonPressAction": {
          "type": "integer",
          "format": "int32",
          "description": "The desired action, if the button is pressed once: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status"
        },
        "doubleButtonPressAction": {
          "type": "integer",
          "format": "int32",
          "description": "The desired action, if the button is pressed twice: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status"
        },
        "automaticBatteryTypeDetection": {
          "type": "boolean",
          "description": "Flag that indicates if the automatic detection of the battery type is enabled"
        },
        "unlatchDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration in seconds for holding the latch in unlatched position",
          "enum": [
            1,
            3,
            5,
            7,
            10,
            15,
            20,
            30
          ]
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        },
        "buzzerVolume": {
          "type": "integer",
          "format": "int32",
          "description": "The volume of the buzzer: 0 .. off, 1 .. low, 2 .. normal",
          "enum": [
            0,
            1,
            2
          ]
        },
        "supportedBatteryTypes": {
          "type": "array",
          "description": "Set of supported battery types: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed, 254 .. automatic, 255 .. unknown",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "batteryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed, 255 .. unknown"
        },
        "autoLockTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds until the smart lock relocks itself after it has been unlocked. No auto relock if value is 0"
        },
        "autoLock": {
          "type": "boolean",
          "description": "The Auto Lock feature automatically locks your door when it has been unlocked for a certain period of time"
        }
      }
    },
    "Smartlock.State": {
      "type": "object",
      "required": [
        "batteryCritical",
        "doorState",
        "lastAction",
        "mode",
        "nightMode",
        "ringToOpenTimer",
        "state",
        "trigger"
      ],
      "properties": {
        "mode": {
          "type": "integer",
          "format": "int32",
          "description": "The smartlock mode: 0 .. uninitialized, 1 .. pairing, 2 .. door (default), 3 .. continuous (type=2 only), 4 .. maintenance",
          "minimum": 0,
          "maximum": 4
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "description": "The smartlock state: type=0/3/4: 0 .. uncalibrated, 1 .. locked, 2 .. unlocking, 3 .. unlocked, 4 .. locking, 5 .. unlatched, 6 .. unlocked (lock 'n' go), 7 .. unlatching, 224 .. Error wrong entry code, 225 .. Error wrong Fingerprint, 254 .. motor blocked, 255 .. undefined; type=2: 0 .. untrained, 1 .. online, 3 .. ring to open active, 5 .. open, 7 .. opening, 253 .. boot run, 255 .. undefined",
          "minimum": 0,
          "maximum": 255
        },
        "trigger": {
          "type": "integer",
          "format": "int32",
          "description": " The state trigger: 0 .. system, 1 .. manual, 2 .. button, 3 .. automatic, 4 .. web (type=1 only), 5 .. app (type=1 only), 6 .. continuous mode (type=2 only), 7 .. accessory (type=3 only)",
          "minimum": 0,
          "maximum": 6
        },
        "lastAction": {
          "type": "integer",
          "format": "int32",
          "description": "The action: type=0/3/4: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock 'n' go, 5 .. lock 'n' go with unlatch; type=1: 1 .. unlock; type=2: 1 .. activate ring to open, 2 .. deactivate ring to open, 3 .. open (electric strike actuation)",
          "minimum": 0,
          "maximum": 5
        },
        "batteryCritical": {
          "type": "boolean",
          "description": "True if the battery state of the device is critical"
        },
        "batteryCharging": {
          "type": "boolean",
          "description": "True if a Nuki battery pack in a Smart Lock is currently charging"
        },
        "batteryCharge": {
          "type": "integer",
          "format": "int32",
          "description": "Remaining capacity of a Nuki battery pack in %",
          "minimum": 0,
          "maximum": 100
        },
        "keypadBatteryCritical": {
          "type": "boolean",
          "description": "True if the battery of a paired Keypad is critical (only available for supported devices)"
        },
        "doorsensorBatteryCritical": {
          "type": "boolean",
          "description": "True if the battery of a paired doorsensor is critical (only available for supported devices)"
        },
        "doorState": {
          "type": "integer",
          "format": "int32",
          "description": "The door state: 0 .. unavailable/not paired, 1 .. deactivated, 2 .. door closed, 3 .. door opened, 4 .. door state unknown, 5 .. calibrating, 16 .. uncalibrated, 240 .. removed, 255 .. unknown",
          "minimum": 0,
          "maximum": 255
        },
        "ringToOpenTimer": {
          "type": "integer",
          "format": "int32",
          "description": "[deprecated] Remaining ring to open time; 0 if ring to open is not active (type=2 only)",
          "minimum": 0,
          "maximum": 65535
        },
        "ringToOpenEnd": {
          "type": "string",
          "format": "date-time",
          "description": "End date of ring to open timeout; null if ring to open is not active (type=2 only)"
        },
        "nightMode": {
          "type": "boolean",
          "description": "True if night mode currently active"
        },
        "operationId": {
          "type": "string",
          "description": "The operation id - if set it's locked for another operation",
          "readOnly": true
        }
      }
    },
    "Smartlock.WebConfig": {
      "type": "object",
      "properties": {
        "batteryWarningPerMailEnabled": {
          "type": "boolean",
          "description": "True if a battery warning is send via email, if null/not send, the value is not being updated"
        },
        "dismissedLiftUpHandleWarning": {
          "type": "array",
          "description": "Contains the account ids which have dismissed the lift up handle warning, if null/not send, the value is not being updated. To clear send a empty array []",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "SmartlockAction": {
      "type": "object",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32",
          "description": "The action: type=0/3/4: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock 'n' go, 5 .. lock 'n' go with unlatch; type=1: 1 .. unlock; type=2: 1 activate ring to open, 2 .. deactivate ring to open, 3 .. open (electric strike actuation), 6 ... activate continuous mode, 7 ... deactivate continuous mode",
          "minimum": 0,
          "maximum": 7
        },
        "option": {
          "type": "integer",
          "format": "int32",
          "description": "The option mask: 0 .. none, 2 .. force, 4 .. full lock",
          "minimum": 0,
          "maximum": 7
        }
      }
    },
    "SmartlockAdminPinUpdate": {
      "type": "object",
      "required": [
        "adminPin"
      ],
      "properties": {
        "adminPin": {
          "type": "integer",
          "format": "int32",
          "description": "The admin pin",
          "minimum": 0,
          "maximum": 9999
        }
      }
    },
    "SmartlockAuth": {
      "type": "object",
      "required": [
        "enabled",
        "id",
        "lockCount",
        "name",
        "remoteAllowed",
        "smartlockId",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id for the smartlock authorization"
        },
        "smartlockId": {
          "type": "integer",
          "format": "int64",
          "description": "The smartlock id"
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user"
        },
        "authId": {
          "type": "integer",
          "format": "int32",
          "description": "The smartlock authorization id"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The keypad code (only for type keypad)"
        },
        "fingerprints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the authorization: 0 .. app, 1 .. bridge, 2 .. fob, 3 .. keypad, 13 .. keypad code, 14 .. z-key, 15 .. virtual",
          "readOnly": true,
          "minimum": 0,
          "maximum": 2
        },
        "name": {
          "type": "string",
          "description": "The name of the authorization (max 32 chars)"
        },
        "enabled": {
          "type": "boolean",
          "description": "True if the auth is enabled"
        },
        "remoteAllowed": {
          "type": "boolean",
          "description": "True if the auth has remote access"
        },
        "lockCount": {
          "type": "integer",
          "format": "int32",
          "description": "The lock count"
        },
        "allowedFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed from date"
        },
        "allowedUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed until date"
        },
        "allowedWeekDays": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday",
          "minimum": 0,
          "maximum": 127
        },
        "allowedFromTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed from time (in minutes from midnight)"
        },
        "allowedUntilTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed until time (in minutes from midnight)"
        },
        "lastActiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last active date"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The update date"
        },
        "operationId": {
          "description": "The operation id - if set the auth is locked for another operations.",
          "readOnly": true,
          "$ref": "#/definitions/ObjectId"
        },
        "error": {
          "type": "string",
          "description": "In case of any error, it contains the error message"
        },
        "authTypeAsString": {
          "type": "string"
        }
      }
    },
    "SmartlockAuthCreate": {
      "type": "object",
      "required": [
        "name",
        "remoteAllowed"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the authorization (max 32 chars)"
        },
        "allowedFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed from date"
        },
        "allowedUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed until date"
        },
        "allowedWeekDays": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday",
          "minimum": 0,
          "maximum": 127
        },
        "allowedFromTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed from time (in minutes from midnight)"
        },
        "allowedUntilTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed until time (in minutes from midnight)"
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user (required if type is NOT 13 .. keypad)"
        },
        "remoteAllowed": {
          "type": "boolean",
          "description": "True if the auth has remote access"
        },
        "smartActionsEnabled": {
          "type": "boolean",
          "description": "The smart actions enabled flag"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The optional type of the auth 0 .. app (default), 2 .. fob, 13 .. keypad"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The code of the keypad authorization (only for keypad)"
        }
      }
    },
    "SmartlockAuthMultiUpdate": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the authorization (max 32 chars)"
        },
        "allowedFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed from date"
        },
        "allowedUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed until date"
        },
        "allowedWeekDays": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday",
          "minimum": 0,
          "maximum": 127
        },
        "allowedFromTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed from time (in minutes from midnight)"
        },
        "allowedUntilTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed until time (in minutes from midnight)"
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user"
        },
        "enabled": {
          "type": "boolean",
          "description": "True if the auth is enabled"
        },
        "remoteAllowed": {
          "type": "boolean",
          "description": "True if the auth has remote access"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The code of the keypad authorization (only for keypad)"
        },
        "id": {
          "type": "string",
          "description": "The unique id for the smartlock authorization"
        }
      }
    },
    "SmartlockAuthUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the authorization (max 32 chars)"
        },
        "allowedFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed from date"
        },
        "allowedUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed until date"
        },
        "allowedWeekDays": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday",
          "minimum": 0,
          "maximum": 127
        },
        "allowedFromTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed from time (in minutes from midnight)"
        },
        "allowedUntilTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed until time (in minutes from midnight)"
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user"
        },
        "enabled": {
          "type": "boolean",
          "description": "True if the auth is enabled"
        },
        "remoteAllowed": {
          "type": "boolean",
          "description": "True if the auth has remote access"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The code of the keypad authorization (only for keypad)"
        }
      }
    },
    "SmartlockLog": {
      "type": "object",
      "required": [
        "action",
        "autoUnlock",
        "date",
        "deviceType",
        "id",
        "name",
        "smartlockId",
        "state",
        "trigger"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id for the smartlock log"
        },
        "smartlockId": {
          "type": "integer",
          "format": "int64",
          "description": "The smartlock id"
        },
        "deviceType": {
          "type": "integer",
          "format": "int32",
          "description": "The device type: 0 .. smartlock and box, 2 .. opener, 3 .. smartdoor",
          "enum": [
            0,
            2,
            3
          ]
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user"
        },
        "authId": {
          "type": "string",
          "description": "The id of the linked smartlock auth"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "action": {
          "type": "integer",
          "format": "int32",
          "description": "The action: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock'n'go, 5 .. lock'n'go with unlatch, 208 .. door warning ajar, 209 door warning status mismatch, 224 .. doorbell recognition (only Opener), 240 .. door opened, 241 .. door closed, 242 .. door sensor jammed, 243 .. firmware update, 250 .. door log enabled, 251 .. door log disabled, 252 .. initialization, 253 .. calibration, 254 .. log enabled, 255 .. log disabled",
          "minimum": 1,
          "maximum": 255
        },
        "trigger": {
          "type": "integer",
          "format": "int32",
          "description": "The trigger: 0 .. system, 1 .. manual, 2 .. button, 3 .. automatic, 4 .. web, 5 .. app, 6 .. auto lock, 7 .. accessory, 255 .. keypad",
          "minimum": 0,
          "maximum": 255
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "description": "The completion state: 0 .. Success, 1 .. Motor blocked, 2 .. Canceled, 3 .. Too recent, 4 .. Busy, 5 .. Low motor voltage, 6 .. Clutch failure, 7 .. Motor power failure, 8 .. Incomplete, 9 .. Rejected, 10 .. Rejected night mode, 254 .. Other error, 255 .. Unknown error",
          "minimum": 1,
          "maximum": 255
        },
        "autoUnlock": {
          "type": "boolean",
          "description": "True if it was an auto unlock"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The log date"
        },
        "openerLog": {
          "description": "The opener specific log",
          "$ref": "#/definitions/SmartlockLog.OpenerLog"
        },
        "ajarTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "The door sensor warning ajar timeout (in minutes, only for action = 208)"
        },
        "source": {
          "type": "integer",
          "format": "int32",
          "description": "The source of action: 1 .. Keypad code, 2 .. Fingerprint, 0 .. Default"
        },
        "error": {
          "type": "string",
          "description": "In case of any error, it contains the error message"
        }
      }
    },
    "SmartlockLog.OpenerLog": {
      "type": "object",
      "required": [
        "activeCm",
        "activeRto",
        "flagDoorbellSuppression",
        "flagForce",
        "flagGeoFence",
        "source"
      ],
      "properties": {
        "activeCm": {
          "type": "boolean",
          "description": "Flag indicating if continuous mode was active"
        },
        "activeRto": {
          "type": "boolean",
          "description": "Flag indicating if ring to open was active"
        },
        "source": {
          "type": "integer",
          "format": "int32",
          "description": "The cause of the activation of ring to open or continuous mode: 0 .. doorbell, 1 .. timecontrol, 2 .. app, 3 .. button, 4 .. fob, 5 .. bridge, 6 .. keypad",
          "minimum": 0,
          "maximum": 6
        },
        "flagGeoFence": {
          "type": "boolean",
          "description": "Flag indicating a geo fence induced action"
        },
        "flagForce": {
          "type": "boolean",
          "description": "Flag indicating a force induced action"
        },
        "flagDoorbellSuppression": {
          "type": "boolean",
          "description": "Flag indicating if doorbell suppression was active"
        }
      }
    },
    "SmartlockUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new name of the smartlock"
        },
        "favorite": {
          "type": "boolean",
          "description": "True if the smartlock is favorite"
        }
      }
    },
    "SmartlocksAuthAdvancedCreate": {
      "type": "object",
      "required": [
        "accountUserId",
        "name",
        "remoteAllowed",
        "smartlockIds"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the authorization (max 32 chars)"
        },
        "allowedFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed from date"
        },
        "allowedUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed until date"
        },
        "allowedWeekDays": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday",
          "minimum": 0,
          "maximum": 127
        },
        "allowedFromTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed from time (in minutes from midnight)"
        },
        "allowedUntilTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed until time (in minutes from midnight)"
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user"
        },
        "smartlockIds": {
          "type": "array",
          "description": "The list of smartlock ids",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "remoteAllowed": {
          "type": "boolean",
          "description": "True if the auth has remote access"
        },
        "smartActionsEnabled": {
          "type": "boolean",
          "description": "The smart actions enabled flag"
        }
      }
    },
    "SmartlocksAuthCreate": {
      "type": "object",
      "required": [
        "name",
        "remoteAllowed"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the authorization (max 32 chars)"
        },
        "allowedFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed from date"
        },
        "allowedUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "The allowed until date"
        },
        "allowedWeekDays": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday",
          "minimum": 0,
          "maximum": 127
        },
        "allowedFromTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed from time (in minutes from midnight)"
        },
        "allowedUntilTime": {
          "type": "integer",
          "format": "int32",
          "description": "The allowed until time (in minutes from midnight)"
        },
        "accountUserId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the linked account user (required if type is NOT 13 .. keypad)"
        },
        "smartlockIds": {
          "type": "array",
          "description": "The list of smartlock ids",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "remoteAllowed": {
          "type": "boolean",
          "description": "True if the auth has remote access"
        },
        "smartActionsEnabled": {
          "type": "boolean",
          "description": "The smart actions enabled flag"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The optional type of the auth 0 .. app (default), 2 .. fob, 13 .. keypad"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The code of the keypad authorization (only for keypad)"
        }
      }
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "StaleDevice": {
      "type": "object",
      "properties": {
        "smartlockId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "read": {
          "type": "boolean"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "reasonPhrase": {
          "type": "string"
        },
        "throwable": {
          "$ref": "#/definitions/Throwable"
        },
        "uri": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "serverError": {
          "type": "boolean"
        },
        "connectorError": {
          "type": "boolean"
        },
        "clientError": {
          "type": "boolean"
        },
        "globalError": {
          "type": "boolean"
        },
        "informational": {
          "type": "boolean"
        },
        "redirection": {
          "type": "boolean"
        },
        "recoverableError": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        }
      }
    },
    "StatusService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "connegService": {
          "$ref": "#/definitions/ConnegService"
        },
        "contactEmail": {
          "type": "string"
        },
        "converterService": {
          "$ref": "#/definitions/ConverterService"
        },
        "homeRef": {
          "$ref": "#/definitions/Reference"
        },
        "metadataService": {
          "$ref": "#/definitions/MetadataService"
        },
        "overwriting": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "available",
        "descriptions",
        "length",
        "price",
        "quantity",
        "subscriptionId",
        "titles"
      ],
      "properties": {
        "subscriptionId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique subscription id"
        },
        "titles": {
          "type": "object",
          "example": "{ de: '', en: ''}",
          "description": "The title per language",
          "additionalProperties": {
            "type": "string"
          }
        },
        "descriptions": {
          "type": "object",
          "example": "{ de: '', en: ''}",
          "description": "The description per language",
          "additionalProperties": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The quantity of authorizations"
        },
        "length": {
          "type": "string",
          "example": "30d",
          "description": "The length with number and unit (e.g. 30d, 2y)"
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "The price"
        },
        "giftArticle": {
          "type": "string",
          "description": "The optional gift article"
        },
        "available": {
          "type": "boolean",
          "description": "True if the subscription is available for new users"
        },
        "updateDate": {
          "type": "integer",
          "format": "int64",
          "description": "The update date"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "weak": {
          "type": "boolean"
        }
      }
    },
    "TaskService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "corePoolSize": {
          "type": "integer",
          "format": "int32"
        },
        "daemon": {
          "type": "boolean"
        },
        "shutdownAllowed": {
          "type": "boolean"
        },
        "terminated": {
          "type": "boolean"
        },
        "shutdown": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "TermsOfUse": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "Accepted",
            "Inactive"
          ]
        },
        "publishDate": {
          "type": "string",
          "format": "date-time"
        },
        "acceptanceDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "TunnelService": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "enabled": {
          "type": "boolean"
        },
        "started": {
          "type": "boolean"
        },
        "characterSetParameter": {
          "type": "string"
        },
        "encodingParameter": {
          "type": "string"
        },
        "extensionsTunnel": {
          "type": "boolean"
        },
        "headersTunnel": {
          "type": "boolean"
        },
        "languageParameter": {
          "type": "string"
        },
        "mediaTypeParameter": {
          "type": "string"
        },
        "methodHeader": {
          "type": "string"
        },
        "methodParameter": {
          "type": "string"
        },
        "methodTunnel": {
          "type": "boolean"
        },
        "preferencesTunnel": {
          "type": "boolean"
        },
        "queryTunnel": {
          "type": "boolean"
        },
        "userAgentTunnel": {
          "type": "boolean"
        },
        "stopped": {
          "type": "boolean"
        }
      }
    },
    "Uniform": {
      "type": "object"
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "secret": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Variant": {
      "type": "object",
      "properties": {
        "characterSet": {
          "$ref": "#/definitions/CharacterSet"
        },
        "encodings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Encoding"
          }
        },
        "locationRef": {
          "$ref": "#/definitions/Reference"
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Language"
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        }
      }
    },
    "Verifier": {
      "type": "object"
    },
    "WakeupListener": {
      "type": "object"
    },
    "Warning": {
      "type": "object",
      "properties": {
        "agent": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "WebConfigRequest": {
      "type": "object",
      "properties": {
        "smartlockId": {
          "type": "integer",
          "format": "int64"
        },
        "webConfig": {
          "$ref": "#/definitions/Smartlock.WebConfig"
        }
      }
    },
    "WebhookLog": {
      "type": "object",
      "required": [
        "accountId",
        "apiKeyId",
        "created",
        "id",
        "updated"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The WebhookLog id"
        },
        "requestId": {
          "type": "string",
          "description": "Request id, set when api-triggered request otherwise empty"
        },
        "succeeded": {
          "type": "boolean",
          "description": "If the webhooks sends the data successfully"
        },
        "responseStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Http Status code of the webhook response"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "The duration of the webhook in milli seconds"
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "The account id"
        },
        "request": {
          "description": "Only set if webhook triggered by user",
          "$ref": "#/definitions/WebhookMessage"
        },
        "response": {
          "description": "Set if webhook sent",
          "$ref": "#/definitions/WebhookMessage"
        },
        "apiKeyId": {
          "type": "integer",
          "format": "int32",
          "description": "Used Api Key for the webhook"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "last updated time"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation Date"
        }
      }
    },
    "WebhookMessage": {
      "type": "object",
      "required": [
        "headers",
        "path"
      ],
      "properties": {
        "headers": {
          "type": "object",
          "description": "Http Headers as key value pairs",
          "additionalProperties": {
            "type": "string"
          }
        },
        "body": {
          "type": "object",
          "description": "Http Body as Json",
          "additionalProperties": {
            "type": "object"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the message was created"
        },
        "path": {
          "type": "string",
          "description": "Path of the message"
        }
      }
    }
  },
  "info": {
    "description": "The Nuki Web Api",
    "version": "2.80.1",
    "title": "Nuki API",
    "termsOfService": "https://nuki.io/en/service/nukis-terms-of-use-apis/",
    "contact": {
      "name": "Nuki",
      "url": "https://nuki.io",
      "email": "contact@nuki.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get an account",
        "description": "",
        "operationId": "AccountsResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MyAccount"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update an account",
        "description": "",
        "operationId": "AccountsResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountUpdate"
            }
          },
          {
            "name": "deleteApiTokens",
            "in": "query",
            "description": "If false existing API tokens are not deleted if the password is changed",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid E-Mail address or name supplied"
          },
          "401": {
            "description": "Not authorized"
          },
          "409": {
            "description": "E-Mail address already exists"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an account",
        "description": "",
        "operationId": "AccountsResource_delete_delete",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/email/change": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Triggers the email change verification email",
        "description": "",
        "operationId": "AccountEmailChangeResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account email change representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountEmailChange"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Email not in valid format"
          },
          "401": {
            "description": "Not authorized"
          },
          "409": {
            "description": "Other account is already using the email"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/email/verify": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Triggers the email change verification email",
        "description": "",
        "operationId": "AccountEmailVerifyResource_post_post",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Email not in valid format"
          },
          "401": {
            "description": "Not authorized"
          },
          "409": {
            "description": "Other account is already using the email"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/integration": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all integrations for this account",
        "description": "",
        "operationId": "AccountIntegrationsResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountIntegration"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an integration",
        "description": "",
        "operationId": "AccountIntegrationsResource_delete_delete",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "query",
            "description": "The api key id to delete (this also removes all tokens if no specific tokenId is given)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "tokenId",
            "in": "query",
            "description": "The token id if a specific token has to be deleted but not the full api key",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/otp": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Enables one time password for an account",
        "description": "",
        "operationId": "AccountOtpResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account one time password enable representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountOtpEnable"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "One time password empty"
          },
          "401": {
            "description": "Not authorized or one time password wrong"
          },
          "429": {
            "description": "Too many failed attempts"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create an one time password secret",
        "description": "",
        "operationId": "AccountOtpResource_put_put",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string"
            }
          },
          "405": {
            "description": "One time password is already enabled"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Disables one time password for an account",
        "description": "",
        "operationId": "AccountOtpResource_delete_delete",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/password/reset": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Reset account password",
        "description": "",
        "operationId": "AccountPasswordResetResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account password reset representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPasswordReset"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/account/setting": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account setting",
        "description": "",
        "operationId": "AccountSettingResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountSetting"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create or update account setting",
        "description": "",
        "operationId": "AccountSettingResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account setting representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountSetting"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an account setting",
        "description": "",
        "operationId": "AccountSettingResource_delete_delete",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/sub": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get an list of sub accounts",
        "description": "",
        "operationId": "AccountSubsResource_get_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The optional email (regex)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create an sub account",
        "description": "",
        "operationId": "AccountSubsResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account sub create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSubCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/MyAccount"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/sub/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get an sub account",
        "description": "",
        "operationId": "AccountSubResource_get_get",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update an sub account",
        "description": "",
        "operationId": "AccountSubResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSubUpdate"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "401": {
            "description": "Not authorized"
          },
          "409": {
            "description": "E-Mail address already exists"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an sub account",
        "description": "",
        "operationId": "AccountSubResource_delete_delete",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/subscription/pay": {
      "post": {
        "tags": [
          "AccountSubscription"
        ],
        "summary": "Starts a payment for an account and returns a payment url",
        "description": "",
        "operationId": "AccountSubscriptionPayResource_post_post",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/subscription/{id}/activate": {
      "post": {
        "tags": [
          "AccountSubscription"
        ],
        "summary": "Activates a previously terminated subscription",
        "description": "",
        "operationId": "AccountSubscriptionActivateResource_post_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The account subscription unique id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/subscription/{id}/terminate": {
      "post": {
        "tags": [
          "AccountSubscription"
        ],
        "summary": "Terminates a running subscription",
        "description": "",
        "operationId": "AccountSubscriptionTerminateResource_post_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The account subscription unique id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/account/user": {
      "get": {
        "tags": [
          "AccountUser"
        ],
        "summary": "Get an list of account users",
        "description": "",
        "operationId": "AccountUsersResource_get_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Filter for email",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first user in the collection to return",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of users to return. If the value exceeds the maximum, then the maximum value will be used.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountUser"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account",
              "smartlock.auth"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "AccountUser"
        ],
        "summary": "Create an account user",
        "description": "",
        "operationId": "AccountUsersResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account sub create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountUserCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "400": {
            "description": "Invalid E-Mail address or name supplied"
          }
        },
        "security": [
          {
            "oauth": [
              "account",
              "smartlock.auth"
            ]
          }
        ]
      }
    },
    "/account/user/{accountUserId}": {
      "get": {
        "tags": [
          "AccountUser"
        ],
        "summary": "Get an account user",
        "description": "",
        "operationId": "AccountUserResource_get_get",
        "parameters": [
          {
            "name": "accountUserId",
            "in": "path",
            "description": "The account user id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account",
              "smartlock.auth"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "AccountUser"
        ],
        "summary": "Update an account user",
        "description": "",
        "operationId": "AccountUserResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountUserUpdate"
            }
          },
          {
            "name": "accountUserId",
            "in": "path",
            "description": "The account user id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid E-Mail address or name supplied"
          },
          "401": {
            "description": "Not authorized"
          },
          "409": {
            "description": "E-Mail address already exists"
          }
        },
        "security": [
          {
            "oauth": [
              "account",
              "smartlock.auth"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AccountUser"
        ],
        "summary": "Deletes asynchronous an account user",
        "description": "",
        "operationId": "AccountUserResource_delete_delete",
        "parameters": [
          {
            "name": "accountUserId",
            "in": "path",
            "description": "The account user id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "account",
              "smartlock.auth"
            ]
          }
        ]
      }
    },
    "/address": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get a list of addresses",
        "description": "",
        "operationId": "AddressesResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Address"
        ],
        "summary": "Create an address",
        "description": "",
        "operationId": "AddressesResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Address create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/address/token/{id}": {
      "get": {
        "tags": [
          "AddressToken"
        ],
        "summary": "Gives some info about address token",
        "description": "",
        "operationId": "AddressTokenResource_get_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The token id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AddressTokenInfo"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Token not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/address/token/{id}/redeem": {
      "get": {
        "tags": [
          "AddressToken"
        ],
        "summary": "Gives an redeemed address token",
        "description": "",
        "operationId": "AddressTokenRedeemResource_get_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The token id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AddressToken"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Token not found"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "AddressToken"
        ],
        "summary": "Redeems an address token",
        "description": "",
        "operationId": "AddressTokenRedeemResource_post_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The token id",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "If false no email will be send",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid parameter given"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Token not found"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/address/{addressId}": {
      "post": {
        "tags": [
          "Address"
        ],
        "summary": "Update an address",
        "description": "",
        "operationId": "AddressResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Address update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressUpdate"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Address"
        ],
        "summary": "Delete an address",
        "description": "",
        "operationId": "AddressResource_delete_delete",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/address/{addressId}/reservation": {
      "get": {
        "tags": [
          "AddressReservation"
        ],
        "summary": "Get a list of address reservations",
        "description": "",
        "operationId": "AddressReservationsResource_get_get",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressReservation"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/address/{addressId}/reservation/{id}/issue": {
      "post": {
        "tags": [
          "AddressReservation"
        ],
        "summary": "Issues authorizations for an address reservation",
        "description": "",
        "operationId": "AddressReservationIssueResource_post_post",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The address reservation id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/address/{addressId}/reservation/{id}/revoke": {
      "post": {
        "tags": [
          "AddressReservation"
        ],
        "summary": "Revoke authorizations for an address reservation",
        "description": "",
        "operationId": "AddressReservationRevokeResource_post_post",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The address reservation id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/address/{addressId}/reservation/{id}/update/accesstimes": {
      "post": {
        "tags": [
          "AddressReservation"
        ],
        "summary": "Update access times of a reservation",
        "description": "",
        "operationId": "ReservationAccessTimesUpdateResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reservation access times update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReservationAccessTimesUpdate"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The reservation id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/address/{addressId}/token": {
      "get": {
        "tags": [
          "AddressToken"
        ],
        "summary": "Get a list of address tokens",
        "description": "",
        "operationId": "AddressTokensResource_get_get",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressToken"
              }
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/address/{addressId}/unit": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get a list of address units",
        "description": "",
        "operationId": "AddressUnitsResource_get_get",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressUnitResponse"
              }
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Address"
        ],
        "summary": "Create an address unit",
        "description": "",
        "operationId": "AddressUnitsResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Address unit representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressUnit"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AddressUnitResponse"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Address"
        ],
        "summary": "Deletes address units asynchronously",
        "description": "",
        "operationId": "AddressUnitsResource_delete_delete",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Address unit IDs to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AdvancedConfirmationResponse"
            }
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/address/{addressId}/unit/{id}": {
      "delete": {
        "tags": [
          "Address"
        ],
        "summary": "Delete an address unit",
        "description": "",
        "operationId": "AddressUnitResource_delete_delete",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "The address id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The address unit id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AdvancedConfirmationResponse"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/decentralWebhook": {
      "get": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Get all registered decentral webhooks",
        "description": "",
        "operationId": "DecentralWebhooksResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DecentralWebhook"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "webhook.decentral"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Create decentral webhook",
        "description": "",
        "operationId": "DecentralWebhooksResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Decentral webhook representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DecentralWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecentralWebhook"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "webhook.decentral"
            ]
          }
        ]
      }
    },
    "/api/decentralWebhook/{id}": {
      "delete": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Unregister a decentral webhook",
        "description": "",
        "operationId": "DecentralWebhookResource_delete_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the decentral webhook",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "webhook.decentral"
            ]
          }
        ]
      }
    },
    "/api/key": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Get a list of api keys",
        "description": "",
        "operationId": "ApiKeysResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKey"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Create an api key",
        "description": "",
        "operationId": "ApiKeysResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Api key create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/key/{apiKeyId}": {
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Update an api key",
        "description": "",
        "operationId": "ApiKeyResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Api key update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyUpdate"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid parameter given"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Delete an api key",
        "description": "",
        "operationId": "ApiKeyResource_delete_delete",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/key/{apiKeyId}/advanced": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Get an advanced api key",
        "description": "",
        "operationId": "ApiKeyAdvancedResource_get_get",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AdvancedApiKey"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Update an advanced api key",
        "description": "",
        "operationId": "ApiKeyAdvancedResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update for advaced api key representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdvancedApiKeyUpdate"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Create an advanced api key",
        "description": "",
        "operationId": "ApiKeyAdvancedResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Apply for advaced api key representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdvancedApiKeyCreate"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Delete an advanced api key",
        "description": "",
        "operationId": "ApiKeyAdvancedResource_delete_delete",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/key/{apiKeyId}/advanced/reactivate": {
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Reactivates a deactivated advanced webhook integration",
        "description": "",
        "operationId": "ApiKeyAdvancedReactivateResource_post_post",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/key/{apiKeyId}/token": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Get a list of api key tokens",
        "description": "",
        "operationId": "ApiKeyTokensResource_get_get",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKeyToken"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Create an api key token",
        "description": "",
        "operationId": "ApiKeyTokensResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Api key token create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyTokenCreate"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiKeyToken"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/key/{apiKeyId}/token/{id}": {
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Update an api key token",
        "description": "",
        "operationId": "ApiKeyTokenResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Api key token update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyTokenUpdate"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The api key token id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid parameter given"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Delete an api key token",
        "description": "",
        "operationId": "ApiKeyTokenResource_delete_delete",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The api key token id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/api/key/{apiKeyId}/webhook/logs": {
      "get": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Get a list of webhook logs (descending)",
        "description": "",
        "operationId": "WebhookLogsResource_get_get",
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "The api key id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Optionally filter for older logs",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of logs (max: 100)",
            "required": false,
            "type": "integer",
            "default": 50
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookLog"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/app/account/subscription": {
      "get": {
        "tags": [
          "AccountSubscription"
        ],
        "summary": "Get a list of account subscriptions",
        "description": "",
        "operationId": "AccountSubscriptionsResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSubscription"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/bulk-web-config": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates the web config for a group of smartlocks",
        "description": "",
        "operationId": "SmartlockBulkWebConfigResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlocks web config update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkWebConfigRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/company": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get an list of companies",
        "description": "",
        "operationId": "CompaniesResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Not allowed"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/metrics": {
      "get": {
        "operationId": "PrometheusResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Representation"
            }
          }
        }
      }
    },
    "/notification": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get all notifications attached to your account",
        "description": "",
        "operationId": "NotificationsResource_get_get",
        "parameters": [
          {
            "name": "referenceId",
            "in": "query",
            "description": "The reference ID to the third party system",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Notification"
        ],
        "summary": "Create a notification configuration",
        "description": "",
        "operationId": "NotificationsResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Notification representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      }
    },
    "/notification/{notificationId}": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get a notification configuration",
        "description": "",
        "operationId": "NotificationResource_get_get",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "The unique notification ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Update a notification configuration",
        "description": "",
        "operationId": "NotificationResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Notification update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "The unique notification ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Invalid parameter given"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Notification"
        ],
        "summary": "Delete a notification configuration",
        "description": "",
        "operationId": "NotificationResource_delete_delete",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "The unique notification ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      }
    },
    "/opener/brand": {
      "get": {
        "tags": [
          "Opener"
        ],
        "summary": "Get all intercom brands",
        "description": "",
        "operationId": "OpenerBrandsResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenerIntercomBrand"
              }
            }
          }
        }
      }
    },
    "/opener/brand/{brandId}": {
      "get": {
        "tags": [
          "Opener"
        ],
        "summary": "Get an intercom brand",
        "description": "",
        "operationId": "OpenerBrandResource_get_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The brand ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OpenerIntercomBrand"
            }
          }
        }
      }
    },
    "/opener/intercom": {
      "get": {
        "tags": [
          "Opener"
        ],
        "summary": "Get a list of intercom models",
        "description": "",
        "operationId": "OpenerIntercomsResource_get_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "description": "Filter for brandId. Required if 'recentlyChanged' is not set",
            "required": false,
            "type": "integer"
          },
          {
            "name": "ignoreVerified",
            "in": "query",
            "description": "If true, return intercoms ignoring their verified value",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "recentlyChanged",
            "in": "query",
            "description": "If true, return all intercoms which recently were updated",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenerIntercomModel"
              }
            }
          }
        }
      }
    },
    "/opener/intercom/{intercomId}": {
      "get": {
        "tags": [
          "Opener"
        ],
        "summary": "Get an intercom model",
        "description": "",
        "operationId": "OpenerIntercomResource_get_get",
        "parameters": [
          {
            "name": "intercomId",
            "in": "path",
            "description": "The intercom ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OpenerIntercomModel"
            }
          }
        }
      }
    },
    "/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get a list of services",
        "description": "",
        "operationId": "ServicesResource_get_get",
        "parameters": [
          {
            "name": "serviceIds",
            "in": "query",
            "description": "Filter for service IDs (comma-separated eg: airbnb,guesty,smoobu)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Service"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/service/{serviceId}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get a service",
        "description": "",
        "operationId": "ServiceResource_get_get",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/service/{serviceId}/link": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Links a service",
        "description": "",
        "operationId": "ServiceLinkResource_post_post",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/service/{serviceId}/sync": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Syncs a service",
        "description": "",
        "operationId": "ServiceSyncResource_post_post",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/service/{serviceId}/unlink": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Unlinks a service",
        "description": "",
        "operationId": "ServiceUnlinkResource_post_post",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/smartlock": {
      "get": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Get a list of smartlocks",
        "description": "",
        "operationId": "SmartlocksResource_get_get",
        "parameters": [
          {
            "name": "authId",
            "in": "query",
            "description": "Filter for authId",
            "required": false,
            "type": "integer"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter for type",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Smartlock"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock",
              "smartlock.readOnly"
            ]
          }
        ]
      }
    },
    "/smartlock/auth": {
      "get": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Get a list of smartlock authorizations for your smartlocks",
        "description": "",
        "operationId": "SmartlocksAuthsResource_get_get",
        "parameters": [
          {
            "name": "accountUserId",
            "in": "query",
            "description": "Filter for account users:  set to a positive number will filter for authorizations with this specific accountUserId, set to a negative number will filter without set accountUserId",
            "required": false,
            "type": "integer"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Filter for authorization's types (comma-separated eg: 0,2,3)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartlockAuth"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Updates smartlock authorizations asynchronously",
        "description": "",
        "operationId": "SmartlocksAuthsResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock authorization update representations",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartlockAuthMultiUpdate"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Parameter conflicts"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Creates asynchronous smartlock authorizations",
        "description": "",
        "operationId": "SmartlocksAuthsResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock authorization create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlocksAuthCreate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "402": {
            "description": "Account not payed"
          },
          "409": {
            "description": "Parameter conflicts"
          },
          "426": {
            "description": "Account upgrade required"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Deletes smartlock authorizations asynchronously",
        "description": "",
        "operationId": "SmartlocksAuthsResource_delete_delete",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock authorization IDs to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      }
    },
    "/smartlock/auth/advanced": {
      "put": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Creates asynchronous smartlock authorizations",
        "description": "",
        "operationId": "SmartlockAuthsAdvancedResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock authorization create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlocksAuthAdvancedCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AdvancedConfirmationResponse"
            }
          },
          "400": {
            "description": "Bad parameter"
          },
          "402": {
            "description": "Account not payed"
          },
          "409": {
            "description": "Parameter conflicts"
          },
          "426": {
            "description": "Account upgrade required"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      }
    },
    "/smartlock/log": {
      "get": {
        "tags": [
          "SmartlockLog"
        ],
        "summary": "Get a list of smartlock logs for all of your smartlocks",
        "description": "",
        "operationId": "SmartlocksLogsResource_get_get",
        "parameters": [
          {
            "name": "accountUserId",
            "in": "query",
            "description": "Filter for account users",
            "required": false,
            "type": "integer"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter for date (RFC3339)",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter for date (RFC3339)",
            "required": false,
            "type": "string"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter for action",
            "required": false,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter for older logs",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of logs (max: 50)",
            "required": false,
            "type": "integer",
            "default": 20
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartlockLog"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}": {
      "get": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Get a smartlock",
        "description": "",
        "operationId": "SmartlockResource_get_get",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Smartlock"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock",
              "smartlock.readOnly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Update a smartlock",
        "description": "",
        "operationId": "SmartlockResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlockUpdate"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid parameter given"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Delete a smartlock",
        "description": "",
        "operationId": "SmartlockResource_delete_delete",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/action": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Lock & unlock a smartlock with options",
        "description": "",
        "operationId": "SmartlockActionResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock action representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlockAction"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "402": {
            "description": "Account not payed"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/action/advanced": {
      "post": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Smartlock Action with Callback",
        "description": "",
        "operationId": "SmartlockActionAdvancedResource_action_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock action representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlockAction"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AdvancedConfirmationResponse"
            }
          },
          "400": {
            "description": "Bad parameter"
          },
          "402": {
            "description": "Account not payed"
          },
          "409": {
            "description": "Parameter conflicts"
          },
          "426": {
            "description": "Account upgrade required"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/action/lock": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Lock a smartlock",
        "description": "",
        "operationId": "SmartlockLockActionResource_postLock_post",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/action/lock/advanced": {
      "post": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Lock a smartlock",
        "description": "",
        "operationId": "SmartlockLockActionAdvancedResource_postLock_post",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AdvancedConfirmationResponse"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/action/unlock": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Unlock a smartlock",
        "description": "",
        "operationId": "SmartlockUnlockActionResource_postUnlock_post",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/action/unlock/advanced": {
      "post": {
        "tags": [
          "AdvancedApi"
        ],
        "summary": "Unlock a smartlock",
        "description": "",
        "operationId": "SmartlockUnlockActionAdvancedResource_postLock_post",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/AdvancedConfirmationResponse"
            }
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/admin/pin": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates a smartlock admin pin",
        "description": "",
        "operationId": "SmartlockAdminPinResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock admin pin update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlockAdminPinUpdate"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/advanced/config": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates a smartlock advanced config",
        "description": "",
        "operationId": "SmartlockAdvancedConfigResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock config update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Smartlock.AdvancedConfig"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/advanced/openerconfig": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates an opener advanced config",
        "description": "",
        "operationId": "SmartlockOpenerAdvancedConfigResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Opener advanced config update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Smartlock.OpenerAdvancedConfig"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock (opener) id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/advanced/smartdoorconfig": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates a smartdoor advanced config",
        "description": "",
        "operationId": "SmartdoorAdvancedConfigResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartdoor advanced config update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Smartlock.SmartdoorAdvancedConfig"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartdoor id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/auth": {
      "get": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Get a list of smartlock authorizations",
        "description": "",
        "operationId": "SmartlockAuthsResource_get_get",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Filter for smartlock authorization's types (comma-separated eg: 0,2,3)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartlockAuth"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Creates asynchronous a smartlock authorization",
        "description": "",
        "operationId": "SmartlockAuthsResource_put_put",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock authorization create representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlockAuthCreate"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "402": {
            "description": "Account not payed"
          },
          "409": {
            "description": "Parameter conflicts"
          },
          "426": {
            "description": "Account upgrade required"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/auth/{id}": {
      "get": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Get a smartlock authorization",
        "description": "",
        "operationId": "SmartlockAuthResource_get_get",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The smartlock auth unique id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SmartlockAuth"
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Updates asynchronous a smartlock authorization",
        "description": "",
        "operationId": "SmartlockAuthResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock authorization update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartlockAuthUpdate"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The smartlock authorization unique id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Parameter conflicts"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SmartlockAuth"
        ],
        "summary": "Deletes asynchronous a smartlock authorization",
        "description": "",
        "operationId": "SmartlockAuthResource_delete_delete",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The smartlock authorization unique id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "423": {
            "description": "Locked"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.auth"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/config": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates a smartlock config",
        "description": "",
        "operationId": "SmartlockConfigResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock config update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Smartlock.Config"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/log": {
      "get": {
        "tags": [
          "SmartlockLog"
        ],
        "summary": "Get a list of smartlock logs",
        "description": "",
        "operationId": "SmartlockLogsResource_get_get",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "authId",
            "in": "query",
            "description": "Filter for auths",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountUserId",
            "in": "query",
            "description": "Filter for account users",
            "required": false,
            "type": "integer"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter for date (RFC3339)",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter for date (RFC3339)",
            "required": false,
            "type": "string"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter for action",
            "required": false,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter for older logs",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of logs (max: 50)",
            "required": false,
            "type": "integer",
            "default": 20
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartlockLog"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.log"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/sync": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Syncs a smartlock",
        "description": "",
        "operationId": "SmartlockSyncResource_post_post",
        "parameters": [
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.action"
            ]
          }
        ]
      }
    },
    "/smartlock/{smartlockId}/web/config": {
      "post": {
        "tags": [
          "Smartlock"
        ],
        "summary": "Updates a smartlock web config",
        "description": "",
        "operationId": "SmartlockWebConfigResource_post_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Smartlock web config update representation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Smartlock.WebConfig"
            }
          },
          {
            "name": "smartlockId",
            "in": "path",
            "description": "The smartlock id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad parameter"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "smartlock.config"
            ]
          }
        ]
      }
    },
    "/subscription": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of subscriptions",
        "description": "",
        "operationId": "SubscriptionsResource_get_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    },
    "/subscription/{subscriptionId}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a subscription",
        "description": "",
        "operationId": "SubscriptionResource_get_get",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The subscription id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "oauth": [
              "account"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "oauth": {
      "type": "oauth2",
      "authorizationUrl": "/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "account": "View and manage your account",
        "notification": "View and manage your notifications",
        "smartlock": "View and manage your smartlocks",
        "smartlock.readOnly": "View your smartlocks",
        "smartlock.action": "Operate your smartlocks",
        "smartlock.auth": "View and manage your smartlock authorizations",
        "smartlock.config": "Manage your smartlock config",
        "smartlock.log": "View your activity logs and get log notifications",
        "smartlock.create": "Create smartlocks"
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "AccountSubscription"
    },
    {
      "name": "AccountUser"
    },
    {
      "name": "Address"
    },
    {
      "name": "AddressReservation"
    },
    {
      "name": "AddressToken"
    },
    {
      "name": "AdvancedApi"
    },
    {
      "name": "ApiKey"
    },
    {
      "name": "Company"
    },
    {
      "name": "Notification"
    },
    {
      "name": "Opener"
    },
    {
      "name": "Service"
    },
    {
      "name": "Smartlock"
    },
    {
      "name": "SmartlockAuth"
    },
    {
      "name": "SmartlockLog"
    },
    {
      "name": "Subscription"
    }
  ]
}
