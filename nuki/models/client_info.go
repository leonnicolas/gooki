// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClientInfo client info
//
// swagger:model ClientInfo
type ClientInfo struct {

	// accepted character sets
	AcceptedCharacterSets []*PreferenceCharacterSet `json:"acceptedCharacterSets"`

	// accepted encodings
	AcceptedEncodings []*PreferenceEncoding `json:"acceptedEncodings"`

	// accepted languages
	AcceptedLanguages []*PreferenceLanguage `json:"acceptedLanguages"`

	// accepted media types
	AcceptedMediaTypes []*PreferenceMediaType `json:"acceptedMediaTypes"`

	// accepted patches
	AcceptedPatches []*PreferenceMediaType `json:"acceptedPatches"`

	// address
	Address string `json:"address,omitempty"`

	// agent
	Agent string `json:"agent,omitempty"`

	// agent attributes
	AgentAttributes map[string]string `json:"agentAttributes,omitempty"`

	// agent name
	AgentName string `json:"agentName,omitempty"`

	// agent products
	AgentProducts []*Product `json:"agentProducts"`

	// agent version
	AgentVersion string `json:"agentVersion,omitempty"`

	// authenticated
	Authenticated bool `json:"authenticated,omitempty"`

	// certificates
	Certificates []*Certificate `json:"certificates"`

	// cipher suite
	CipherSuite string `json:"cipherSuite,omitempty"`

	// expectations
	Expectations []*Expectation `json:"expectations"`

	// forwarded addresses
	ForwardedAddresses []string `json:"forwardedAddresses"`

	// from
	From string `json:"from,omitempty"`

	// main agent product
	MainAgentProduct *Product `json:"mainAgentProduct,omitempty"`

	// port
	Port int32 `json:"port,omitempty"`

	// principals
	Principals []*Principal `json:"principals"`

	// roles
	Roles []*Role `json:"roles"`

	// upstream address
	UpstreamAddress string `json:"upstreamAddress,omitempty"`

	// user
	User *User `json:"user,omitempty"`
}

// Validate validates this client info
func (m *ClientInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptedCharacterSets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptedEncodings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptedLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptedMediaTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptedPatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMainAgentProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientInfo) validateAcceptedCharacterSets(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedCharacterSets) { // not required
		return nil
	}

	for i := 0; i < len(m.AcceptedCharacterSets); i++ {
		if swag.IsZero(m.AcceptedCharacterSets[i]) { // not required
			continue
		}

		if m.AcceptedCharacterSets[i] != nil {
			if err := m.AcceptedCharacterSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedCharacterSets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedCharacterSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateAcceptedEncodings(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedEncodings) { // not required
		return nil
	}

	for i := 0; i < len(m.AcceptedEncodings); i++ {
		if swag.IsZero(m.AcceptedEncodings[i]) { // not required
			continue
		}

		if m.AcceptedEncodings[i] != nil {
			if err := m.AcceptedEncodings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedEncodings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedEncodings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateAcceptedLanguages(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedLanguages) { // not required
		return nil
	}

	for i := 0; i < len(m.AcceptedLanguages); i++ {
		if swag.IsZero(m.AcceptedLanguages[i]) { // not required
			continue
		}

		if m.AcceptedLanguages[i] != nil {
			if err := m.AcceptedLanguages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedLanguages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedLanguages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateAcceptedMediaTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedMediaTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AcceptedMediaTypes); i++ {
		if swag.IsZero(m.AcceptedMediaTypes[i]) { // not required
			continue
		}

		if m.AcceptedMediaTypes[i] != nil {
			if err := m.AcceptedMediaTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedMediaTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedMediaTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateAcceptedPatches(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedPatches) { // not required
		return nil
	}

	for i := 0; i < len(m.AcceptedPatches); i++ {
		if swag.IsZero(m.AcceptedPatches[i]) { // not required
			continue
		}

		if m.AcceptedPatches[i] != nil {
			if err := m.AcceptedPatches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedPatches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedPatches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateAgentProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentProducts) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentProducts); i++ {
		if swag.IsZero(m.AgentProducts[i]) { // not required
			continue
		}

		if m.AgentProducts[i] != nil {
			if err := m.AgentProducts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentProducts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentProducts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateExpectations(formats strfmt.Registry) error {
	if swag.IsZero(m.Expectations) { // not required
		return nil
	}

	for i := 0; i < len(m.Expectations); i++ {
		if swag.IsZero(m.Expectations[i]) { // not required
			continue
		}

		if m.Expectations[i] != nil {
			if err := m.Expectations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expectations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expectations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateMainAgentProduct(formats strfmt.Registry) error {
	if swag.IsZero(m.MainAgentProduct) { // not required
		return nil
	}

	if m.MainAgentProduct != nil {
		if err := m.MainAgentProduct.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mainAgentProduct")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mainAgentProduct")
			}
			return err
		}
	}

	return nil
}

func (m *ClientInfo) validatePrincipals(formats strfmt.Registry) error {
	if swag.IsZero(m.Principals) { // not required
		return nil
	}

	for i := 0; i < len(m.Principals); i++ {
		if swag.IsZero(m.Principals[i]) { // not required
			continue
		}

		if m.Principals[i] != nil {
			if err := m.Principals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("principals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("principals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this client info based on the context it is used
func (m *ClientInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcceptedCharacterSets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptedEncodings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptedLanguages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptedMediaTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptedPatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpectations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMainAgentProduct(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrincipals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientInfo) contextValidateAcceptedCharacterSets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcceptedCharacterSets); i++ {

		if m.AcceptedCharacterSets[i] != nil {

			if swag.IsZero(m.AcceptedCharacterSets[i]) { // not required
				return nil
			}

			if err := m.AcceptedCharacterSets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedCharacterSets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedCharacterSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateAcceptedEncodings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcceptedEncodings); i++ {

		if m.AcceptedEncodings[i] != nil {

			if swag.IsZero(m.AcceptedEncodings[i]) { // not required
				return nil
			}

			if err := m.AcceptedEncodings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedEncodings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedEncodings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateAcceptedLanguages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcceptedLanguages); i++ {

		if m.AcceptedLanguages[i] != nil {

			if swag.IsZero(m.AcceptedLanguages[i]) { // not required
				return nil
			}

			if err := m.AcceptedLanguages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedLanguages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedLanguages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateAcceptedMediaTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcceptedMediaTypes); i++ {

		if m.AcceptedMediaTypes[i] != nil {

			if swag.IsZero(m.AcceptedMediaTypes[i]) { // not required
				return nil
			}

			if err := m.AcceptedMediaTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedMediaTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedMediaTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateAcceptedPatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcceptedPatches); i++ {

		if m.AcceptedPatches[i] != nil {

			if swag.IsZero(m.AcceptedPatches[i]) { // not required
				return nil
			}

			if err := m.AcceptedPatches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedPatches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acceptedPatches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateAgentProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentProducts); i++ {

		if m.AgentProducts[i] != nil {

			if swag.IsZero(m.AgentProducts[i]) { // not required
				return nil
			}

			if err := m.AgentProducts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentProducts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentProducts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {

			if swag.IsZero(m.Certificates[i]) { // not required
				return nil
			}

			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateExpectations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Expectations); i++ {

		if m.Expectations[i] != nil {

			if swag.IsZero(m.Expectations[i]) { // not required
				return nil
			}

			if err := m.Expectations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expectations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expectations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateMainAgentProduct(ctx context.Context, formats strfmt.Registry) error {

	if m.MainAgentProduct != nil {

		if swag.IsZero(m.MainAgentProduct) { // not required
			return nil
		}

		if err := m.MainAgentProduct.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mainAgentProduct")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mainAgentProduct")
			}
			return err
		}
	}

	return nil
}

func (m *ClientInfo) contextValidatePrincipals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Principals); i++ {

		if m.Principals[i] != nil {

			if swag.IsZero(m.Principals[i]) { // not required
				return nil
			}

			if err := m.Principals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("principals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("principals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {

			if swag.IsZero(m.Roles[i]) { // not required
				return nil
			}

			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientInfo) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientInfo) UnmarshalBinary(b []byte) error {
	var res ClientInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
