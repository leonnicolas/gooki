// Code generated by go-swagger; DO NOT EDIT.

package account_subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account subscription API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account subscription API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountSubscriptionActivateResourcePostPost(params *AccountSubscriptionActivateResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionActivateResourcePostPostNoContent, error)

	AccountSubscriptionPayResourcePostPost(params *AccountSubscriptionPayResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionPayResourcePostPostOK, error)

	AccountSubscriptionTerminateResourcePostPost(params *AccountSubscriptionTerminateResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionTerminateResourcePostPostNoContent, error)

	AccountSubscriptionsResourceGetGet(params *AccountSubscriptionsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionsResourceGetGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountSubscriptionActivateResourcePostPost activates a previously terminated subscription
*/
func (a *Client) AccountSubscriptionActivateResourcePostPost(params *AccountSubscriptionActivateResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionActivateResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubscriptionActivateResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubscriptionActivateResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/subscription/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubscriptionActivateResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubscriptionActivateResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubscriptionActivateResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubscriptionPayResourcePostPost starts a payment for an account and returns a payment url
*/
func (a *Client) AccountSubscriptionPayResourcePostPost(params *AccountSubscriptionPayResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionPayResourcePostPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubscriptionPayResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubscriptionPayResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/subscription/pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubscriptionPayResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubscriptionPayResourcePostPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubscriptionPayResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubscriptionTerminateResourcePostPost terminates a running subscription
*/
func (a *Client) AccountSubscriptionTerminateResourcePostPost(params *AccountSubscriptionTerminateResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionTerminateResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubscriptionTerminateResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubscriptionTerminateResource_post_post",
		Method:             "POST",
		PathPattern:        "/account/subscription/{id}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubscriptionTerminateResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubscriptionTerminateResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubscriptionTerminateResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountSubscriptionsResourceGetGet gets a list of account subscriptions
*/
func (a *Client) AccountSubscriptionsResourceGetGet(params *AccountSubscriptionsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AccountSubscriptionsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSubscriptionsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountSubscriptionsResource_get_get",
		Method:             "GET",
		PathPattern:        "/app/account/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountSubscriptionsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountSubscriptionsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccountSubscriptionsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
