// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockLogOpenerLog smartlock log opener log
//
// swagger:model SmartlockLog.OpenerLog
type SmartlockLogOpenerLog struct {

	// Flag indicating if continuous mode was active
	// Required: true
	ActiveCm *bool `json:"activeCm"`

	// Flag indicating if ring to open was active
	// Required: true
	ActiveRto *bool `json:"activeRto"`

	// Flag indicating if doorbell suppression was active
	// Required: true
	FlagDoorbellSuppression *bool `json:"flagDoorbellSuppression"`

	// Flag indicating a force induced action
	// Required: true
	FlagForce *bool `json:"flagForce"`

	// Flag indicating a geo fence induced action
	// Required: true
	FlagGeoFence *bool `json:"flagGeoFence"`

	// The cause of the activation of ring to open or continuous mode: 0 .. doorbell, 1 .. timecontrol, 2 .. app, 3 .. button, 4 .. fob, 5 .. bridge, 6 .. keypad
	// Required: true
	// Maximum: 6
	// Minimum: 0
	Source *int32 `json:"source"`
}

// Validate validates this smartlock log opener log
func (m *SmartlockLogOpenerLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveCm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActiveRto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlagDoorbellSuppression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlagForce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlagGeoFence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockLogOpenerLog) validateActiveCm(formats strfmt.Registry) error {

	if err := validate.Required("activeCm", "body", m.ActiveCm); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockLogOpenerLog) validateActiveRto(formats strfmt.Registry) error {

	if err := validate.Required("activeRto", "body", m.ActiveRto); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockLogOpenerLog) validateFlagDoorbellSuppression(formats strfmt.Registry) error {

	if err := validate.Required("flagDoorbellSuppression", "body", m.FlagDoorbellSuppression); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockLogOpenerLog) validateFlagForce(formats strfmt.Registry) error {

	if err := validate.Required("flagForce", "body", m.FlagForce); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockLogOpenerLog) validateFlagGeoFence(formats strfmt.Registry) error {

	if err := validate.Required("flagGeoFence", "body", m.FlagGeoFence); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockLogOpenerLog) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if err := validate.MinimumInt("source", "body", int64(*m.Source), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source", "body", int64(*m.Source), 6, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this smartlock log opener log based on context it is used
func (m *SmartlockLogOpenerLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockLogOpenerLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockLogOpenerLog) UnmarshalBinary(b []byte) error {
	var res SmartlockLogOpenerLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
