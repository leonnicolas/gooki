// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockAction smartlock action
//
// swagger:model SmartlockAction
type SmartlockAction struct {

	// The action: type=0/3/4: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock 'n' go, 5 .. lock 'n' go with unlatch; type=1: 1 .. unlock; type=2: 1 activate ring to open, 2 .. deactivate ring to open, 3 .. open (electric strike actuation), 6 ... activate continuous mode, 7 ... deactivate continuous mode
	// Required: true
	// Maximum: 7
	// Minimum: 0
	Action *int32 `json:"action"`

	// The option mask: 0 .. none, 2 .. force, 4 .. full lock
	// Maximum: 7
	// Minimum: 0
	Option *int32 `json:"option,omitempty"`
}

// Validate validates this smartlock action
func (m *SmartlockAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockAction) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if err := validate.MinimumInt("action", "body", int64(*m.Action), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("action", "body", int64(*m.Action), 7, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAction) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.Option) { // not required
		return nil
	}

	if err := validate.MinimumInt("option", "body", int64(*m.Option), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("option", "body", int64(*m.Option), 7, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this smartlock action based on context it is used
func (m *SmartlockAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockAction) UnmarshalBinary(b []byte) error {
	var res SmartlockAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
