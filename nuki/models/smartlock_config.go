// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockConfig smartlock config
//
// swagger:model Smartlock.Config
type SmartlockConfig struct {

	// The advertising mode (battery saving): 0 .. automatic, 1 .. normal, 2 .. slow, 3 .. slowest
	// Required: true
	// Maximum: 3
	// Minimum: 0
	AdvertisingMode *int32 `json:"advertisingMode"`

	// True if the door should be unlatched on unlocking (knob) (only for type=1 and type=3)
	AutoUnlatch bool `json:"autoUnlatch,omitempty"`

	// True if the button on the smartlock is enabled
	ButtonEnabled bool `json:"buttonEnabled,omitempty"`

	// The capabilities indicate whether door opening via app is possible, RTO is possible or both: 0 .. only door opening possible, 1 .. both possible, 2 .. only RTO possible (only for type=2)
	// Read Only: true
	// Maximum: 2
	// Minimum: 0
	Capabilities int32 `json:"capabilities,omitempty"`

	// [deprecated] The daylight saving mode: 0 .. off, 1 .. european
	DaylightSavingMode int32 `json:"daylightSavingMode,omitempty"`

	// The device type of a Nuki device
	// Read Only: true
	DeviceType int32 `json:"deviceType,omitempty"`

	// The fob action if button is pressed once: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring
	// Read Only: true
	// Maximum: 8
	// Minimum: 0
	FobAction1 int32 `json:"fobAction1,omitempty"`

	// The fob action if button is pressed twice: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring
	// Read Only: true
	// Maximum: 8
	// Minimum: 0
	FobAction2 int32 `json:"fobAction2,omitempty"`

	// The fob action if button is pressed 3 times: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring
	// Read Only: true
	// Maximum: 8
	// Minimum: 0
	FobAction3 int32 `json:"fobAction3,omitempty"`

	// True if a fob is paired with the smartlock
	// Read Only: true
	FobPaired *bool `json:"fobPaired,omitempty"`

	// The homekit state: 0 .. unavailable, 1 .. disabled, 2 .. enabled, 3 .. enabled & paired
	// Read Only: true
	// Maximum: 3
	// Minimum: 0
	HomekitState int32 `json:"homekitState,omitempty"`

	// True if a keypad 2 is paired with the smartlock
	// Read Only: true
	Keypad2Paired *bool `json:"keypad2Paired,omitempty"`

	// True if a keypad is paired with the smartlock
	// Read Only: true
	KeypadPaired *bool `json:"keypadPaired,omitempty"`

	// The latitude of the smartlock position
	// Required: true
	Latitude *float32 `json:"latitude"`

	// The brightness of the LED: 0 .. off, 5 .. max (only for type=1 and type=3)
	LedBrightness int32 `json:"ledBrightness,omitempty"`

	// True if the LED on the smartlock is enabled
	LedEnabled bool `json:"ledEnabled,omitempty"`

	// True if the door has a lift up handle, which is required to be lifted up to lock the door
	LiftUpHandle bool `json:"liftUpHandle,omitempty"`

	// The longitude of the smartlock position
	// Required: true
	Longitude *float32 `json:"longitude"`

	// The matter state: 0 .. not available, 1 .. disabled and no certificate available, 2 .. disabled, 3 .. enabled, 4 .. enabled & paired
	// Read Only: true
	// Maximum: 4
	// Minimum: 0
	MatterState int32 `json:"matterState,omitempty"`

	// The name of the smartlock for new users
	// Required: true
	Name *string `json:"name"`

	// The operating mode of the opener (only for type=2): 0x00 .. generic door opener, 0x01 .. analogue intercom, 0x02 .. digital intercom, 0x03 .. digital intercom Siedle, 0x04 .. digital intercom TCS, 0x05 .. digital intercom Bticino, 0x06 .. analog intercom Siedle HTS, 0x07 .. digital intercom STR, 0x08 .. digital intercom Ritto, 0x09 .. digital intercom Fermax, 0x0A .. digital intercom Comelit, 0x0B .. digital intercom Urmet BiBus, 0x0C .. digital intercom Urmet 2Voice, 0x0D .. digital intercom Golmar, 0x0E .. digital intercom SKS, 0x0F .. digital intercom Spare
	// Read Only: true
	OperatingMode int32 `json:"operatingMode,omitempty"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// True if the pairing is allowed via the smartlock button
	PairingEnabled bool `json:"pairingEnabled,omitempty"`

	// True if the smartlock should only lock once (instead of twice) (only for type=1)
	// Required: true
	SingleLock *bool `json:"singleLock"`

	// The timezone id (check https://developer.nuki.io for ids)
	// Required: true
	// Maximum: 45
	// Minimum: 0
	TimezoneID *int32 `json:"timezoneId"`

	// [deprecated] The timezone offset (in minutes)
	// Required: true
	TimezoneOffset *int32 `json:"timezoneOffset"`

	// Flag that indicates if the devices internal WIFI module can be used
	// Read Only: true
	WifiEnabled *bool `json:"wifiEnabled,omitempty"`
}

// Validate validates this smartlock config
func (m *SmartlockConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvertisingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFobAction1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFobAction2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFobAction3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomekitState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatterState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezoneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezoneOffset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockConfig) validateAdvertisingMode(formats strfmt.Registry) error {

	if err := validate.Required("advertisingMode", "body", m.AdvertisingMode); err != nil {
		return err
	}

	if err := validate.MinimumInt("advertisingMode", "body", int64(*m.AdvertisingMode), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("advertisingMode", "body", int64(*m.AdvertisingMode), 3, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if err := validate.MinimumInt("capabilities", "body", int64(m.Capabilities), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("capabilities", "body", int64(m.Capabilities), 2, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateFobAction1(formats strfmt.Registry) error {
	if swag.IsZero(m.FobAction1) { // not required
		return nil
	}

	if err := validate.MinimumInt("fobAction1", "body", int64(m.FobAction1), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("fobAction1", "body", int64(m.FobAction1), 8, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateFobAction2(formats strfmt.Registry) error {
	if swag.IsZero(m.FobAction2) { // not required
		return nil
	}

	if err := validate.MinimumInt("fobAction2", "body", int64(m.FobAction2), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("fobAction2", "body", int64(m.FobAction2), 8, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateFobAction3(formats strfmt.Registry) error {
	if swag.IsZero(m.FobAction3) { // not required
		return nil
	}

	if err := validate.MinimumInt("fobAction3", "body", int64(m.FobAction3), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("fobAction3", "body", int64(m.FobAction3), 8, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateHomekitState(formats strfmt.Registry) error {
	if swag.IsZero(m.HomekitState) { // not required
		return nil
	}

	if err := validate.MinimumInt("homekitState", "body", int64(m.HomekitState), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("homekitState", "body", int64(m.HomekitState), 3, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateMatterState(formats strfmt.Registry) error {
	if swag.IsZero(m.MatterState) { // not required
		return nil
	}

	if err := validate.MinimumInt("matterState", "body", int64(m.MatterState), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("matterState", "body", int64(m.MatterState), 4, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateSingleLock(formats strfmt.Registry) error {

	if err := validate.Required("singleLock", "body", m.SingleLock); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateTimezoneID(formats strfmt.Registry) error {

	if err := validate.Required("timezoneId", "body", m.TimezoneID); err != nil {
		return err
	}

	if err := validate.MinimumInt("timezoneId", "body", int64(*m.TimezoneID), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timezoneId", "body", int64(*m.TimezoneID), 45, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) validateTimezoneOffset(formats strfmt.Registry) error {

	if err := validate.Required("timezoneOffset", "body", m.TimezoneOffset); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this smartlock config based on the context it is used
func (m *SmartlockConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFobAction1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFobAction2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFobAction3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFobPaired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHomekitState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeypad2Paired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeypadPaired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatterState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperatingMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifiEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockConfig) contextValidateCapabilities(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capabilities", "body", int32(m.Capabilities)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateDeviceType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deviceType", "body", int32(m.DeviceType)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateFobAction1(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fobAction1", "body", int32(m.FobAction1)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateFobAction2(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fobAction2", "body", int32(m.FobAction2)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateFobAction3(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fobAction3", "body", int32(m.FobAction3)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateFobPaired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fobPaired", "body", m.FobPaired); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateHomekitState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "homekitState", "body", int32(m.HomekitState)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateKeypad2Paired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "keypad2Paired", "body", m.Keypad2Paired); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateKeypadPaired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "keypadPaired", "body", m.KeypadPaired); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateMatterState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "matterState", "body", int32(m.MatterState)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateOperatingMode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operatingMode", "body", int32(m.OperatingMode)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockConfig) contextValidateWifiEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "wifiEnabled", "body", m.WifiEnabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockConfig) UnmarshalBinary(b []byte) error {
	var res SmartlockConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
