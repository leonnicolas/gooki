// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountSettingWeb account setting web
//
// swagger:model AccountSetting.Web
type AccountSettingWeb struct {

	// The initial sort type of the device page
	// Enum: [FAVOURITES_FIRST NAME_ASC NAME_DESC LAST_ADDED_DESC]
	DeviceSortType string `json:"deviceSortType,omitempty"`

	// The initial view type of the device page
	// Enum: [LIST TILE]
	DeviceViewType string `json:"deviceViewType,omitempty"`

	// List of marked staled devices
	MarkedStaledDevices []*StaleDevice `json:"markedStaledDevices"`

	// If true, Nuki Club info is dismissed and no banner is shown
	NukiClubDismissed bool `json:"nukiClubDismissed,omitempty"`

	// List of removed staled devices
	RemovedStaledDevices []*StaleDevice `json:"removedStaledDevices"`
}

// Validate validates this account setting web
func (m *AccountSettingWeb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceSortType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceViewType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkedStaledDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovedStaledDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accountSettingWebTypeDeviceSortTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAVOURITES_FIRST","NAME_ASC","NAME_DESC","LAST_ADDED_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountSettingWebTypeDeviceSortTypePropEnum = append(accountSettingWebTypeDeviceSortTypePropEnum, v)
	}
}

const (

	// AccountSettingWebDeviceSortTypeFAVOURITESFIRST captures enum value "FAVOURITES_FIRST"
	AccountSettingWebDeviceSortTypeFAVOURITESFIRST string = "FAVOURITES_FIRST"

	// AccountSettingWebDeviceSortTypeNAMEASC captures enum value "NAME_ASC"
	AccountSettingWebDeviceSortTypeNAMEASC string = "NAME_ASC"

	// AccountSettingWebDeviceSortTypeNAMEDESC captures enum value "NAME_DESC"
	AccountSettingWebDeviceSortTypeNAMEDESC string = "NAME_DESC"

	// AccountSettingWebDeviceSortTypeLASTADDEDDESC captures enum value "LAST_ADDED_DESC"
	AccountSettingWebDeviceSortTypeLASTADDEDDESC string = "LAST_ADDED_DESC"
)

// prop value enum
func (m *AccountSettingWeb) validateDeviceSortTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountSettingWebTypeDeviceSortTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountSettingWeb) validateDeviceSortType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceSortType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceSortTypeEnum("deviceSortType", "body", m.DeviceSortType); err != nil {
		return err
	}

	return nil
}

var accountSettingWebTypeDeviceViewTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LIST","TILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountSettingWebTypeDeviceViewTypePropEnum = append(accountSettingWebTypeDeviceViewTypePropEnum, v)
	}
}

const (

	// AccountSettingWebDeviceViewTypeLIST captures enum value "LIST"
	AccountSettingWebDeviceViewTypeLIST string = "LIST"

	// AccountSettingWebDeviceViewTypeTILE captures enum value "TILE"
	AccountSettingWebDeviceViewTypeTILE string = "TILE"
)

// prop value enum
func (m *AccountSettingWeb) validateDeviceViewTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountSettingWebTypeDeviceViewTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountSettingWeb) validateDeviceViewType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceViewType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceViewTypeEnum("deviceViewType", "body", m.DeviceViewType); err != nil {
		return err
	}

	return nil
}

func (m *AccountSettingWeb) validateMarkedStaledDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MarkedStaledDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.MarkedStaledDevices); i++ {
		if swag.IsZero(m.MarkedStaledDevices[i]) { // not required
			continue
		}

		if m.MarkedStaledDevices[i] != nil {
			if err := m.MarkedStaledDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("markedStaledDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("markedStaledDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountSettingWeb) validateRemovedStaledDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovedStaledDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.RemovedStaledDevices); i++ {
		if swag.IsZero(m.RemovedStaledDevices[i]) { // not required
			continue
		}

		if m.RemovedStaledDevices[i] != nil {
			if err := m.RemovedStaledDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removedStaledDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("removedStaledDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this account setting web based on the context it is used
func (m *AccountSettingWeb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarkedStaledDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemovedStaledDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountSettingWeb) contextValidateMarkedStaledDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MarkedStaledDevices); i++ {

		if m.MarkedStaledDevices[i] != nil {

			if swag.IsZero(m.MarkedStaledDevices[i]) { // not required
				return nil
			}

			if err := m.MarkedStaledDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("markedStaledDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("markedStaledDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountSettingWeb) contextValidateRemovedStaledDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemovedStaledDevices); i++ {

		if m.RemovedStaledDevices[i] != nil {

			if swag.IsZero(m.RemovedStaledDevices[i]) { // not required
				return nil
			}

			if err := m.RemovedStaledDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removedStaledDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("removedStaledDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountSettingWeb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountSettingWeb) UnmarshalBinary(b []byte) error {
	var res AccountSettingWeb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
