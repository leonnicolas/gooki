// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChallengeResponse challenge response
//
// swagger:model ChallengeResponse
type ChallengeResponse struct {

	// client nonce
	ClientNonce string `json:"clientNonce,omitempty"`

	// digest algorithm
	DigestAlgorithm string `json:"digestAlgorithm,omitempty"`

	// digest ref
	DigestRef *Reference `json:"digestRef,omitempty"`

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// opaque
	Opaque string `json:"opaque,omitempty"`

	// parameters
	Parameters []*Parameter `json:"parameters"`

	// principal
	Principal *Principal `json:"principal,omitempty"`

	// quality
	Quality string `json:"quality,omitempty"`

	// raw value
	RawValue string `json:"rawValue,omitempty"`

	// realm
	Realm string `json:"realm,omitempty"`

	// scheme
	Scheme *ChallengeScheme `json:"scheme,omitempty"`

	// secret
	Secret []string `json:"secret"`

	// secret algorithm
	SecretAlgorithm string `json:"secretAlgorithm,omitempty"`

	// server nonce
	ServerNonce string `json:"serverNonce,omitempty"`

	// server nounce count
	ServerNounceCount int32 `json:"serverNounceCount,omitempty"`

	// server nounce count as hex
	ServerNounceCountAsHex string `json:"serverNounceCountAsHex,omitempty"`

	// time issued
	TimeIssued int64 `json:"timeIssued,omitempty"`
}

// Validate validates this challenge response
func (m *ChallengeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDigestRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheme(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChallengeResponse) validateDigestRef(formats strfmt.Registry) error {
	if swag.IsZero(m.DigestRef) { // not required
		return nil
	}

	if m.DigestRef != nil {
		if err := m.DigestRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("digestRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("digestRef")
			}
			return err
		}
	}

	return nil
}

func (m *ChallengeResponse) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChallengeResponse) validatePrincipal(formats strfmt.Registry) error {
	if swag.IsZero(m.Principal) { // not required
		return nil
	}

	if m.Principal != nil {
		if err := m.Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

func (m *ChallengeResponse) validateScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.Scheme) { // not required
		return nil
	}

	if m.Scheme != nil {
		if err := m.Scheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheme")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this challenge response based on the context it is used
func (m *ChallengeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDigestRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrincipal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheme(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChallengeResponse) contextValidateDigestRef(ctx context.Context, formats strfmt.Registry) error {

	if m.DigestRef != nil {

		if swag.IsZero(m.DigestRef) { // not required
			return nil
		}

		if err := m.DigestRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("digestRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("digestRef")
			}
			return err
		}
	}

	return nil
}

func (m *ChallengeResponse) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChallengeResponse) contextValidatePrincipal(ctx context.Context, formats strfmt.Registry) error {

	if m.Principal != nil {

		if swag.IsZero(m.Principal) { // not required
			return nil
		}

		if err := m.Principal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

func (m *ChallengeResponse) contextValidateScheme(ctx context.Context, formats strfmt.Registry) error {

	if m.Scheme != nil {

		if swag.IsZero(m.Scheme) { // not required
			return nil
		}

		if err := m.Scheme.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheme")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChallengeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChallengeResponse) UnmarshalBinary(b []byte) error {
	var res ChallengeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
