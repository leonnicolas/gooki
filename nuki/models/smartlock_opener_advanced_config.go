// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockOpenerAdvancedConfig smartlock opener advanced config
//
// swagger:model Smartlock.OpenerAdvancedConfig
type SmartlockOpenerAdvancedConfig struct {

	// Flag that indicates if available firmware updates for the deviceshould be installed automatically
	AutoUpdateEnabled bool `json:"autoUpdateEnabled,omitempty"`

	// Flag that indicates if the automatic detection of the battery type is enabled
	AutomaticBatteryTypeDetection bool `json:"automaticBatteryTypeDetection,omitempty"`

	// The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed
	// Required: true
	BatteryType *int32 `json:"batteryType"`

	// Method to switch between data and analogue mode
	// Required: true
	// Read Only: true
	// Enum: [0 1]
	BusModeSwitch int32 `json:"busModeSwitch"`

	// Flag to disable RTO after ring
	// Required: true
	DisableRtoAfterRing *bool `json:"disableRtoAfterRing"`

	// The doorbell supression bitmask: first bit (least significant) .. whenever the doorbell rings and CM and RTO are inactive, second bit .. RTO is active, third bit .. CM is active
	// Required: true
	DoorbellSuppression *int32 `json:"doorbellSuppression"`

	// Duration in ms of doorbell suppression (only in Operating mode 2 'digital Intercom')
	// Required: true
	DoorbellSuppressionDuration *int32 `json:"doorbellSuppressionDuration"`

	// The desired action, if the button is pressed twice: 0 .. no action, 1 .. toggle RTO, 2 .. activate RTO, 3 .. deactivate RTO, 4 .. toggle CM, 5 .. activate CM, 6 .. deactivate CM, 7 .. open
	// Required: true
	DoubleButtonPressAction *int32 `json:"doubleButtonPressAction"`

	// Delay of electric strike activation in ms after lock action 3 'electric strike actuation'
	// Required: true
	ElectricStrikeDelay *int32 `json:"electricStrikeDelay"`

	// Duration in ms of electric strike actuation lock action 3 'electric strike actuation'
	// Required: true
	ElectricStrikeDuration *int32 `json:"electricStrikeDuration"`

	// The database ID of the connected intercom
	// Required: true
	// Read Only: true
	IntercomID int32 `json:"intercomId"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// Random electricStrikeDelay (range 3000 - 7000 ms) in order to simulate a person inside actuating the electric strike
	// Required: true
	RandomElectricStrikeDelay *bool `json:"randomElectricStrikeDelay"`

	// After this period of time in minutes, RTO gets deactivated automatically
	// Required: true
	RtoTimeout *int32 `json:"rtoTimeout"`

	// Duration of the short circuit for BUS mode switching in ms
	// Required: true
	ShortCircuitDuration *int32 `json:"shortCircuitDuration"`

	// The desired action, if the button is pressed once: 0 .. no action, 1 .. toggle RTO, 2 .. activate RTO, 3 .. deactivate RTO, 4 .. toggle CM, 5 .. activate CM, 6 .. deactivate CM, 7 .. open
	// Required: true
	SingleButtonPressAction *int32 `json:"singleButtonPressAction"`

	// The sound for CM: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	// Required: true
	// Enum: [0 1 2 3]
	SoundCm *int32 `json:"soundCm"`

	// The sound confirmation: 0 .. no sound, 1 .. sound
	// Required: true
	// Enum: [0 1]
	SoundConfirmation *int32 `json:"soundConfirmation"`

	// The sound level
	// Required: true
	SoundLevel *int32 `json:"soundLevel"`

	// The sound for open: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	// Required: true
	// Enum: [0 1 2 3]
	SoundOpen *int32 `json:"soundOpen"`

	// The sound for ring: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	// Required: true
	// Enum: [0 1 2 3]
	SoundRing *int32 `json:"soundRing"`

	// The sound for RTO: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	// Required: true
	// Enum: [0 1 2 3]
	SoundRto *int32 `json:"soundRto"`
}

// Validate validates this smartlock opener advanced config
func (m *SmartlockOpenerAdvancedConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatteryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusModeSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableRtoAfterRing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoorbellSuppression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoorbellSuppressionDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoubleButtonPressAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectricStrikeDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectricStrikeDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntercomID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRandomElectricStrikeDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRtoTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortCircuitDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleButtonPressAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoundCm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoundConfirmation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoundLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoundOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoundRing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoundRto(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateBatteryType(formats strfmt.Registry) error {

	if err := validate.Required("batteryType", "body", m.BatteryType); err != nil {
		return err
	}

	return nil
}

var smartlockOpenerAdvancedConfigTypeBusModeSwitchPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockOpenerAdvancedConfigTypeBusModeSwitchPropEnum = append(smartlockOpenerAdvancedConfigTypeBusModeSwitchPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockOpenerAdvancedConfig) validateBusModeSwitchEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockOpenerAdvancedConfigTypeBusModeSwitchPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateBusModeSwitch(formats strfmt.Registry) error {

	if err := validate.Required("busModeSwitch", "body", int32(m.BusModeSwitch)); err != nil {
		return err
	}

	// value enum
	if err := m.validateBusModeSwitchEnum("busModeSwitch", "body", m.BusModeSwitch); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateDisableRtoAfterRing(formats strfmt.Registry) error {

	if err := validate.Required("disableRtoAfterRing", "body", m.DisableRtoAfterRing); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateDoorbellSuppression(formats strfmt.Registry) error {

	if err := validate.Required("doorbellSuppression", "body", m.DoorbellSuppression); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateDoorbellSuppressionDuration(formats strfmt.Registry) error {

	if err := validate.Required("doorbellSuppressionDuration", "body", m.DoorbellSuppressionDuration); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateDoubleButtonPressAction(formats strfmt.Registry) error {

	if err := validate.Required("doubleButtonPressAction", "body", m.DoubleButtonPressAction); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateElectricStrikeDelay(formats strfmt.Registry) error {

	if err := validate.Required("electricStrikeDelay", "body", m.ElectricStrikeDelay); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateElectricStrikeDuration(formats strfmt.Registry) error {

	if err := validate.Required("electricStrikeDuration", "body", m.ElectricStrikeDuration); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateIntercomID(formats strfmt.Registry) error {

	if err := validate.Required("intercomId", "body", int32(m.IntercomID)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateRandomElectricStrikeDelay(formats strfmt.Registry) error {

	if err := validate.Required("randomElectricStrikeDelay", "body", m.RandomElectricStrikeDelay); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateRtoTimeout(formats strfmt.Registry) error {

	if err := validate.Required("rtoTimeout", "body", m.RtoTimeout); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateShortCircuitDuration(formats strfmt.Registry) error {

	if err := validate.Required("shortCircuitDuration", "body", m.ShortCircuitDuration); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSingleButtonPressAction(formats strfmt.Registry) error {

	if err := validate.Required("singleButtonPressAction", "body", m.SingleButtonPressAction); err != nil {
		return err
	}

	return nil
}

var smartlockOpenerAdvancedConfigTypeSoundCmPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockOpenerAdvancedConfigTypeSoundCmPropEnum = append(smartlockOpenerAdvancedConfigTypeSoundCmPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockOpenerAdvancedConfig) validateSoundCmEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockOpenerAdvancedConfigTypeSoundCmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSoundCm(formats strfmt.Registry) error {

	if err := validate.Required("soundCm", "body", m.SoundCm); err != nil {
		return err
	}

	// value enum
	if err := m.validateSoundCmEnum("soundCm", "body", *m.SoundCm); err != nil {
		return err
	}

	return nil
}

var smartlockOpenerAdvancedConfigTypeSoundConfirmationPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockOpenerAdvancedConfigTypeSoundConfirmationPropEnum = append(smartlockOpenerAdvancedConfigTypeSoundConfirmationPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockOpenerAdvancedConfig) validateSoundConfirmationEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockOpenerAdvancedConfigTypeSoundConfirmationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSoundConfirmation(formats strfmt.Registry) error {

	if err := validate.Required("soundConfirmation", "body", m.SoundConfirmation); err != nil {
		return err
	}

	// value enum
	if err := m.validateSoundConfirmationEnum("soundConfirmation", "body", *m.SoundConfirmation); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSoundLevel(formats strfmt.Registry) error {

	if err := validate.Required("soundLevel", "body", m.SoundLevel); err != nil {
		return err
	}

	return nil
}

var smartlockOpenerAdvancedConfigTypeSoundOpenPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockOpenerAdvancedConfigTypeSoundOpenPropEnum = append(smartlockOpenerAdvancedConfigTypeSoundOpenPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockOpenerAdvancedConfig) validateSoundOpenEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockOpenerAdvancedConfigTypeSoundOpenPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSoundOpen(formats strfmt.Registry) error {

	if err := validate.Required("soundOpen", "body", m.SoundOpen); err != nil {
		return err
	}

	// value enum
	if err := m.validateSoundOpenEnum("soundOpen", "body", *m.SoundOpen); err != nil {
		return err
	}

	return nil
}

var smartlockOpenerAdvancedConfigTypeSoundRingPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockOpenerAdvancedConfigTypeSoundRingPropEnum = append(smartlockOpenerAdvancedConfigTypeSoundRingPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockOpenerAdvancedConfig) validateSoundRingEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockOpenerAdvancedConfigTypeSoundRingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSoundRing(formats strfmt.Registry) error {

	if err := validate.Required("soundRing", "body", m.SoundRing); err != nil {
		return err
	}

	// value enum
	if err := m.validateSoundRingEnum("soundRing", "body", *m.SoundRing); err != nil {
		return err
	}

	return nil
}

var smartlockOpenerAdvancedConfigTypeSoundRtoPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockOpenerAdvancedConfigTypeSoundRtoPropEnum = append(smartlockOpenerAdvancedConfigTypeSoundRtoPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockOpenerAdvancedConfig) validateSoundRtoEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockOpenerAdvancedConfigTypeSoundRtoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) validateSoundRto(formats strfmt.Registry) error {

	if err := validate.Required("soundRto", "body", m.SoundRto); err != nil {
		return err
	}

	// value enum
	if err := m.validateSoundRtoEnum("soundRto", "body", *m.SoundRto); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this smartlock opener advanced config based on the context it is used
func (m *SmartlockOpenerAdvancedConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusModeSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntercomID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockOpenerAdvancedConfig) contextValidateBusModeSwitch(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "busModeSwitch", "body", int32(m.BusModeSwitch)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) contextValidateIntercomID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "intercomId", "body", int32(m.IntercomID)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockOpenerAdvancedConfig) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockOpenerAdvancedConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockOpenerAdvancedConfig) UnmarshalBinary(b []byte) error {
	var res SmartlockOpenerAdvancedConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
