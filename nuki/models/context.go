// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Context context
//
// swagger:model Context
type Context struct {

	// attributes
	Attributes map[string]interface{} `json:"attributes,omitempty"`

	// client dispatcher
	ClientDispatcher *Restlet `json:"clientDispatcher,omitempty"`

	// default enroler
	DefaultEnroler Enroler `json:"defaultEnroler,omitempty"`

	// default verifier
	DefaultVerifier Verifier `json:"defaultVerifier,omitempty"`

	// executor service
	ExecutorService *ScheduledExecutorService `json:"executorService,omitempty"`

	// logger
	Logger *Logger `json:"logger,omitempty"`

	// parameters
	Parameters []*Parameter `json:"parameters"`

	// server dispatcher
	ServerDispatcher *Restlet `json:"serverDispatcher,omitempty"`
}

// Validate validates this context
func (m *Context) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientDispatcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutorService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogger(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerDispatcher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Context) validateClientDispatcher(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientDispatcher) { // not required
		return nil
	}

	if m.ClientDispatcher != nil {
		if err := m.ClientDispatcher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientDispatcher")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientDispatcher")
			}
			return err
		}
	}

	return nil
}

func (m *Context) validateExecutorService(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutorService) { // not required
		return nil
	}

	if m.ExecutorService != nil {
		if err := m.ExecutorService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executorService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executorService")
			}
			return err
		}
	}

	return nil
}

func (m *Context) validateLogger(formats strfmt.Registry) error {
	if swag.IsZero(m.Logger) { // not required
		return nil
	}

	if m.Logger != nil {
		if err := m.Logger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logger")
			}
			return err
		}
	}

	return nil
}

func (m *Context) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Context) validateServerDispatcher(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerDispatcher) { // not required
		return nil
	}

	if m.ServerDispatcher != nil {
		if err := m.ServerDispatcher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverDispatcher")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverDispatcher")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this context based on the context it is used
func (m *Context) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientDispatcher(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutorService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerDispatcher(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Context) contextValidateClientDispatcher(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientDispatcher != nil {

		if swag.IsZero(m.ClientDispatcher) { // not required
			return nil
		}

		if err := m.ClientDispatcher.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientDispatcher")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientDispatcher")
			}
			return err
		}
	}

	return nil
}

func (m *Context) contextValidateExecutorService(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecutorService != nil {

		if swag.IsZero(m.ExecutorService) { // not required
			return nil
		}

		if err := m.ExecutorService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executorService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executorService")
			}
			return err
		}
	}

	return nil
}

func (m *Context) contextValidateLogger(ctx context.Context, formats strfmt.Registry) error {

	if m.Logger != nil {

		if swag.IsZero(m.Logger) { // not required
			return nil
		}

		if err := m.Logger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logger")
			}
			return err
		}
	}

	return nil
}

func (m *Context) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Context) contextValidateServerDispatcher(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerDispatcher != nil {

		if swag.IsZero(m.ServerDispatcher) { // not required
			return nil
		}

		if err := m.ServerDispatcher.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverDispatcher")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverDispatcher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Context) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Context) UnmarshalBinary(b []byte) error {
	var res Context
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
