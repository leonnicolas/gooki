// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Reference reference
//
// swagger:model Reference
type Reference struct {

	// absolute
	Absolute bool `json:"absolute,omitempty"`

	// authority
	Authority string `json:"authority,omitempty"`

	// base ref
	BaseRef *Reference `json:"baseRef,omitempty"`

	// extensions
	Extensions string `json:"extensions,omitempty"`

	// extensions as array
	ExtensionsAsArray []string `json:"extensionsAsArray"`

	// fragment
	Fragment string `json:"fragment,omitempty"`

	// hierarchical
	Hierarchical bool `json:"hierarchical,omitempty"`

	// hierarchical part
	HierarchicalPart string `json:"hierarchicalPart,omitempty"`

	// host domain
	HostDomain string `json:"hostDomain,omitempty"`

	// host identifier
	HostIdentifier string `json:"hostIdentifier,omitempty"`

	// host port
	HostPort int32 `json:"hostPort,omitempty"`

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// last segment
	LastSegment string `json:"lastSegment,omitempty"`

	// matrix
	Matrix string `json:"matrix,omitempty"`

	// matrix as form
	MatrixAsForm []*Parameter `json:"matrixAsForm"`

	// opaque
	Opaque bool `json:"opaque,omitempty"`

	// parent ref
	ParentRef *Reference `json:"parentRef,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// query
	Query string `json:"query,omitempty"`

	// query as form
	QueryAsForm []*Parameter `json:"queryAsForm"`

	// relative
	Relative bool `json:"relative,omitempty"`

	// relative part
	RelativePart string `json:"relativePart,omitempty"`

	// relative ref
	RelativeRef *Reference `json:"relativeRef,omitempty"`

	// remaining part
	RemainingPart string `json:"remainingPart,omitempty"`

	// scheme
	Scheme string `json:"scheme,omitempty"`

	// scheme protocol
	SchemeProtocol *Protocol `json:"schemeProtocol,omitempty"`

	// scheme specific part
	SchemeSpecificPart string `json:"schemeSpecificPart,omitempty"`

	// segments
	Segments []string `json:"segments"`

	// target ref
	TargetRef *Reference `json:"targetRef,omitempty"`

	// user info
	UserInfo string `json:"userInfo,omitempty"`
}

// Validate validates this reference
func (m *Reference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatrixAsForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryAsForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemeProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reference) validateBaseRef(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseRef) { // not required
		return nil
	}

	if m.BaseRef != nil {
		if err := m.BaseRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseRef")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) validateMatrixAsForm(formats strfmt.Registry) error {
	if swag.IsZero(m.MatrixAsForm) { // not required
		return nil
	}

	for i := 0; i < len(m.MatrixAsForm); i++ {
		if swag.IsZero(m.MatrixAsForm[i]) { // not required
			continue
		}

		if m.MatrixAsForm[i] != nil {
			if err := m.MatrixAsForm[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matrixAsForm" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matrixAsForm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Reference) validateParentRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentRef) { // not required
		return nil
	}

	if m.ParentRef != nil {
		if err := m.ParentRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentRef")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) validateQueryAsForm(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryAsForm) { // not required
		return nil
	}

	for i := 0; i < len(m.QueryAsForm); i++ {
		if swag.IsZero(m.QueryAsForm[i]) { // not required
			continue
		}

		if m.QueryAsForm[i] != nil {
			if err := m.QueryAsForm[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryAsForm" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryAsForm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Reference) validateRelativeRef(formats strfmt.Registry) error {
	if swag.IsZero(m.RelativeRef) { // not required
		return nil
	}

	if m.RelativeRef != nil {
		if err := m.RelativeRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relativeRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relativeRef")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) validateSchemeProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemeProtocol) { // not required
		return nil
	}

	if m.SchemeProtocol != nil {
		if err := m.SchemeProtocol.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schemeProtocol")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schemeProtocol")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) validateTargetRef(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetRef) { // not required
		return nil
	}

	if m.TargetRef != nil {
		if err := m.TargetRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reference based on the context it is used
func (m *Reference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatrixAsForm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryAsForm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelativeRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemeProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reference) contextValidateBaseRef(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseRef != nil {

		if swag.IsZero(m.BaseRef) { // not required
			return nil
		}

		if err := m.BaseRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseRef")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) contextValidateMatrixAsForm(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MatrixAsForm); i++ {

		if m.MatrixAsForm[i] != nil {

			if swag.IsZero(m.MatrixAsForm[i]) { // not required
				return nil
			}

			if err := m.MatrixAsForm[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matrixAsForm" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matrixAsForm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Reference) contextValidateParentRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentRef != nil {

		if swag.IsZero(m.ParentRef) { // not required
			return nil
		}

		if err := m.ParentRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentRef")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) contextValidateQueryAsForm(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QueryAsForm); i++ {

		if m.QueryAsForm[i] != nil {

			if swag.IsZero(m.QueryAsForm[i]) { // not required
				return nil
			}

			if err := m.QueryAsForm[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryAsForm" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryAsForm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Reference) contextValidateRelativeRef(ctx context.Context, formats strfmt.Registry) error {

	if m.RelativeRef != nil {

		if swag.IsZero(m.RelativeRef) { // not required
			return nil
		}

		if err := m.RelativeRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relativeRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relativeRef")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) contextValidateSchemeProtocol(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemeProtocol != nil {

		if swag.IsZero(m.SchemeProtocol) { // not required
			return nil
		}

		if err := m.SchemeProtocol.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schemeProtocol")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schemeProtocol")
			}
			return err
		}
	}

	return nil
}

func (m *Reference) contextValidateTargetRef(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetRef != nil {

		if swag.IsZero(m.TargetRef) { // not required
			return nil
		}

		if err := m.TargetRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reference) UnmarshalBinary(b []byte) error {
	var res Reference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
