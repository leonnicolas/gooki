// Code generated by go-swagger; DO NOT EDIT.

package account_subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AccountSubscriptionPayResourcePostPostReader is a Reader for the AccountSubscriptionPayResourcePostPost structure.
type AccountSubscriptionPayResourcePostPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AccountSubscriptionPayResourcePostPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAccountSubscriptionPayResourcePostPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAccountSubscriptionPayResourcePostPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /account/subscription/pay] AccountSubscriptionPayResource_post_post", response, response.Code())
	}
}

// NewAccountSubscriptionPayResourcePostPostOK creates a AccountSubscriptionPayResourcePostPostOK with default headers values
func NewAccountSubscriptionPayResourcePostPostOK() *AccountSubscriptionPayResourcePostPostOK {
	return &AccountSubscriptionPayResourcePostPostOK{}
}

/*
AccountSubscriptionPayResourcePostPostOK describes a response with status code 200, with default header values.

Ok
*/
type AccountSubscriptionPayResourcePostPostOK struct {
	Payload string
}

// IsSuccess returns true when this account subscription pay resource post post o k response has a 2xx status code
func (o *AccountSubscriptionPayResourcePostPostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this account subscription pay resource post post o k response has a 3xx status code
func (o *AccountSubscriptionPayResourcePostPostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this account subscription pay resource post post o k response has a 4xx status code
func (o *AccountSubscriptionPayResourcePostPostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this account subscription pay resource post post o k response has a 5xx status code
func (o *AccountSubscriptionPayResourcePostPostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this account subscription pay resource post post o k response a status code equal to that given
func (o *AccountSubscriptionPayResourcePostPostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the account subscription pay resource post post o k response
func (o *AccountSubscriptionPayResourcePostPostOK) Code() int {
	return 200
}

func (o *AccountSubscriptionPayResourcePostPostOK) Error() string {
	return fmt.Sprintf("[POST /account/subscription/pay][%d] accountSubscriptionPayResourcePostPostOK  %+v", 200, o.Payload)
}

func (o *AccountSubscriptionPayResourcePostPostOK) String() string {
	return fmt.Sprintf("[POST /account/subscription/pay][%d] accountSubscriptionPayResourcePostPostOK  %+v", 200, o.Payload)
}

func (o *AccountSubscriptionPayResourcePostPostOK) GetPayload() string {
	return o.Payload
}

func (o *AccountSubscriptionPayResourcePostPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountSubscriptionPayResourcePostPostUnauthorized creates a AccountSubscriptionPayResourcePostPostUnauthorized with default headers values
func NewAccountSubscriptionPayResourcePostPostUnauthorized() *AccountSubscriptionPayResourcePostPostUnauthorized {
	return &AccountSubscriptionPayResourcePostPostUnauthorized{}
}

/*
AccountSubscriptionPayResourcePostPostUnauthorized describes a response with status code 401, with default header values.

Not authorized
*/
type AccountSubscriptionPayResourcePostPostUnauthorized struct {
}

// IsSuccess returns true when this account subscription pay resource post post unauthorized response has a 2xx status code
func (o *AccountSubscriptionPayResourcePostPostUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this account subscription pay resource post post unauthorized response has a 3xx status code
func (o *AccountSubscriptionPayResourcePostPostUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this account subscription pay resource post post unauthorized response has a 4xx status code
func (o *AccountSubscriptionPayResourcePostPostUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this account subscription pay resource post post unauthorized response has a 5xx status code
func (o *AccountSubscriptionPayResourcePostPostUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this account subscription pay resource post post unauthorized response a status code equal to that given
func (o *AccountSubscriptionPayResourcePostPostUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the account subscription pay resource post post unauthorized response
func (o *AccountSubscriptionPayResourcePostPostUnauthorized) Code() int {
	return 401
}

func (o *AccountSubscriptionPayResourcePostPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /account/subscription/pay][%d] accountSubscriptionPayResourcePostPostUnauthorized ", 401)
}

func (o *AccountSubscriptionPayResourcePostPostUnauthorized) String() string {
	return fmt.Sprintf("[POST /account/subscription/pay][%d] accountSubscriptionPayResourcePostPostUnauthorized ", 401)
}

func (o *AccountSubscriptionPayResourcePostPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
