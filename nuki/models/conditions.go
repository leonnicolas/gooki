// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Conditions conditions
//
// swagger:model Conditions
type Conditions struct {

	// match
	Match []*Tag `json:"match"`

	// modified since
	// Format: date-time
	ModifiedSince strfmt.DateTime `json:"modifiedSince,omitempty"`

	// none match
	NoneMatch []*Tag `json:"noneMatch"`

	// range date
	// Format: date-time
	RangeDate strfmt.DateTime `json:"rangeDate,omitempty"`

	// range tag
	RangeTag *Tag `json:"rangeTag,omitempty"`

	// unmodified since
	// Format: date-time
	UnmodifiedSince strfmt.DateTime `json:"unmodifiedSince,omitempty"`
}

// Validate validates this conditions
func (m *Conditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoneMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangeDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangeTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmodifiedSince(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Conditions) validateMatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Match) { // not required
		return nil
	}

	for i := 0; i < len(m.Match); i++ {
		if swag.IsZero(m.Match[i]) { // not required
			continue
		}

		if m.Match[i] != nil {
			if err := m.Match[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("match" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("match" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Conditions) validateModifiedSince(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedSince) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedSince", "body", "date-time", m.ModifiedSince.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Conditions) validateNoneMatch(formats strfmt.Registry) error {
	if swag.IsZero(m.NoneMatch) { // not required
		return nil
	}

	for i := 0; i < len(m.NoneMatch); i++ {
		if swag.IsZero(m.NoneMatch[i]) { // not required
			continue
		}

		if m.NoneMatch[i] != nil {
			if err := m.NoneMatch[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("noneMatch" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("noneMatch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Conditions) validateRangeDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RangeDate) { // not required
		return nil
	}

	if err := validate.FormatOf("rangeDate", "body", "date-time", m.RangeDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Conditions) validateRangeTag(formats strfmt.Registry) error {
	if swag.IsZero(m.RangeTag) { // not required
		return nil
	}

	if m.RangeTag != nil {
		if err := m.RangeTag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rangeTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rangeTag")
			}
			return err
		}
	}

	return nil
}

func (m *Conditions) validateUnmodifiedSince(formats strfmt.Registry) error {
	if swag.IsZero(m.UnmodifiedSince) { // not required
		return nil
	}

	if err := validate.FormatOf("unmodifiedSince", "body", "date-time", m.UnmodifiedSince.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this conditions based on the context it is used
func (m *Conditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNoneMatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRangeTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Conditions) contextValidateMatch(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Match); i++ {

		if m.Match[i] != nil {

			if swag.IsZero(m.Match[i]) { // not required
				return nil
			}

			if err := m.Match[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("match" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("match" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Conditions) contextValidateNoneMatch(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NoneMatch); i++ {

		if m.NoneMatch[i] != nil {

			if swag.IsZero(m.NoneMatch[i]) { // not required
				return nil
			}

			if err := m.NoneMatch[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("noneMatch" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("noneMatch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Conditions) contextValidateRangeTag(ctx context.Context, formats strfmt.Registry) error {

	if m.RangeTag != nil {

		if swag.IsZero(m.RangeTag) { // not required
			return nil
		}

		if err := m.RangeTag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rangeTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rangeTag")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Conditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Conditions) UnmarshalBinary(b []byte) error {
	var res Conditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
