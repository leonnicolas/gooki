// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notification notification
//
// swagger:model Notification
type Notification struct {

	// The language of push messages: cs, de, en (default), es, fr, it, nl, sk
	Language string `json:"language,omitempty"`

	// The last active date
	// Format: date-time
	LastActiveDate strfmt.DateTime `json:"lastActiveDate,omitempty"`

	// The unique notificationId for the notification
	NotificationID string `json:"notificationId,omitempty"`

	// The operating system: 0 .. Android, 1 .. iOS, 2 .. web hook
	// Required: true
	Os *int32 `json:"os"`

	// The push ID or the POST URL for a webhook
	// Required: true
	PushID *string `json:"pushId"`

	// The reference ID, an ID to identify a foreign system
	ReferenceID string `json:"referenceId,omitempty"`

	// The 40 byte hex string to sign the checksumof the POST payload if the notification is webhook (os=2)
	// Example: 8d41a187c3954f886f9de3a88c2ef22df0eac190
	Secret string `json:"secret,omitempty"`

	// Settings per Smart Lock
	// Required: true
	Settings []*NotificationSetting `json:"settings"`

	// Current state: 0 .. init, 1 .. active, 2 .. failed
	Status int32 `json:"status,omitempty"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastActiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateLastActiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastActiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastActiveDate", "body", "date-time", m.LastActiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validatePushID(formats strfmt.Registry) error {

	if err := validate.Required("pushId", "body", m.PushID); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateSettings(formats strfmt.Registry) error {

	if err := validate.Required("settings", "body", m.Settings); err != nil {
		return err
	}

	for i := 0; i < len(m.Settings); i++ {
		if swag.IsZero(m.Settings[i]) { // not required
			continue
		}

		if m.Settings[i] != nil {
			if err := m.Settings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("settings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("settings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this notification based on the context it is used
func (m *Notification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Settings); i++ {

		if m.Settings[i] != nil {

			if swag.IsZero(m.Settings[i]) { // not required
				return nil
			}

			if err := m.Settings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("settings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("settings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
