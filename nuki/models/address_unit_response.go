// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressUnitResponse address unit response
//
// swagger:model AddressUnitResponse
type AddressUnitResponse struct {

	// The address id
	// Read Only: true
	AddressID int32 `json:"addressId,omitempty"`

	// The address token id
	// Read Only: true
	AddressTokenID string `json:"addressTokenId,omitempty"`

	// The creation date
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// The id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the address unit
	// Required: true
	Name *string `json:"name"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// The redeem date
	// Required: true
	// Format: date-time
	RedeemDate *strfmt.DateTime `json:"redeemDate"`

	// The redeem result
	// Enum: [ok failed]
	RedeemResult string `json:"redeemResult,omitempty"`
}

// Validate validates this address unit response
func (m *AddressUnitResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressUnitResponse) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnitResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnitResponse) validateRedeemDate(formats strfmt.Registry) error {

	if err := validate.Required("redeemDate", "body", m.RedeemDate); err != nil {
		return err
	}

	if err := validate.FormatOf("redeemDate", "body", "date-time", m.RedeemDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var addressUnitResponseTypeRedeemResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressUnitResponseTypeRedeemResultPropEnum = append(addressUnitResponseTypeRedeemResultPropEnum, v)
	}
}

const (

	// AddressUnitResponseRedeemResultOk captures enum value "ok"
	AddressUnitResponseRedeemResultOk string = "ok"

	// AddressUnitResponseRedeemResultFailed captures enum value "failed"
	AddressUnitResponseRedeemResultFailed string = "failed"
)

// prop value enum
func (m *AddressUnitResponse) validateRedeemResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressUnitResponseTypeRedeemResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddressUnitResponse) validateRedeemResult(formats strfmt.Registry) error {
	if swag.IsZero(m.RedeemResult) { // not required
		return nil
	}

	// value enum
	if err := m.validateRedeemResultEnum("redeemResult", "body", m.RedeemResult); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this address unit response based on the context it is used
func (m *AddressUnitResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddressTokenID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressUnitResponse) contextValidateAddressID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "addressId", "body", int32(m.AddressID)); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnitResponse) contextValidateAddressTokenID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "addressTokenId", "body", string(m.AddressTokenID)); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnitResponse) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AddressUnitResponse) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressUnitResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressUnitResponse) UnmarshalBinary(b []byte) error {
	var res AddressUnitResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
