// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Request request
//
// swagger:model Request
type Request struct {

	// access control request headers
	// Unique: true
	AccessControlRequestHeaders []string `json:"accessControlRequestHeaders"`

	// access control request method
	AccessControlRequestMethod *Method `json:"accessControlRequestMethod,omitempty"`

	// asynchronous
	Asynchronous bool `json:"asynchronous,omitempty"`

	// attributes
	Attributes map[string]interface{} `json:"attributes,omitempty"`

	// cache directives
	CacheDirectives []*CacheDirective `json:"cacheDirectives"`

	// challenge response
	ChallengeResponse *ChallengeResponse `json:"challengeResponse,omitempty"`

	// client info
	ClientInfo *ClientInfo `json:"clientInfo,omitempty"`

	// conditions
	Conditions *Conditions `json:"conditions,omitempty"`

	// confidential
	Confidential bool `json:"confidential,omitempty"`

	// cookies
	Cookies []*Cookie `json:"cookies"`

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// entity
	Entity *Representation `json:"entity,omitempty"`

	// entity as text
	EntityAsText string `json:"entityAsText,omitempty"`

	// entity available
	EntityAvailable bool `json:"entityAvailable,omitempty"`

	// expecting response
	ExpectingResponse bool `json:"expectingResponse,omitempty"`

	// headers
	Headers []*Header `json:"headers"`

	// host ref
	HostRef *Reference `json:"hostRef,omitempty"`

	// loggable
	Loggable bool `json:"loggable,omitempty"`

	// max forwards
	MaxForwards int32 `json:"maxForwards,omitempty"`

	// method
	Method *Method `json:"method,omitempty"`

	// on error
	OnError Uniform `json:"onError,omitempty"`

	// on response
	OnResponse Uniform `json:"onResponse,omitempty"`

	// on sent
	OnSent Uniform `json:"onSent,omitempty"`

	// original ref
	OriginalRef *Reference `json:"originalRef,omitempty"`

	// protocol
	Protocol *Protocol `json:"protocol,omitempty"`

	// proxy challenge response
	ProxyChallengeResponse *ChallengeResponse `json:"proxyChallengeResponse,omitempty"`

	// ranges
	Ranges []*Range `json:"ranges"`

	// recipients info
	RecipientsInfo []*RecipientInfo `json:"recipientsInfo"`

	// referrer ref
	ReferrerRef *Reference `json:"referrerRef,omitempty"`

	// resource ref
	ResourceRef *Reference `json:"resourceRef,omitempty"`

	// root ref
	RootRef *Reference `json:"rootRef,omitempty"`

	// synchronous
	Synchronous bool `json:"synchronous,omitempty"`

	// warnings
	Warnings []*Warning `json:"warnings"`
}

// Validate validates this request
func (m *Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessControlRequestHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessControlRequestMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCacheDirectives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChallengeResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCookies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyChallengeResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferrerRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Request) validateAccessControlRequestHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessControlRequestHeaders) { // not required
		return nil
	}

	if err := validate.UniqueItems("accessControlRequestHeaders", "body", m.AccessControlRequestHeaders); err != nil {
		return err
	}

	return nil
}

func (m *Request) validateAccessControlRequestMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessControlRequestMethod) { // not required
		return nil
	}

	if m.AccessControlRequestMethod != nil {
		if err := m.AccessControlRequestMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessControlRequestMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessControlRequestMethod")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateCacheDirectives(formats strfmt.Registry) error {
	if swag.IsZero(m.CacheDirectives) { // not required
		return nil
	}

	for i := 0; i < len(m.CacheDirectives); i++ {
		if swag.IsZero(m.CacheDirectives[i]) { // not required
			continue
		}

		if m.CacheDirectives[i] != nil {
			if err := m.CacheDirectives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cacheDirectives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cacheDirectives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) validateChallengeResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ChallengeResponse) { // not required
		return nil
	}

	if m.ChallengeResponse != nil {
		if err := m.ChallengeResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("challengeResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("challengeResponse")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateClientInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientInfo) { // not required
		return nil
	}

	if m.ClientInfo != nil {
		if err := m.ClientInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if m.Conditions != nil {
		if err := m.Conditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateCookies(formats strfmt.Registry) error {
	if swag.IsZero(m.Cookies) { // not required
		return nil
	}

	for i := 0; i < len(m.Cookies); i++ {
		if swag.IsZero(m.Cookies[i]) { // not required
			continue
		}

		if m.Cookies[i] != nil {
			if err := m.Cookies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cookies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cookies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Request) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) validateHostRef(formats strfmt.Registry) error {
	if swag.IsZero(m.HostRef) { // not required
		return nil
	}

	if m.HostRef != nil {
		if err := m.HostRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.Method) { // not required
		return nil
	}

	if m.Method != nil {
		if err := m.Method.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("method")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateOriginalRef(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalRef) { // not required
		return nil
	}

	if m.OriginalRef != nil {
		if err := m.OriginalRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if m.Protocol != nil {
		if err := m.Protocol.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protocol")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateProxyChallengeResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyChallengeResponse) { // not required
		return nil
	}

	if m.ProxyChallengeResponse != nil {
		if err := m.ProxyChallengeResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyChallengeResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyChallengeResponse")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateRanges(formats strfmt.Registry) error {
	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ranges); i++ {
		if swag.IsZero(m.Ranges[i]) { // not required
			continue
		}

		if m.Ranges[i] != nil {
			if err := m.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) validateRecipientsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RecipientsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.RecipientsInfo); i++ {
		if swag.IsZero(m.RecipientsInfo[i]) { // not required
			continue
		}

		if m.RecipientsInfo[i] != nil {
			if err := m.RecipientsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recipientsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recipientsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) validateReferrerRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferrerRef) { // not required
		return nil
	}

	if m.ReferrerRef != nil {
		if err := m.ReferrerRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("referrerRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("referrerRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateResourceRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceRef) { // not required
		return nil
	}

	if m.ResourceRef != nil {
		if err := m.ResourceRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateRootRef(formats strfmt.Registry) error {
	if swag.IsZero(m.RootRef) { // not required
		return nil
	}

	if m.RootRef != nil {
		if err := m.RootRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this request based on the context it is used
func (m *Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessControlRequestMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCacheDirectives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChallengeResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCookies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyChallengeResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecipientsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferrerRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Request) contextValidateAccessControlRequestMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessControlRequestMethod != nil {

		if swag.IsZero(m.AccessControlRequestMethod) { // not required
			return nil
		}

		if err := m.AccessControlRequestMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessControlRequestMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessControlRequestMethod")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateCacheDirectives(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CacheDirectives); i++ {

		if m.CacheDirectives[i] != nil {

			if swag.IsZero(m.CacheDirectives[i]) { // not required
				return nil
			}

			if err := m.CacheDirectives[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cacheDirectives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cacheDirectives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) contextValidateChallengeResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ChallengeResponse != nil {

		if swag.IsZero(m.ChallengeResponse) { // not required
			return nil
		}

		if err := m.ChallengeResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("challengeResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("challengeResponse")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateClientInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientInfo != nil {

		if swag.IsZero(m.ClientInfo) { // not required
			return nil
		}

		if err := m.ClientInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Conditions != nil {

		if swag.IsZero(m.Conditions) { // not required
			return nil
		}

		if err := m.Conditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateCookies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cookies); i++ {

		if m.Cookies[i] != nil {

			if swag.IsZero(m.Cookies[i]) { // not required
				return nil
			}

			if err := m.Cookies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cookies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cookies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Headers); i++ {

		if m.Headers[i] != nil {

			if swag.IsZero(m.Headers[i]) { // not required
				return nil
			}

			if err := m.Headers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) contextValidateHostRef(ctx context.Context, formats strfmt.Registry) error {

	if m.HostRef != nil {

		if swag.IsZero(m.HostRef) { // not required
			return nil
		}

		if err := m.HostRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.Method != nil {

		if swag.IsZero(m.Method) { // not required
			return nil
		}

		if err := m.Method.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("method")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateOriginalRef(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalRef != nil {

		if swag.IsZero(m.OriginalRef) { // not required
			return nil
		}

		if err := m.OriginalRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateProtocol(ctx context.Context, formats strfmt.Registry) error {

	if m.Protocol != nil {

		if swag.IsZero(m.Protocol) { // not required
			return nil
		}

		if err := m.Protocol.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protocol")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateProxyChallengeResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyChallengeResponse != nil {

		if swag.IsZero(m.ProxyChallengeResponse) { // not required
			return nil
		}

		if err := m.ProxyChallengeResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyChallengeResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyChallengeResponse")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ranges); i++ {

		if m.Ranges[i] != nil {

			if swag.IsZero(m.Ranges[i]) { // not required
				return nil
			}

			if err := m.Ranges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) contextValidateRecipientsInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecipientsInfo); i++ {

		if m.RecipientsInfo[i] != nil {

			if swag.IsZero(m.RecipientsInfo[i]) { // not required
				return nil
			}

			if err := m.RecipientsInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recipientsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recipientsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Request) contextValidateReferrerRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferrerRef != nil {

		if swag.IsZero(m.ReferrerRef) { // not required
			return nil
		}

		if err := m.ReferrerRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("referrerRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("referrerRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateResourceRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceRef != nil {

		if swag.IsZero(m.ResourceRef) { // not required
			return nil
		}

		if err := m.ResourceRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateRootRef(ctx context.Context, formats strfmt.Registry) error {

	if m.RootRef != nil {

		if swag.IsZero(m.RootRef) { // not required
			return nil
		}

		if err := m.RootRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootRef")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Request) UnmarshalBinary(b []byte) error {
	var res Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
