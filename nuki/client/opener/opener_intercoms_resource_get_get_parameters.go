// Code generated by go-swagger; DO NOT EDIT.

package opener

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewOpenerIntercomsResourceGetGetParams creates a new OpenerIntercomsResourceGetGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOpenerIntercomsResourceGetGetParams() *OpenerIntercomsResourceGetGetParams {
	return &OpenerIntercomsResourceGetGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOpenerIntercomsResourceGetGetParamsWithTimeout creates a new OpenerIntercomsResourceGetGetParams object
// with the ability to set a timeout on a request.
func NewOpenerIntercomsResourceGetGetParamsWithTimeout(timeout time.Duration) *OpenerIntercomsResourceGetGetParams {
	return &OpenerIntercomsResourceGetGetParams{
		timeout: timeout,
	}
}

// NewOpenerIntercomsResourceGetGetParamsWithContext creates a new OpenerIntercomsResourceGetGetParams object
// with the ability to set a context for a request.
func NewOpenerIntercomsResourceGetGetParamsWithContext(ctx context.Context) *OpenerIntercomsResourceGetGetParams {
	return &OpenerIntercomsResourceGetGetParams{
		Context: ctx,
	}
}

// NewOpenerIntercomsResourceGetGetParamsWithHTTPClient creates a new OpenerIntercomsResourceGetGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewOpenerIntercomsResourceGetGetParamsWithHTTPClient(client *http.Client) *OpenerIntercomsResourceGetGetParams {
	return &OpenerIntercomsResourceGetGetParams{
		HTTPClient: client,
	}
}

/*
OpenerIntercomsResourceGetGetParams contains all the parameters to send to the API endpoint

	for the opener intercoms resource get get operation.

	Typically these are written to a http.Request.
*/
type OpenerIntercomsResourceGetGetParams struct {

	/* BrandID.

	   Filter for brandId. Required if 'recentlyChanged' is not set
	*/
	BrandID *int64

	/* IgnoreVerified.

	   If true, return intercoms ignoring their verified value
	*/
	IgnoreVerified *bool

	/* RecentlyChanged.

	   If true, return all intercoms which recently were updated
	*/
	RecentlyChanged *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the opener intercoms resource get get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OpenerIntercomsResourceGetGetParams) WithDefaults() *OpenerIntercomsResourceGetGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the opener intercoms resource get get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OpenerIntercomsResourceGetGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) WithTimeout(timeout time.Duration) *OpenerIntercomsResourceGetGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) WithContext(ctx context.Context) *OpenerIntercomsResourceGetGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) WithHTTPClient(client *http.Client) *OpenerIntercomsResourceGetGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBrandID adds the brandID to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) WithBrandID(brandID *int64) *OpenerIntercomsResourceGetGetParams {
	o.SetBrandID(brandID)
	return o
}

// SetBrandID adds the brandId to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) SetBrandID(brandID *int64) {
	o.BrandID = brandID
}

// WithIgnoreVerified adds the ignoreVerified to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) WithIgnoreVerified(ignoreVerified *bool) *OpenerIntercomsResourceGetGetParams {
	o.SetIgnoreVerified(ignoreVerified)
	return o
}

// SetIgnoreVerified adds the ignoreVerified to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) SetIgnoreVerified(ignoreVerified *bool) {
	o.IgnoreVerified = ignoreVerified
}

// WithRecentlyChanged adds the recentlyChanged to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) WithRecentlyChanged(recentlyChanged *bool) *OpenerIntercomsResourceGetGetParams {
	o.SetRecentlyChanged(recentlyChanged)
	return o
}

// SetRecentlyChanged adds the recentlyChanged to the opener intercoms resource get get params
func (o *OpenerIntercomsResourceGetGetParams) SetRecentlyChanged(recentlyChanged *bool) {
	o.RecentlyChanged = recentlyChanged
}

// WriteToRequest writes these params to a swagger request
func (o *OpenerIntercomsResourceGetGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BrandID != nil {

		// query param brandId
		var qrBrandID int64

		if o.BrandID != nil {
			qrBrandID = *o.BrandID
		}
		qBrandID := swag.FormatInt64(qrBrandID)
		if qBrandID != "" {

			if err := r.SetQueryParam("brandId", qBrandID); err != nil {
				return err
			}
		}
	}

	if o.IgnoreVerified != nil {

		// query param ignoreVerified
		var qrIgnoreVerified bool

		if o.IgnoreVerified != nil {
			qrIgnoreVerified = *o.IgnoreVerified
		}
		qIgnoreVerified := swag.FormatBool(qrIgnoreVerified)
		if qIgnoreVerified != "" {

			if err := r.SetQueryParam("ignoreVerified", qIgnoreVerified); err != nil {
				return err
			}
		}
	}

	if o.RecentlyChanged != nil {

		// query param recentlyChanged
		var qrRecentlyChanged bool

		if o.RecentlyChanged != nil {
			qrRecentlyChanged = *o.RecentlyChanged
		}
		qRecentlyChanged := swag.FormatBool(qrRecentlyChanged)
		if qRecentlyChanged != "" {

			if err := r.SetQueryParam("recentlyChanged", qRecentlyChanged); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
