// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockAuth smartlock auth
//
// swagger:model SmartlockAuth
type SmartlockAuth struct {

	// The id of the linked account user
	AccountUserID int32 `json:"accountUserId,omitempty"`

	// The allowed from date
	// Format: date-time
	AllowedFromDate strfmt.DateTime `json:"allowedFromDate,omitempty"`

	// The allowed from time (in minutes from midnight)
	AllowedFromTime int32 `json:"allowedFromTime,omitempty"`

	// The allowed until date
	// Format: date-time
	AllowedUntilDate strfmt.DateTime `json:"allowedUntilDate,omitempty"`

	// The allowed until time (in minutes from midnight)
	AllowedUntilTime int32 `json:"allowedUntilTime,omitempty"`

	// The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday
	// Maximum: 127
	// Minimum: 0
	AllowedWeekDays *int32 `json:"allowedWeekDays,omitempty"`

	// The smartlock authorization id
	AuthID int32 `json:"authId,omitempty"`

	// auth type as string
	AuthTypeAsString string `json:"authTypeAsString,omitempty"`

	// The keypad code (only for type keypad)
	Code int32 `json:"code,omitempty"`

	// The creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// True if the auth is enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// In case of any error, it contains the error message
	Error string `json:"error,omitempty"`

	// fingerprints
	Fingerprints map[string]string `json:"fingerprints,omitempty"`

	// The unique id for the smartlock authorization
	// Required: true
	ID *string `json:"id"`

	// The last active date
	// Format: date-time
	LastActiveDate strfmt.DateTime `json:"lastActiveDate,omitempty"`

	// The lock count
	// Required: true
	LockCount *int32 `json:"lockCount"`

	// The name of the authorization (max 32 chars)
	// Required: true
	Name *string `json:"name"`

	// The operation id - if set the auth is locked for another operations.
	// Read Only: true
	OperationID *ObjectID `json:"operationId,omitempty"`

	// True if the auth has remote access
	// Required: true
	RemoteAllowed *bool `json:"remoteAllowed"`

	// The smartlock id
	// Required: true
	SmartlockID *int64 `json:"smartlockId"`

	// The type of the authorization: 0 .. app, 1 .. bridge, 2 .. fob, 3 .. keypad, 13 .. keypad code, 14 .. z-key, 15 .. virtual
	// Required: true
	// Read Only: true
	// Maximum: 2
	// Minimum: 0
	Type int32 `json:"type"`

	// The update date
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`
}

// Validate validates this smartlock auth
func (m *SmartlockAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedFromDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowedUntilDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowedWeekDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockAuth) validateAllowedFromDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedFromDate) { // not required
		return nil
	}

	if err := validate.FormatOf("allowedFromDate", "body", "date-time", m.AllowedFromDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateAllowedUntilDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedUntilDate) { // not required
		return nil
	}

	if err := validate.FormatOf("allowedUntilDate", "body", "date-time", m.AllowedUntilDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateAllowedWeekDays(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedWeekDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("allowedWeekDays", "body", int64(*m.AllowedWeekDays), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("allowedWeekDays", "body", int64(*m.AllowedWeekDays), 127, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateLastActiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastActiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastActiveDate", "body", "date-time", m.LastActiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateLockCount(formats strfmt.Registry) error {

	if err := validate.Required("lockCount", "body", m.LockCount); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateOperationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationID) { // not required
		return nil
	}

	if m.OperationID != nil {
		if err := m.OperationID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationId")
			}
			return err
		}
	}

	return nil
}

func (m *SmartlockAuth) validateRemoteAllowed(formats strfmt.Registry) error {

	if err := validate.Required("remoteAllowed", "body", m.RemoteAllowed); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateSmartlockID(formats strfmt.Registry) error {

	if err := validate.Required("smartlockId", "body", m.SmartlockID); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", int32(m.Type)); err != nil {
		return err
	}

	if err := validate.MinimumInt("type", "body", int64(m.Type), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("type", "body", int64(m.Type), 2, false); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockAuth) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this smartlock auth based on the context it is used
func (m *SmartlockAuth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockAuth) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationID != nil {

		if swag.IsZero(m.OperationID) { // not required
			return nil
		}

		if err := m.OperationID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationId")
			}
			return err
		}
	}

	return nil
}

func (m *SmartlockAuth) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", int32(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockAuth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockAuth) UnmarshalBinary(b []byte) error {
	var res SmartlockAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
