// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TunnelService tunnel service
//
// swagger:model TunnelService
type TunnelService struct {

	// character set parameter
	CharacterSetParameter string `json:"characterSetParameter,omitempty"`

	// context
	Context *Context `json:"context,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// encoding parameter
	EncodingParameter string `json:"encodingParameter,omitempty"`

	// extensions tunnel
	ExtensionsTunnel bool `json:"extensionsTunnel,omitempty"`

	// headers tunnel
	HeadersTunnel bool `json:"headersTunnel,omitempty"`

	// language parameter
	LanguageParameter string `json:"languageParameter,omitempty"`

	// media type parameter
	MediaTypeParameter string `json:"mediaTypeParameter,omitempty"`

	// method header
	MethodHeader string `json:"methodHeader,omitempty"`

	// method parameter
	MethodParameter string `json:"methodParameter,omitempty"`

	// method tunnel
	MethodTunnel bool `json:"methodTunnel,omitempty"`

	// preferences tunnel
	PreferencesTunnel bool `json:"preferencesTunnel,omitempty"`

	// query tunnel
	QueryTunnel bool `json:"queryTunnel,omitempty"`

	// started
	Started bool `json:"started,omitempty"`

	// stopped
	Stopped bool `json:"stopped,omitempty"`

	// user agent tunnel
	UserAgentTunnel bool `json:"userAgentTunnel,omitempty"`
}

// Validate validates this tunnel service
func (m *TunnelService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelService) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tunnel service based on the context it is used
func (m *TunnelService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelService) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TunnelService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelService) UnmarshalBinary(b []byte) error {
	var res TunnelService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
