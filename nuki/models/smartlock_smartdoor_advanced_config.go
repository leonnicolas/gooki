// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmartlockSmartdoorAdvancedConfig smartlock smartdoor advanced config
//
// swagger:model Smartlock.SmartdoorAdvancedConfig
type SmartlockSmartdoorAdvancedConfig struct {

	// The Auto Lock feature automatically locks your door when it has been unlocked for a certain period of time
	// Required: true
	AutoLock *bool `json:"autoLock"`

	// Seconds until the smart lock relocks itself after it has been unlocked. No auto relock if value is 0
	AutoLockTimeout int32 `json:"autoLockTimeout,omitempty"`

	// Flag that indicates if the automatic detection of the battery type is enabled
	AutomaticBatteryTypeDetection bool `json:"automaticBatteryTypeDetection,omitempty"`

	// The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed, 255 .. unknown
	// Required: true
	BatteryType *int32 `json:"batteryType"`

	// The volume of the buzzer: 0 .. off, 1 .. low, 2 .. normal
	// Enum: [0 1 2]
	BuzzerVolume int32 `json:"buzzerVolume,omitempty"`

	// The desired action, if the button is pressed twice: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status
	DoubleButtonPressAction int32 `json:"doubleButtonPressAction,omitempty"`

	// Timeout in seconds for lock ‘n’ go
	// Enum: [5 10 15 20 30 45 60]
	LngTimeout int32 `json:"lngTimeout,omitempty"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// The desired action, if the button is pressed once: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status
	SingleButtonPressAction int32 `json:"singleButtonPressAction,omitempty"`

	// Set of supported battery types: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed, 254 .. automatic, 255 .. unknown
	// Read Only: true
	// Unique: true
	SupportedBatteryTypes []int32 `json:"supportedBatteryTypes"`

	// Duration in seconds for holding the latch in unlatched position
	// Enum: [1 3 5 7 10 15 20 30]
	UnlatchDuration int32 `json:"unlatchDuration,omitempty"`
}

// Validate validates this smartlock smartdoor advanced config
func (m *SmartlockSmartdoorAdvancedConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatteryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuzzerVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLngTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedBatteryTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnlatchDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) validateAutoLock(formats strfmt.Registry) error {

	if err := validate.Required("autoLock", "body", m.AutoLock); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) validateBatteryType(formats strfmt.Registry) error {

	if err := validate.Required("batteryType", "body", m.BatteryType); err != nil {
		return err
	}

	return nil
}

var smartlockSmartdoorAdvancedConfigTypeBuzzerVolumePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockSmartdoorAdvancedConfigTypeBuzzerVolumePropEnum = append(smartlockSmartdoorAdvancedConfigTypeBuzzerVolumePropEnum, v)
	}
}

// prop value enum
func (m *SmartlockSmartdoorAdvancedConfig) validateBuzzerVolumeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockSmartdoorAdvancedConfigTypeBuzzerVolumePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) validateBuzzerVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.BuzzerVolume) { // not required
		return nil
	}

	// value enum
	if err := m.validateBuzzerVolumeEnum("buzzerVolume", "body", m.BuzzerVolume); err != nil {
		return err
	}

	return nil
}

var smartlockSmartdoorAdvancedConfigTypeLngTimeoutPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[5,10,15,20,30,45,60]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockSmartdoorAdvancedConfigTypeLngTimeoutPropEnum = append(smartlockSmartdoorAdvancedConfigTypeLngTimeoutPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockSmartdoorAdvancedConfig) validateLngTimeoutEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockSmartdoorAdvancedConfigTypeLngTimeoutPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) validateLngTimeout(formats strfmt.Registry) error {
	if swag.IsZero(m.LngTimeout) { // not required
		return nil
	}

	// value enum
	if err := m.validateLngTimeoutEnum("lngTimeout", "body", m.LngTimeout); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) validateSupportedBatteryTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedBatteryTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("supportedBatteryTypes", "body", m.SupportedBatteryTypes); err != nil {
		return err
	}

	return nil
}

var smartlockSmartdoorAdvancedConfigTypeUnlatchDurationPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,3,5,7,10,15,20,30]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smartlockSmartdoorAdvancedConfigTypeUnlatchDurationPropEnum = append(smartlockSmartdoorAdvancedConfigTypeUnlatchDurationPropEnum, v)
	}
}

// prop value enum
func (m *SmartlockSmartdoorAdvancedConfig) validateUnlatchDurationEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, smartlockSmartdoorAdvancedConfigTypeUnlatchDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) validateUnlatchDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.UnlatchDuration) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnlatchDurationEnum("unlatchDuration", "body", m.UnlatchDuration); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this smartlock smartdoor advanced config based on the context it is used
func (m *SmartlockSmartdoorAdvancedConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedBatteryTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

func (m *SmartlockSmartdoorAdvancedConfig) contextValidateSupportedBatteryTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "supportedBatteryTypes", "body", []int32(m.SupportedBatteryTypes)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmartlockSmartdoorAdvancedConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmartlockSmartdoorAdvancedConfig) UnmarshalBinary(b []byte) error {
	var res SmartlockSmartdoorAdvancedConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
