// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdvancedAPIKeyUpdate advanced Api key update
//
// swagger:model AdvancedApiKeyUpdate
type AdvancedAPIKeyUpdate struct {

	// The features to trigger webhooks, for all types except 'ONLY_SECRET'
	// Required: true
	// Unique: true
	WebhookFeatures []string `json:"webhookFeatures"`

	// The URL where our webhooks should point to
	// Required: true
	WebhookURL *string `json:"webhookUrl"`
}

// Validate validates this advanced Api key update
func (m *AdvancedAPIKeyUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWebhookFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var advancedApiKeyUpdateWebhookFeaturesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEVICE_STATUS","DEVICE_MASTERDATA","DEVICE_CONFIG","DEVICE_LOGS","DEVICE_AUTHS","ACCOUNT_USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedApiKeyUpdateWebhookFeaturesItemsEnum = append(advancedApiKeyUpdateWebhookFeaturesItemsEnum, v)
	}
}

func (m *AdvancedAPIKeyUpdate) validateWebhookFeaturesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedApiKeyUpdateWebhookFeaturesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedAPIKeyUpdate) validateWebhookFeatures(formats strfmt.Registry) error {

	if err := validate.Required("webhookFeatures", "body", m.WebhookFeatures); err != nil {
		return err
	}

	if err := validate.UniqueItems("webhookFeatures", "body", m.WebhookFeatures); err != nil {
		return err
	}

	for i := 0; i < len(m.WebhookFeatures); i++ {

		// value enum
		if err := m.validateWebhookFeaturesItemsEnum("webhookFeatures"+"."+strconv.Itoa(i), "body", m.WebhookFeatures[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AdvancedAPIKeyUpdate) validateWebhookURL(formats strfmt.Registry) error {

	if err := validate.Required("webhookUrl", "body", m.WebhookURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this advanced Api key update based on context it is used
func (m *AdvancedAPIKeyUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedAPIKeyUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedAPIKeyUpdate) UnmarshalBinary(b []byte) error {
	var res AdvancedAPIKeyUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
