// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MetadataService metadata service
//
// swagger:model MetadataService
type MetadataService struct {

	// all character set extension names
	AllCharacterSetExtensionNames []string `json:"allCharacterSetExtensionNames"`

	// all encoding extension names
	AllEncodingExtensionNames []string `json:"allEncodingExtensionNames"`

	// all extension names
	AllExtensionNames []string `json:"allExtensionNames"`

	// all language extension names
	AllLanguageExtensionNames []string `json:"allLanguageExtensionNames"`

	// all media type extension names
	AllMediaTypeExtensionNames []string `json:"allMediaTypeExtensionNames"`

	// context
	Context *Context `json:"context,omitempty"`

	// default character set
	DefaultCharacterSet *CharacterSet `json:"defaultCharacterSet,omitempty"`

	// default encoding
	DefaultEncoding *Encoding `json:"defaultEncoding,omitempty"`

	// default language
	DefaultLanguage *Language `json:"defaultLanguage,omitempty"`

	// default media type
	DefaultMediaType *MediaType `json:"defaultMediaType,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// started
	Started bool `json:"started,omitempty"`

	// stopped
	Stopped bool `json:"stopped,omitempty"`
}

// Validate validates this metadata service
func (m *MetadataService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultCharacterSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultMediaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataService) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) validateDefaultCharacterSet(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultCharacterSet) { // not required
		return nil
	}

	if m.DefaultCharacterSet != nil {
		if err := m.DefaultCharacterSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultCharacterSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultCharacterSet")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) validateDefaultEncoding(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultEncoding) { // not required
		return nil
	}

	if m.DefaultEncoding != nil {
		if err := m.DefaultEncoding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultEncoding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultEncoding")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) validateDefaultLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultLanguage) { // not required
		return nil
	}

	if m.DefaultLanguage != nil {
		if err := m.DefaultLanguage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultLanguage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultLanguage")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) validateDefaultMediaType(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultMediaType) { // not required
		return nil
	}

	if m.DefaultMediaType != nil {
		if err := m.DefaultMediaType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultMediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultMediaType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this metadata service based on the context it is used
func (m *MetadataService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultCharacterSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultEncoding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultLanguage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultMediaType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataService) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) contextValidateDefaultCharacterSet(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultCharacterSet != nil {

		if swag.IsZero(m.DefaultCharacterSet) { // not required
			return nil
		}

		if err := m.DefaultCharacterSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultCharacterSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultCharacterSet")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) contextValidateDefaultEncoding(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultEncoding != nil {

		if swag.IsZero(m.DefaultEncoding) { // not required
			return nil
		}

		if err := m.DefaultEncoding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultEncoding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultEncoding")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) contextValidateDefaultLanguage(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultLanguage != nil {

		if swag.IsZero(m.DefaultLanguage) { // not required
			return nil
		}

		if err := m.DefaultLanguage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultLanguage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultLanguage")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataService) contextValidateDefaultMediaType(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultMediaType != nil {

		if swag.IsZero(m.DefaultMediaType) { // not required
			return nil
		}

		if err := m.DefaultMediaType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultMediaType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultMediaType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataService) UnmarshalBinary(b []byte) error {
	var res MetadataService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
