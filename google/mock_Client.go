// Code generated by mockery v2.40.3. DO NOT EDIT.

package google

import (
	mock "github.com/stretchr/testify/mock"
	admin "google.golang.org/api/admin/directory/v1"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetDeletedUsers provides a mock function with given fields:
func (_m *MockClient) GetDeletedUsers() ([]*admin.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeletedUsers")
	}

	var r0 []*admin.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*admin.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*admin.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetDeletedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeletedUsers'
type MockClient_GetDeletedUsers_Call struct {
	*mock.Call
}

// GetDeletedUsers is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetDeletedUsers() *MockClient_GetDeletedUsers_Call {
	return &MockClient_GetDeletedUsers_Call{Call: _e.mock.On("GetDeletedUsers")}
}

func (_c *MockClient_GetDeletedUsers_Call) Run(run func()) *MockClient_GetDeletedUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetDeletedUsers_Call) Return(_a0 []*admin.User, _a1 error) *MockClient_GetDeletedUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetDeletedUsers_Call) RunAndReturn(run func() ([]*admin.User, error)) *MockClient_GetDeletedUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMembers provides a mock function with given fields: _a0
func (_m *MockClient) GetGroupMembers(_a0 *admin.Group) ([]*admin.Member, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembers")
	}

	var r0 []*admin.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(*admin.Group) ([]*admin.Member, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*admin.Group) []*admin.Member); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*admin.Group) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMembers'
type MockClient_GetGroupMembers_Call struct {
	*mock.Call
}

// GetGroupMembers is a helper method to define mock.On call
//   - _a0 *admin.Group
func (_e *MockClient_Expecter) GetGroupMembers(_a0 interface{}) *MockClient_GetGroupMembers_Call {
	return &MockClient_GetGroupMembers_Call{Call: _e.mock.On("GetGroupMembers", _a0)}
}

func (_c *MockClient_GetGroupMembers_Call) Run(run func(_a0 *admin.Group)) *MockClient_GetGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*admin.Group))
	})
	return _c
}

func (_c *MockClient_GetGroupMembers_Call) Return(_a0 []*admin.Member, _a1 error) *MockClient_GetGroupMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetGroupMembers_Call) RunAndReturn(run func(*admin.Group) ([]*admin.Member, error)) *MockClient_GetGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: _a0
func (_m *MockClient) GetGroups(_a0 string) ([]*admin.Group, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []*admin.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*admin.Group, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*admin.Group); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockClient_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - _a0 string
func (_e *MockClient_Expecter) GetGroups(_a0 interface{}) *MockClient_GetGroups_Call {
	return &MockClient_GetGroups_Call{Call: _e.mock.On("GetGroups", _a0)}
}

func (_c *MockClient_GetGroups_Call) Run(run func(_a0 string)) *MockClient_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetGroups_Call) Return(_a0 []*admin.Group, _a1 error) *MockClient_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetGroups_Call) RunAndReturn(run func(string) ([]*admin.Group, error)) *MockClient_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: _a0
func (_m *MockClient) GetUsers(_a0 string) ([]*admin.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*admin.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*admin.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*admin.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockClient_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - _a0 string
func (_e *MockClient_Expecter) GetUsers(_a0 interface{}) *MockClient_GetUsers_Call {
	return &MockClient_GetUsers_Call{Call: _e.mock.On("GetUsers", _a0)}
}

func (_c *MockClient_GetUsers_Call) Run(run func(_a0 string)) *MockClient_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUsers_Call) Return(_a0 []*admin.User, _a1 error) *MockClient_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetUsers_Call) RunAndReturn(run func(string) ([]*admin.User, error)) *MockClient_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
