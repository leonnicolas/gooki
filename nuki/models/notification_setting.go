// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationSetting notification setting
//
// swagger:model Notification.Setting
type NotificationSetting struct {

	// A set of auth IDs to filter push notifications to certain  users or keypads. If no entry push notifications are triggered for all users and keypads
	// Unique: true
	AuthIds []string `json:"authIds"`

	// The smartlock ID, if not set all Smart Locks of the account  are enabled for push notifications
	SmartlockID int64 `json:"smartlockId,omitempty"`

	// A set on which push notifications should be triggered: lock, unlock, unlatch, lockngo, open, ring, doorsensor, warnings, smartlock
	// Required: true
	// Unique: true
	TriggerEvents []string `json:"triggerEvents"`
}

// Validate validates this notification setting
func (m *NotificationSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationSetting) validateAuthIds(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("authIds", "body", m.AuthIds); err != nil {
		return err
	}

	return nil
}

func (m *NotificationSetting) validateTriggerEvents(formats strfmt.Registry) error {

	if err := validate.Required("triggerEvents", "body", m.TriggerEvents); err != nil {
		return err
	}

	if err := validate.UniqueItems("triggerEvents", "body", m.TriggerEvents); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification setting based on context it is used
func (m *NotificationSetting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationSetting) UnmarshalBinary(b []byte) error {
	var res NotificationSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
