// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address address
//
// swagger:model Address
type Address struct {

	// The account id
	// Required: true
	AccountID *int32 `json:"accountId"`

	// The address id
	// Required: true
	AddressID *int32 `json:"addressId"`

	// The optional check in time (minutes of the day)
	CheckInTime int32 `json:"checkInTime,omitempty"`

	// The optional check out time (minutes of the day)
	CheckOutTime int32 `json:"checkOutTime,omitempty"`

	// The creation date
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// The name of the address
	// Required: true
	Name *string `json:"name"`

	// The optional service id if the address is from an partner service
	// Enum: [airbnb bookingsync]
	ServiceID string `json:"serviceId,omitempty"`

	// The optional settings object
	Settings map[string]interface{} `json:"settings,omitempty"`

	// The smartlocks for this address
	// Required: true
	SmartlockIds []int64 `json:"smartlockIds"`

	// The timezone
	TimeZone string `json:"timeZone,omitempty"`

	// The update date
	// Required: true
	// Format: date-time
	UpdateDate *strfmt.DateTime `json:"updateDate"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartlockIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddressID(formats strfmt.Registry) error {

	if err := validate.Required("addressId", "body", m.AddressID); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var addressTypeServiceIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["airbnb","bookingsync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressTypeServiceIDPropEnum = append(addressTypeServiceIDPropEnum, v)
	}
}

const (

	// AddressServiceIDAirbnb captures enum value "airbnb"
	AddressServiceIDAirbnb string = "airbnb"

	// AddressServiceIDBookingsync captures enum value "bookingsync"
	AddressServiceIDBookingsync string = "bookingsync"
)

// prop value enum
func (m *Address) validateServiceIDEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressTypeServiceIDPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Address) validateServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceID) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceIDEnum("serviceId", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateSmartlockIds(formats strfmt.Registry) error {

	if err := validate.Required("smartlockIds", "body", m.SmartlockIds); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateUpdateDate(formats strfmt.Registry) error {

	if err := validate.Required("updateDate", "body", m.UpdateDate); err != nil {
		return err
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
