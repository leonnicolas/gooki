// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Smartlock smartlock
//
// swagger:model Smartlock
type Smartlock struct {

	// The account id
	// Required: true
	AccountID *int32 `json:"accountId"`

	// The admin pin state: 0 .. ok, 1 .. missing, 2 .. invalid
	// Required: true
	// Maximum: 2
	// Minimum: 0
	AdminPinState *int32 `json:"adminPinState"`

	// The advanced config
	AdvancedConfig *SmartlockAdvancedConfig `json:"advancedConfig,omitempty"`

	// The authorization id
	// Required: true
	AuthID *int32 `json:"authId"`

	// box
	Box bool `json:"box,omitempty"`

	// The config
	Config *SmartlockConfig `json:"config,omitempty"`

	// The creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// Current Subscription
	// Read Only: true
	CurrentSubscription *ShsSubscription `json:"currentSubscription,omitempty"`

	// In case of any error, it contains the error message
	Error string `json:"error,omitempty"`

	// The favorite flag
	// Required: true
	Favorite *bool `json:"favorite"`

	// The firmware version
	// Read Only: true
	FirmwareVersion int32 `json:"firmwareVersion,omitempty"`

	// The hardware version
	// Read Only: true
	HardwareVersion int32 `json:"hardwareVersion,omitempty"`

	// keyturner
	Keyturner bool `json:"keyturner,omitempty"`

	// The lock mechanism used in the smart door lock: 1 .. MyEVO, 2 .. KFV Genius (only for type = 3)
	LmType int32 `json:"lmType,omitempty"`

	// The name of the smartlock
	// Required: true
	Name *string `json:"name"`

	// opener
	Opener bool `json:"opener,omitempty"`

	// The opener advanced config
	OpenerAdvancedConfig *SmartlockOpenerAdvancedConfig `json:"openerAdvancedConfig,omitempty"`

	// The operation id - if set it's locked for another operation
	// Read Only: true
	OperationID string `json:"operationId,omitempty"`

	// Previous Subscriptions
	// Read Only: true
	PreviousSubscriptions []*ShsSubscription `json:"previousSubscriptions"`

	// The server state: 0 .. ok, 1 .. unregistered, 2 .. auth uuid invalid, 3 .. auth invalid, 4 .. offline
	// Required: true
	// Maximum: 4
	// Minimum: 0
	ServerState *int32 `json:"serverState"`

	// smart door
	SmartDoor bool `json:"smartDoor,omitempty"`

	// The smartdoor advanced config
	SmartdoorAdvancedConfig *SmartlockSmartdoorAdvancedConfig `json:"smartdoorAdvancedConfig,omitempty"`

	// smartlock3
	Smartlock3 bool `json:"smartlock3,omitempty"`

	// The smartlock id
	// Required: true
	SmartlockID *int64 `json:"smartlockId"`

	// The state
	State *SmartlockState `json:"state,omitempty"`

	// The type: 0 .. keyturner, 1 .. box, 2 .. opener, 3 .. smartdoor, 4 .. smartlock3
	// Required: true
	Type *int32 `json:"type"`

	// The update date
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`

	// The flag indicating a virtual Smart Lock
	// Read Only: true
	VirtualDevice *bool `json:"virtualDevice,omitempty"`

	// The web config
	WebConfig *SmartlockWebConfig `json:"webConfig,omitempty"`
}

// Validate validates this smartlock
func (m *Smartlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminPinState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvancedConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFavorite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenerAdvancedConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartdoorAdvancedConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Smartlock) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateAdminPinState(formats strfmt.Registry) error {

	if err := validate.Required("adminPinState", "body", m.AdminPinState); err != nil {
		return err
	}

	if err := validate.MinimumInt("adminPinState", "body", int64(*m.AdminPinState), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("adminPinState", "body", int64(*m.AdminPinState), 2, false); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateAdvancedConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedConfig) { // not required
		return nil
	}

	if m.AdvancedConfig != nil {
		if err := m.AdvancedConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advancedConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) validateAuthID(formats strfmt.Registry) error {

	if err := validate.Required("authId", "body", m.AuthID); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateCurrentSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentSubscription) { // not required
		return nil
	}

	if m.CurrentSubscription != nil {
		if err := m.CurrentSubscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSubscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSubscription")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) validateFavorite(formats strfmt.Registry) error {

	if err := validate.Required("favorite", "body", m.Favorite); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateOpenerAdvancedConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenerAdvancedConfig) { // not required
		return nil
	}

	if m.OpenerAdvancedConfig != nil {
		if err := m.OpenerAdvancedConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openerAdvancedConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openerAdvancedConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) validatePreviousSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousSubscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviousSubscriptions); i++ {
		if swag.IsZero(m.PreviousSubscriptions[i]) { // not required
			continue
		}

		if m.PreviousSubscriptions[i] != nil {
			if err := m.PreviousSubscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousSubscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousSubscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Smartlock) validateServerState(formats strfmt.Registry) error {

	if err := validate.Required("serverState", "body", m.ServerState); err != nil {
		return err
	}

	if err := validate.MinimumInt("serverState", "body", int64(*m.ServerState), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("serverState", "body", int64(*m.ServerState), 4, false); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateSmartdoorAdvancedConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartdoorAdvancedConfig) { // not required
		return nil
	}

	if m.SmartdoorAdvancedConfig != nil {
		if err := m.SmartdoorAdvancedConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smartdoorAdvancedConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smartdoorAdvancedConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) validateSmartlockID(formats strfmt.Registry) error {

	if err := validate.Required("smartlockId", "body", m.SmartlockID); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateUpdateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) validateWebConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.WebConfig) { // not required
		return nil
	}

	if m.WebConfig != nil {
		if err := m.WebConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this smartlock based on the context it is used
func (m *Smartlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvancedConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHardwareVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenerAdvancedConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmartdoorAdvancedConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Smartlock) contextValidateAdvancedConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvancedConfig != nil {

		if swag.IsZero(m.AdvancedConfig) { // not required
			return nil
		}

		if err := m.AdvancedConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advancedConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) contextValidateCurrentSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentSubscription != nil {

		if swag.IsZero(m.CurrentSubscription) { // not required
			return nil
		}

		if err := m.CurrentSubscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSubscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSubscription")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) contextValidateFirmwareVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "firmwareVersion", "body", int32(m.FirmwareVersion)); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) contextValidateHardwareVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hardwareVersion", "body", int32(m.HardwareVersion)); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) contextValidateOpenerAdvancedConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OpenerAdvancedConfig != nil {

		if swag.IsZero(m.OpenerAdvancedConfig) { // not required
			return nil
		}

		if err := m.OpenerAdvancedConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openerAdvancedConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openerAdvancedConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) contextValidateOperationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "operationId", "body", string(m.OperationID)); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) contextValidatePreviousSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "previousSubscriptions", "body", []*ShsSubscription(m.PreviousSubscriptions)); err != nil {
		return err
	}

	for i := 0; i < len(m.PreviousSubscriptions); i++ {

		if m.PreviousSubscriptions[i] != nil {

			if swag.IsZero(m.PreviousSubscriptions[i]) { // not required
				return nil
			}

			if err := m.PreviousSubscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousSubscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousSubscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Smartlock) contextValidateSmartdoorAdvancedConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SmartdoorAdvancedConfig != nil {

		if swag.IsZero(m.SmartdoorAdvancedConfig) { // not required
			return nil
		}

		if err := m.SmartdoorAdvancedConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smartdoorAdvancedConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smartdoorAdvancedConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *Smartlock) contextValidateVirtualDevice(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "virtualDevice", "body", m.VirtualDevice); err != nil {
		return err
	}

	return nil
}

func (m *Smartlock) contextValidateWebConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.WebConfig != nil {

		if swag.IsZero(m.WebConfig) { // not required
			return nil
		}

		if err := m.WebConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Smartlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Smartlock) UnmarshalBinary(b []byte) error {
	var res Smartlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
