// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServiceLinkResourcePostPost(params *ServiceLinkResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceLinkResourcePostPostOK, error)

	ServiceResourceGetGet(params *ServiceResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceResourceGetGetOK, error)

	ServiceSyncResourcePostPost(params *ServiceSyncResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceSyncResourcePostPostNoContent, error)

	ServiceUnlinkResourcePostPost(params *ServiceUnlinkResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceUnlinkResourcePostPostNoContent, error)

	ServicesResourceGetGet(params *ServicesResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesResourceGetGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ServiceLinkResourcePostPost links a service
*/
func (a *Client) ServiceLinkResourcePostPost(params *ServiceLinkResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceLinkResourcePostPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceLinkResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceLinkResource_post_post",
		Method:             "POST",
		PathPattern:        "/service/{serviceId}/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceLinkResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceLinkResourcePostPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceLinkResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceResourceGetGet gets a service
*/
func (a *Client) ServiceResourceGetGet(params *ServiceResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceResource_get_get",
		Method:             "GET",
		PathPattern:        "/service/{serviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceSyncResourcePostPost syncs a service
*/
func (a *Client) ServiceSyncResourcePostPost(params *ServiceSyncResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceSyncResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceSyncResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceSyncResource_post_post",
		Method:             "POST",
		PathPattern:        "/service/{serviceId}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceSyncResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceSyncResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceSyncResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceUnlinkResourcePostPost unlinks a service
*/
func (a *Client) ServiceUnlinkResourcePostPost(params *ServiceUnlinkResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceUnlinkResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUnlinkResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceUnlinkResource_post_post",
		Method:             "POST",
		PathPattern:        "/service/{serviceId}/unlink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceUnlinkResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceUnlinkResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceUnlinkResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServicesResourceGetGet gets a list of services
*/
func (a *Client) ServicesResourceGetGet(params *ServicesResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesResource_get_get",
		Method:             "GET",
		PathPattern:        "/service",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServicesResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
