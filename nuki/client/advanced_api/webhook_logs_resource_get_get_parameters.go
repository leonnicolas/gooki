// Code generated by go-swagger; DO NOT EDIT.

package advanced_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewWebhookLogsResourceGetGetParams creates a new WebhookLogsResourceGetGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWebhookLogsResourceGetGetParams() *WebhookLogsResourceGetGetParams {
	return &WebhookLogsResourceGetGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWebhookLogsResourceGetGetParamsWithTimeout creates a new WebhookLogsResourceGetGetParams object
// with the ability to set a timeout on a request.
func NewWebhookLogsResourceGetGetParamsWithTimeout(timeout time.Duration) *WebhookLogsResourceGetGetParams {
	return &WebhookLogsResourceGetGetParams{
		timeout: timeout,
	}
}

// NewWebhookLogsResourceGetGetParamsWithContext creates a new WebhookLogsResourceGetGetParams object
// with the ability to set a context for a request.
func NewWebhookLogsResourceGetGetParamsWithContext(ctx context.Context) *WebhookLogsResourceGetGetParams {
	return &WebhookLogsResourceGetGetParams{
		Context: ctx,
	}
}

// NewWebhookLogsResourceGetGetParamsWithHTTPClient creates a new WebhookLogsResourceGetGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewWebhookLogsResourceGetGetParamsWithHTTPClient(client *http.Client) *WebhookLogsResourceGetGetParams {
	return &WebhookLogsResourceGetGetParams{
		HTTPClient: client,
	}
}

/*
WebhookLogsResourceGetGetParams contains all the parameters to send to the API endpoint

	for the webhook logs resource get get operation.

	Typically these are written to a http.Request.
*/
type WebhookLogsResourceGetGetParams struct {

	/* APIKeyID.

	   The api key id
	*/
	APIKeyID int64

	/* ID.

	   Optionally filter for older logs
	*/
	ID *string

	/* Limit.

	   Amount of logs (max: 100)

	   Default: 50
	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the webhook logs resource get get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WebhookLogsResourceGetGetParams) WithDefaults() *WebhookLogsResourceGetGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the webhook logs resource get get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WebhookLogsResourceGetGetParams) SetDefaults() {
	var (
		limitDefault = int64(50)
	)

	val := WebhookLogsResourceGetGetParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) WithTimeout(timeout time.Duration) *WebhookLogsResourceGetGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) WithContext(ctx context.Context) *WebhookLogsResourceGetGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) WithHTTPClient(client *http.Client) *WebhookLogsResourceGetGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKeyID adds the aPIKeyID to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) WithAPIKeyID(aPIKeyID int64) *WebhookLogsResourceGetGetParams {
	o.SetAPIKeyID(aPIKeyID)
	return o
}

// SetAPIKeyID adds the apiKeyId to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) SetAPIKeyID(aPIKeyID int64) {
	o.APIKeyID = aPIKeyID
}

// WithID adds the id to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) WithID(id *string) *WebhookLogsResourceGetGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) SetID(id *string) {
	o.ID = id
}

// WithLimit adds the limit to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) WithLimit(limit *int64) *WebhookLogsResourceGetGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the webhook logs resource get get params
func (o *WebhookLogsResourceGetGetParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *WebhookLogsResourceGetGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param apiKeyId
	if err := r.SetPathParam("apiKeyId", swag.FormatInt64(o.APIKeyID)); err != nil {
		return err
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
