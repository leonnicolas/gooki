// Code generated by go-swagger; DO NOT EDIT.

package smartlock_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new smartlock auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for smartlock auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SmartlockAuthResourceDeleteDelete(params *SmartlockAuthResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourceDeleteDeleteNoContent, error)

	SmartlockAuthResourceGetGet(params *SmartlockAuthResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourceGetGetOK, error)

	SmartlockAuthResourcePostPost(params *SmartlockAuthResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourcePostPostNoContent, error)

	SmartlockAuthsResourceGetGet(params *SmartlockAuthsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthsResourceGetGetOK, error)

	SmartlockAuthsResourcePutPut(params *SmartlockAuthsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthsResourcePutPutNoContent, error)

	SmartlocksAuthsResourceDeleteDelete(params *SmartlocksAuthsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourceDeleteDeleteNoContent, error)

	SmartlocksAuthsResourceGetGet(params *SmartlocksAuthsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourceGetGetOK, error)

	SmartlocksAuthsResourcePostPost(params *SmartlocksAuthsResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourcePostPostNoContent, error)

	SmartlocksAuthsResourcePutPut(params *SmartlocksAuthsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourcePutPutNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SmartlockAuthResourceDeleteDelete deletes asynchronous a smartlock authorization
*/
func (a *Client) SmartlockAuthResourceDeleteDelete(params *SmartlockAuthResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlockAuthResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlockAuthResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/smartlock/{smartlockId}/auth/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlockAuthResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlockAuthResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlockAuthResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlockAuthResourceGetGet gets a smartlock authorization
*/
func (a *Client) SmartlockAuthResourceGetGet(params *SmartlockAuthResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlockAuthResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlockAuthResource_get_get",
		Method:             "GET",
		PathPattern:        "/smartlock/{smartlockId}/auth/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlockAuthResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlockAuthResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlockAuthResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlockAuthResourcePostPost updates asynchronous a smartlock authorization
*/
func (a *Client) SmartlockAuthResourcePostPost(params *SmartlockAuthResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlockAuthResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlockAuthResource_post_post",
		Method:             "POST",
		PathPattern:        "/smartlock/{smartlockId}/auth/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlockAuthResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlockAuthResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlockAuthResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlockAuthsResourceGetGet gets a list of smartlock authorizations
*/
func (a *Client) SmartlockAuthsResourceGetGet(params *SmartlockAuthsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlockAuthsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlockAuthsResource_get_get",
		Method:             "GET",
		PathPattern:        "/smartlock/{smartlockId}/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlockAuthsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlockAuthsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlockAuthsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlockAuthsResourcePutPut creates asynchronous a smartlock authorization
*/
func (a *Client) SmartlockAuthsResourcePutPut(params *SmartlockAuthsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlockAuthsResourcePutPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlockAuthsResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlockAuthsResource_put_put",
		Method:             "PUT",
		PathPattern:        "/smartlock/{smartlockId}/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlockAuthsResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlockAuthsResourcePutPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlockAuthsResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlocksAuthsResourceDeleteDelete deletes smartlock authorizations asynchronously
*/
func (a *Client) SmartlocksAuthsResourceDeleteDelete(params *SmartlocksAuthsResourceDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourceDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlocksAuthsResourceDeleteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlocksAuthsResource_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/smartlock/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlocksAuthsResourceDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlocksAuthsResourceDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlocksAuthsResource_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlocksAuthsResourceGetGet gets a list of smartlock authorizations for your smartlocks
*/
func (a *Client) SmartlocksAuthsResourceGetGet(params *SmartlocksAuthsResourceGetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourceGetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlocksAuthsResourceGetGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlocksAuthsResource_get_get",
		Method:             "GET",
		PathPattern:        "/smartlock/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlocksAuthsResourceGetGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlocksAuthsResourceGetGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlocksAuthsResource_get_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlocksAuthsResourcePostPost updates smartlock authorizations asynchronously
*/
func (a *Client) SmartlocksAuthsResourcePostPost(params *SmartlocksAuthsResourcePostPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourcePostPostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlocksAuthsResourcePostPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlocksAuthsResource_post_post",
		Method:             "POST",
		PathPattern:        "/smartlock/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlocksAuthsResourcePostPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlocksAuthsResourcePostPostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlocksAuthsResource_post_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmartlocksAuthsResourcePutPut creates asynchronous smartlock authorizations
*/
func (a *Client) SmartlocksAuthsResourcePutPut(params *SmartlocksAuthsResourcePutPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartlocksAuthsResourcePutPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartlocksAuthsResourcePutPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SmartlocksAuthsResource_put_put",
		Method:             "PUT",
		PathPattern:        "/smartlock/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartlocksAuthsResourcePutPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartlocksAuthsResourcePutPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmartlocksAuthsResource_put_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
