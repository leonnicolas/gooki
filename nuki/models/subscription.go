// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
//
// swagger:model Subscription
type Subscription struct {

	// True if the subscription is available for new users
	// Required: true
	Available *bool `json:"available"`

	// The description per language
	// Example: { de: '', en: ''}
	// Required: true
	Descriptions map[string]string `json:"descriptions"`

	// The optional gift article
	GiftArticle string `json:"giftArticle,omitempty"`

	// The length with number and unit (e.g. 30d, 2y)
	// Example: 30d
	// Required: true
	Length *string `json:"length"`

	// The price
	// Required: true
	Price *float64 `json:"price"`

	// The quantity of authorizations
	// Required: true
	Quantity *int32 `json:"quantity"`

	// The unique subscription id
	// Required: true
	SubscriptionID *int32 `json:"subscriptionId"`

	// The title per language
	// Example: { de: '', en: ''}
	// Required: true
	Titles map[string]string `json:"titles"`

	// The update date
	UpdateDate int64 `json:"updateDate,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDescriptions(formats strfmt.Registry) error {

	if err := validate.Required("descriptions", "body", m.Descriptions); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionId", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateTitles(formats strfmt.Registry) error {

	if err := validate.Required("titles", "body", m.Titles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subscription based on context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
